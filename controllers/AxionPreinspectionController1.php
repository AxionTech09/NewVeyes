<?php

namespace app\controllers;

use Yii;
use app\models\AxionPreinspection;
use app\models\AxionPreinspectionSearch;
use app\models\User;
use app\models\MasterCity;
use app\models\MasterTown;
use app\models\MasterLocation;
use app\models\MasterFieldexecutives;
use app\models\FieldexecutivesTasks;
use app\models\AxionPreinspectionHistory;
use app\models\PreinspectionClientCaller;
use app\models\EmailHistory;
use app\models\AxionPreinspectionFourwheeler;
use app\models\AxionPreinspectionCommercial;
use app\models\AxionPreinspectionPhotos;
use app\models\PreinspectionClientCompany;
use app\models\PreinspectionClientDivision;
use app\models\PreinspectionClientBranch;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\data\ActiveDataProvider;
use yii\web\Response;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\widgets\ActiveForm;
use yii\helpers\Url;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\web\UploadedFile;
use kartik\mpdf\Pdf;
use yii\imagine\Image;
use Imagine\Gd;
use Imagine\Image\Box;
use Imagine\Image\BoxInterface;
use yii\rbac\DbManager;
use OpenTok\OpenTok;
use OpenTok\MediaMode;
use OpenTok\ArchiveMode;
use OpenTok\Session;
use OpenTok\Role;

ini_set('memory_limit', '1024M');
/**
 * PreinspectionController implements the CRUD actions for Preinspection model.
 */
class AxionPreinspectionController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all Preinspection models.
     * @return mixed
     */
    public function actionIndex()
    {
        /*
        $searchModel = new PreinspectionSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
         * 
         */ 
               $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
               $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();

               // your default model and dataProvider generated by gii
                $searchModel = new AxionPreinspectionSearch();
                $searchModel->status = [0,12,1]; 
                $dataProvider = $searchModel->search(Yii::$app->request->queryParams,'index');
                
                if($role == 'Branch Head' || $role == 'Branch Executive')
                {
                    $company = PreinspectionClientCompany::find()
                            ->where(['id' => Yii::$app->user->identity->companyId])
                            ->all();
                }
                else
                {
                        $company = PreinspectionClientCompany::find()
                           ->all();
                }
                
                $branch = '';

                $params = Yii::$app->request->getQueryParams();

                if(isset($params['AxionPreinspectionSearch']['insurerBranch']))
                {
                    
                    $branch = PreinspectionClientBranch::find()
                        ->where(['companyId' => $params['AxionPreinspectionSearch']['insurerName']])
                        ->all();  

                }
                
               // non-ajax - render the grid by default
               return $this->render('index', [
                   'dataProvider' => $dataProvider,
                   'searchModel' => $searchModel,
                   'valuator' => $valuator,
                   'role' => $role,
                   'company' => $company,
                   'branch' => $branch,
           ]);
    }
    

    public function actionCompleted()
    {
        /*
        $searchModel = new PreinspectionSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
         * 
         */
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
               $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();

               // your default model and dataProvider generated by gii
                $searchModel = new AxionPreinspectionSearch();
                $searchModel->status = [8,101,102,104]; 
                $dataProvider = $searchModel->search(Yii::$app->request->queryParams,'completed');
                
                if($role == 'Branch Head' || $role == 'Branch Executive')
                {
                    $company = PreinspectionClientCompany::find()
                            ->where(['id' => Yii::$app->user->identity->companyId])
                            ->all();
                }
                else
                {
                        $company = PreinspectionClientCompany::find()
                           ->all();
                }
                
                 $branch = '';
                
                 $params = Yii::$app->request->getQueryParams();

                if(isset($params['AxionPreinspectionSearch']['insurerBranch']))
                {
                    
                    $branch = PreinspectionClientBranch::find()
                        ->where(['companyId' => $params['AxionPreinspectionSearch']['insurerName']])
                        ->all();  

                }
                
               // non-ajax - render the grid by default
               return $this->render('completed', [
                   'dataProvider' => $dataProvider,
                   'searchModel' => $searchModel,
                   'valuator'=>$valuator,
                   'role' => $role,
                   'company' => $company,
                   'branch' => $branch,
           ]);
    }
    
    public function actionTransaction($id)
    {
        //$path = 'C:\Users\sridhar\Dropbox\checkprocess';
        //FileHelper::createDirectory($path);
        
        $query = AxionPreinspectionHistory::find()->where(['preinspection_id' => $id]);
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort'=> ['defaultOrder' => ['created_on'=>SORT_DESC]]
        ]);

        return $this->render('transaction', [
            'model' => $dataProvider,
        ]);	
    }
    
    protected function get_image_location($image = ''){
        $exif = exif_read_data($image, 0, true);
        $latitude = '';
        $longitude = '';
        $datetime = '';

        if($exif && isset($exif['GPS'])){
            if(isset($exif['GPS']['GPSLatitude']) && isset($exif['GPS']['GPSLongitude']))
            {
                $GPSLatitudeRef = $exif['GPS']['GPSLatitudeRef'];
                $GPSLatitude    = $exif['GPS']['GPSLatitude'];
                $GPSLongitudeRef= $exif['GPS']['GPSLongitudeRef'];
                $GPSLongitude   = $exif['GPS']['GPSLongitude'];

                $lat_degrees = count($GPSLatitude) > 0 ? $this->gps2Num($GPSLatitude[0]) : 0;
                $lat_minutes = count($GPSLatitude) > 1 ? $this->gps2Num($GPSLatitude[1]) : 0;
                $lat_seconds = count($GPSLatitude) > 2 ? $this->gps2Num($GPSLatitude[2]) : 0;

                $lon_degrees = count($GPSLongitude) > 0 ? $this->gps2Num($GPSLongitude[0]) : 0;
                $lon_minutes = count($GPSLongitude) > 1 ? $this->gps2Num($GPSLongitude[1]) : 0;
                $lon_seconds = count($GPSLongitude) > 2 ? $this->gps2Num($GPSLongitude[2]) : 0;

                $lat_direction = ($GPSLatitudeRef == 'W' or $GPSLatitudeRef == 'S') ? -1 : 1;
                $lon_direction = ($GPSLongitudeRef == 'W' or $GPSLongitudeRef == 'S') ? -1 : 1;

                $latitude = $lat_direction * ($lat_degrees + ($lat_minutes / 60) + ($lat_seconds / (60*60)));
                $longitude = $lon_direction * ($lon_degrees + ($lon_minutes / 60) + ($lon_seconds / (60*60)));
            }
            
            if(isset($exif['EXIF']['DateTimeOriginal']))
            {
                $datetime = $exif['EXIF']['DateTimeOriginal'];
            }

            return array('latitude'=>$latitude, 'longitude'=>$longitude, 'datetime'=>$datetime);
        }else{
            return array('latitude'=>$latitude, 'longitude'=>$longitude, 'datetime'=>$datetime);
        }
    }
    protected function gps2Num($coordPart){
        $parts = explode('/', $coordPart);
        if(count($parts) <= 0)
        return 0;
        if(count($parts) == 1)
        return $parts[0];
        return floatval($parts[0]) / floatval($parts[1]);
    }
    
    protected function distance($lat1, $lon1, $lat2, $lon2, $unit) {
        $theta = $lon1 - $lon2;
        $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
        $dist = acos($dist);
        $dist = rad2deg($dist);
        $miles = $dist * 60 * 1.1515;
        $unit = strtoupper($unit);

        if ($unit == "K") {
            return ($miles * 1.609344);
        } else if ($unit == "N") {
            return ($miles * 0.8684);
        } else {
            return $miles;
        }
    }
    
    protected function customImage($inputFile,$displayText)
    {
        if(Image::getImagine()->open($inputFile)->thumbnail(new Box(500, 500))->save($inputFile , ['quality' => 80]))
        {
           if($displayText != '')
            {
                $fontFile = '@webroot/fonts/Crimson-Bold.otf';
                $img = Image::text($inputFile, $displayText, $fontFile, [0, 0], ['size' => 12, 'color' => '000']);
                $img->save($inputFile);
            } 
        }
    }
    
    protected function getLocation($lat,$long)
    {
        $loc = '';
        
        $geocode=@file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?latlng='.$lat.','.$long.'&sensor=false');

        if ($geocode === false) {
            $geocode= '';
        }
        
        if($geocode != '')
        {
            $output = json_decode($geocode);

             if(isset($output->results[0]->address_components))
             {

                foreach($output->results[0]->address_components as $addAttr){
                    if($addAttr->types[0] == 'locality'){
                        if(!empty($addAttr->long_name) && isset($addAttr->long_name)) {
                           $route = $addAttr->long_name.' ';
                         }
                    }
                    if($addAttr->types[0] == 'postal_code'){
                        if(!empty($addAttr->long_name) && isset($addAttr->long_name)) {
                           $postal = $addAttr->long_name;
                         }
                    } 
                } 
                $loc = $route." ".$postal;

                /*
                for($j=0;$j<count($output->results[0]->address_components);$j++){
                    $cn=array($output->results[0]->address_components[$j]->types[0]);
                    if(in_array("locality", $cn))
                    {
                     $loc = $output->results[0]->address_components[$j]->long_name;
                    }
                }
                 //area
                 //postal_code
                 //locality
                * 
                */

             }
        }
           
        return trim($loc);
    }
    
    protected function saveImageObj($obj,$id,$lastImage) {
        $qcLoc = \Yii::$app->params['qcLoc'];
        
        $image =  UploadedFile::getInstance($obj,'image['.$obj->type.']');
            if($image)
            {
                $obj->image = $id . '-'.$obj->type.'-'. Yii::$app->security->generateRandomString() . '.' . $image->extension;
                $inputFile = $qcLoc . $obj->image;
                if($image->saveAs($inputFile))
                {
                    date_default_timezone_set('Asia/Calcutta');
                    $imgData = $this->get_image_location($inputFile);

                    //print_r($imgData);

                    $iLocation = '';
                    $bLocation = '';
                    $iLat = $imgData['latitude'];
                    $iLong = $imgData['longitude'];
                    $iTime =  $imgData['datetime'];
                    if($iTime != '')
                    {
                        $datetime = explode(" ", $iTime);
                        $iTime  = str_replace(":","-",$datetime[0])." ".$datetime[1];
                    }
                    $bLat = Yii::$app->session->get('user.lat');
                    $bLong = Yii::$app->session->get('user.long');
                    $sTime = date('Y-m-d H:i:s');

                    if($iLat == '' && $iLong == '' && $bLat == '' && $bLong == '')
                    {
                        //No Image and Browser Geolocation found
                        $locStatus = 2;
                    }
                    else if($iLat == '' && $iLong == '' && $bLat != '' && $bLong != '')
                    {
                        //No Image Geolocation found
                        $locStatus = 3;
                    }
                    else if($iLat != '' && $iLong != '' && $bLat == '' && $bLong == '')
                    {
                        //No Browser Geolocation found
                        $locStatus = 4;
                    }
                    else if($iLat != '' && $iLong != '' && $bLat != '' && $bLong != '')
                    {     
                        $km = $this->distance($iLat, $iLong, $bLat, $bLong, "K");
                        if($km <= 10)
                        {
                          //Correct Data    
                          $locStatus = 0;  
                        }
                        else
                        {
                           //Location mismatch 
                           $locStatus = 1; 
                        }
                    }
                    else {
                        //No Browser Geolocation found
                        $locStatus = 5;
                    }

                    if($iTime == '')
                    {
                        //No Image DateTime found
                        $timeStatus = 2;
                    }
                    else 
                    {
                        $nInterval = strtotime($sTime) - strtotime($iTime);
                        $nInterval = $nInterval/60;
                        if($nInterval <= 60)
                        {
                            //Correct data
                           $timeStatus = 0; 
                        }
                        else
                        {
                            //DateTime Mismatch
                            $timeStatus = 1; 
                        }
                    }
                    if($iLat != '' && $iLong != '')
                    {
                        $iLocation = $this->getLocation($iLat, $iLong);
                    }

                    if($bLat != '' && $bLong != '')
                    {
                        $bLocation = $this->getLocation($bLat, $bLong);
                    }
                    
                    $displayText = '';

                    if($timeStatus == 0)
                    {  
                        $displayText = date("d-m-Y h:i:s A", strtotime($iTime));
                    }
                    
                    if($locStatus == 0)
                    {
                        $location = $iLocation;
                        if($location == '')
                        {
                           $location = $bLocation;
                        }
                        if($location == '')
                        {
                           $location = 'Lat:'.$iLat.' Long:'.$iLong;
                        }
                        $displayText .= '  '.$location;
                    }
                  
                    
                    /* Disable Caption Text - Temporary */
                    //$displayText = '';
                    //$timeStatus = 0;
                    //$locStatus = 0;
                    /* end - code will removed after resolving retrieving date time after client resize */
                    

                    $this->customImage($inputFile,$displayText);

                    if($lastImage != '')
                    {
                        $filename = getcwd().'/'.$qcLoc.$lastImage;
                        if(file_exists($filename )){
                            unlink($filename);
                        }else{
                            //echo 'file not found';

                        }
                    }

                    $obj->iLat = $iLat." ";
                    $obj->iLong = $iLong." ";
                    $obj->bLat = $bLat." ";
                    $obj->bLong = $bLong." ";
                    $obj->iTime = $iTime;
                    $obj->sTime = $sTime;
                    $obj->locStatus = $locStatus;
                    $obj->timeStatus = $timeStatus;
                    $obj->iLocation = $iLocation;
                    $obj->bLocation = $bLocation;
                }
            }
            else
            {
               $obj->image =  $lastImage;
            }
            $obj->save();
    }

    public function actionImageUpload()
    {
        //echo $_POST['id'];
        //die('test');
        $qcLoc = \Yii::$app->params['qcLoc'];
        $id = $_POST['id'];
        $type = $_POST['type'];
        $obj = AxionPreinspectionPhotos::findOne(['preinspection_id' => $id,'type' => $type]);
        $locStatusData = $obj->locStatusValue;
        
        $timeStatusData = $obj->timeStatusValue;
        if($obj->image)
        $lastImage = $obj->image;
        else
        $lastImage = '';

                if(Yii::$app->request->post())
                {
                    $this->saveImageObj($obj,$id,$lastImage);
                }
                $imgUrl = Yii::$app->urlManager->createAbsoluteUrl($qcLoc.$obj->image);
                $json = array(
                            'initialPreview' => [
                                $obj->image ? $imgUrl : null, 
                            ], 
                            'initialPreviewConfig' => [
                                    [
                                        'caption' => $obj->locStatus ? $locStatusData[$obj->locStatus]." <br>".$timeStatusData[$obj->timeStatus]: '', 
                                        'size' => '',
                                        'url'=> Url::to(['/axion-preinspection/remove-photo']),
                                        'key'=> $obj->id,
                                    ],

                                ],
                           
                        );

                return json_encode( $json );
    }
    
    public function actionVideoSession($id)
    {
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        if($role == 'Customer' && Yii::$app->user->identity->companyId != $id)
        {
            $this->goBack();
        }
        
        $premodel = AxionPreinspection::findOne($id);
        
        $apiKey = \Yii::$app->params['tokApiKey'];
        $apiSecret = \Yii::$app->params['tokApiSecret'];
        $opentok = new OpenTok($apiKey, $apiSecret);
        $archiveList = $opentok->listArchives();
        $archives = $archiveList->getItems($premodel->ro);
        
       
        
        $apiKey = \Yii::$app->params['tokApiKey'];
        $apiSession = $premodel->ro;
        if(!Yii::$app->session->get('user.token') || Yii::$app->session->get('user.token') == '' )
        {
            $apiToken = '';
        }
        else
        {
            $apiToken = Yii::$app->session->get('user.token');
        }
        
        if (Yii::$app->request->post('join_session')==='join_session') {
           $token = $opentok->generateToken($premodel->ro);
           Yii::$app->session->set('user.token',$token);
           return $this->redirect(array('video-session', 'id' => $id));
        }
        else if (Yii::$app->request->post('end_session')==='end_session') {
           Yii::$app->session->set('user.token','');
           if($premodel->vehicleType == '4-WHEELER')
           return $this->redirect(array('fourwheelerqc', 'id' => $id));
           else
           return $this->redirect(array('commercialqc', 'id' => $id));    
        }
        else {
            return $this->render('video-session', [
                'premodel' => $premodel,
                'apiKey' => $apiKey,
                'apiSession' => $apiSession,
                'apiToken' => $apiToken,
                'archives' => $archives,
                'role' => $role,
            ]);
        }
    }

    public function actionFourwheelerqc($id)
    {
      /*  $image = 'qcphotos/22-chassis.jpg';
        $exif = exif_read_data($image, 0, true);
        print_r($exif);
        die('test');*/
        
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;

        if($role == 'Customer' && Yii::$app->user->identity->companyId != $id)
        {
            return $this->goBack();
        }
        
        $premodel = AxionPreinspection::findOne($id);

        $completedSurveyDateTime = $premodel->completedSurveyDateTime;
        $customerAppointDateTime = $premodel->customerAppointDateTime;
          
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        if(count($phmodel) == 0)
        {
            $this->updateQc($premodel, 'insert');
            $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        }
        $model = AxionPreinspectionFourwheeler::findOne(['preinspection_id' => $id]);
        
        $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();
        //Master Caller Data 
         $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
         if($callerModel)
         $callerModel = false; 
             
        $qcLoc = \Yii::$app->params['qcLoc'];
        
        $company = PreinspectionClientCompany::find()
                    ->where(['id' => $premodel->insurerName])
                    ->all();

        $caller = User::find()
                ->where(['id' => $premodel->callerName])
                ->all();
        
       $customerSession = User::find()
        ->where(['mobile' => $premodel->insuredMobile])
        ->count();
       
        
       if (Yii::$app->request->post('create_session')==='create_session') {
           $this->createCustomerSession($premodel->id);
           return $this->redirect(array('fourwheelerqc', 'id' => $id));
        } 
        else if ($premodel->load(Yii::$app->request->post()) && $model->load(Yii::$app->request->post())) {   
          
            //$premodel->completedSurveyDateTime = $completedSurveyDateTime;
            $premodel->customerAppointDateTime = $customerAppointDateTime;
            //Updating Preinspection details
            $premodel->save();
            
            //Updating QC details
            $model->save();
            
            foreach($phmodel as $obj)
            {
                if($obj->image)
                $lastImage = $obj->image;
                else
                $lastImage = '';
                
                if($obj->load(Yii::$app->request->post()))
                {
                   $this->saveImageObj($obj, $id, $lastImage); 
                }
            }
            
            return $this->redirect(array('fourwheelerqc', 'id' => $id));
            
        } else {
            return $this->render('fourwheelerqc', [
                'premodel' => $premodel,
                'model' => $model,
                'phmodel' => $phmodel,
                'valuator' => $valuator,
                'callerModel' => $callerModel,
                'qcLoc' => $qcLoc,
                'role' => $role,
                'company' => $company,
                'caller' => $caller,
                'customerSession' => $customerSession,
            ]);
        }
    }
    
    public function actionFourwheelerpdf($id) {
        
        $premodel = AxionPreinspection::findOne($id); 
        $model = AxionPreinspectionFourwheeler::findOne(['preinspection_id' => $id]);
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        
        
        $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();
        
        //getting suryeyor details
        $valuatorModel = User::findOne($premodel->surveyorName);        
        if($valuatorModel)
        $surveyor_name =  $valuatorModel->firstName;
        else
        $surveyor_name = '';  
        
        //Master Caller Data 
         $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
         if($callerModel)
         $callerModel = false; 
        
        $qcLoc = \Yii::$app->params['qcLoc'];
        $clientName = \Yii::$app->params['clientName'];
        
        $pdf = new Pdf([
        'mode' => Pdf::MODE_CORE, // leaner size using standard fonts
        'filename' => $premodel->referenceNo,
        'content' => $this->renderPartial('fourwheelerqcpdf',[
                'premodel' => $premodel,
                'model' => $model,
                'phmodel' => $phmodel,
                'valuator' => $valuator,
                'callerModel' => $callerModel,
                'qcLoc' => $qcLoc,
                'surveyor_name' => $surveyor_name, 
            ]),
        'marginLeft' => 5,
        'marginRight' => 5,
        'options' => [
            'title' => $clientName,
            'subject' => 'Inspection Report'
        ],
        'methods' => [
            'SetHeader' => [$clientName.'||Inspection Report'],
            'SetFooter' => ['|Page {PAGENO}|'],
        ]
    ]);
    $pdf->cssInline = '.tftable {font-size:10px;;width:100%;border-width: 1px;border-collapse: collapse;}
    .tftable th {font-size:10px;border-width: 1px;padding: 8px;border-style: solid;text-align:left;}
    .tftable td {font-size:10px;border-width: 1px;padding: 4px;border-style: solid; font-weight:bold;}
    .topbox{height:80px;background-color:#337ab7;font-weight:bold}
    .topbox table{color:#fff;}
    .box1{ border:1mm solid  #666666;
            border-radius: 3mm / 3mm;
            background-clip: border-box;
            padding: 1em;}
    .declarationbox{font-size:9px;}        
    .midtitle{text-align:center;margin-top: 5px;font-weight:bold}
    .spacebox{height:15px;}
    .imgdiv{float:left;width:50%;height:300px;}
    .img{margin:10px;height:280px;}';
    return $pdf->render();
}



    public function actionCommercialqc($id)
    {
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        if($role == 'Customer' && Yii::$app->user->identity->companyId != $id)
        {
            $this->goBack();
        }
        
        $premodel = AxionPreinspection::findOne($id);

        $completedSurveyDateTime = $premodel->completedSurveyDateTime;
        $customerAppointDateTime = $premodel->customerAppointDateTime;
        
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        if(count($phmodel) == 0)
        {
            $this->updateQc($premodel, 'insert');
            $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        }
        $model = AxionPreinspectionCommercial::findOne(['preinspection_id' => $id]);
        

        
        $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();
        //Master Caller Data 
         $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
         if($callerModel)
         $callerModel = false; 
         
        $company = PreinspectionClientCompany::find()
                    ->where(['id' => $premodel->insurerName])
                    ->all();

        $caller = User::find()
                ->where(['id' => $premodel->callerName])
                ->all();
             
        $qcLoc = \Yii::$app->params['qcLoc'];
        
        $customerSession = User::find()
        ->where(['mobile' => $premodel->insuredMobile])
        ->count();
         
         if (Yii::$app->request->post('create_session')==='create_session') {
           $this->createCustomerSession($premodel->id);
           return $this->redirect(array('commercialqc', 'id' => $id));
        } 
        else if($premodel->load(Yii::$app->request->post()) && $model->load(Yii::$app->request->post())) {
            
            //$premodel->completedSurveyDateTime = $completedSurveyDateTime;
            $premodel->customerAppointDateTime = $customerAppointDateTime;
            //Updating Preinspection details
            $premodel->save();
            
            //Updating QC details
            $model->save();
            
            foreach($phmodel as $obj)
            {
                if($obj->image)
                $lastImage = $obj->image;
                else
                $lastImage = '';
                
                if($obj->load(Yii::$app->request->post()))
                {
                   $this->saveImageObj($obj, $id, $lastImage); 
                }
            }

            return $this->redirect(array('commercialqc', 'id' => $id));
            
        } else {
            return $this->render('commercialqc', [
                'premodel' => $premodel,
                'model' => $model,
                'phmodel' => $phmodel,
                'valuator' => $valuator,
                'callerModel' => $callerModel,
                'qcLoc' => $qcLoc,
                'role' => $role,
                'company' => $company,
                'caller' => $caller,
                'customerSession' => $customerSession,
            ]);
        }
    }

    
    public function actionCommercialpdf($id) {
        
            $premodel = AxionPreinspection::findOne($id); 
            $model = AxionPreinspectionCommercial::findOne(['preinspection_id' => $id]);
            $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);

            $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();

            //getting suryeyor details
            $valuatorModel = User::findOne($premodel->surveyorName);
            if($valuatorModel)
            $surveyor_name =  $valuatorModel->firstName;
            else
            $surveyor_name = '';    

            //Master Caller Data 
             $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
             if($callerModel)
             $callerModel = false; 

            $qcLoc = \Yii::$app->params['qcLoc'];
            $clientName = \Yii::$app->params['clientName'];

            $pdf = new Pdf([
            'mode' => Pdf::MODE_CORE, // leaner size using standard fonts
            'filename' => $premodel->referenceNo,
            'content' => $this->renderPartial('commercialqcpdf',[
                    'premodel' => $premodel,
                    'model' => $model,
                    'phmodel' => $phmodel,
                    'valuator' => $valuator,
                    'callerModel' => $callerModel,
                    'qcLoc' => $qcLoc,
                    'surveyor_name' => $surveyor_name, 
                ]),
            'marginLeft' => 5,
            'marginRight' => 5,
            'options' => [
                'title' => $clientName,
                'subject' => 'Inspection Report'
            ],
            'methods' => [
                'SetHeader' => [$clientName.'||Inspection Report'],
                'SetFooter' => ['|Page {PAGENO}|'],
            ]
        ]);
        $pdf->cssInline = '.tftable {font-size:10px;;width:100%;border-width: 1px;border-collapse: collapse;}
    .tftable th {font-size:10px;border-width: 1px;padding: 8px;border-style: solid;text-align:left;}
    .tftable td {font-size:10px;border-width: 1px;padding: 4px;border-style: solid; font-weight:bold;}
    .topbox{height:80px;background-color:#337ab7;font-weight:bold}
    .topbox table{color:#fff;}
    .box1{ border:1mm solid #666666;
            border-radius: 3mm / 3mm;
            background-clip: border-box;
            padding: 1em;}
    .declarationbox{font-size:9px;}        
    .midtitle{text-align:center;margin-top: 5px;font-weight:bold}
    .spacebox{height:15px;}
    .imgdiv{float:left;width:50%;height:300px;}
    .img{margin:10px;height:280px;}';
        return $pdf->render();
    }


    /**
     * Displays a single Preinspection model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
       $model = AxionPreinspection::findOne($id);       
       
		 if (!$model) {
        // Handle the case when model with given id does not exist
		    //$model = Processdata::findOne(1);
		}
       
		 return $this->renderAjax('view', ['model' => $model]);
    }

    public function actionValidation($id)
    {
        if($id == '')
        {
            $model = new AxionPreinspection();
        }
        else {
            $model = $this->findModel($id);  
        }
        
         if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
           Yii::$app->response->format = Response::FORMAT_JSON;
           return ActiveForm::validate($model);
         }
    }
    
    public function actionTownlist($id)
    {
        $countPosts = MasterTown::find()
                ->where(['cityId' => $id])
                ->count();
 
        $posts = MasterTown::find()
                ->where(['cityId' => $id])
                ->orderBy('town ASC')
                ->all();
 
        if($countPosts>0){
            echo "<option value = ''>Select</option>";
            foreach($posts as $post){
                echo "<option value='".$post->id."'>".$post->town."</option>";
            }
        }
        else{
            echo "<option value = ''>Select</option>";
        }
        echo "|&|";
        
        
        $countPosts = User::find()
                            ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                            ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                            ->andFilterWhere(['cityId' => $id])
                            ->count();

        $posts = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->andFilterWhere(['cityId' => $id])
                    ->orderBy('firstName ASC')
                    ->all();
        
 
        if($countPosts>0){
            /*
            if($countPosts ==1)
            {
                 foreach($posts as $post){
                    echo "<option value='".$post->id."'>".$post->firstName."</option>";
                }
                echo "<option value = ''>All</option>";
            }
            else
            {
                echo "<option value = ''>Select</option>";
                foreach($posts as $post){
                    echo "<option value='".$post->id."'>".$post->firstName."</option>";
                }
                echo "<option value = ''>All</option>";
            }
             * 
             */
            echo "<option value = ''>Select</option>";
            echo "<option value = '0'>Customer</option>";
            foreach($posts as $post){
                echo "<option value='".$post->id."'>".$post->firstName."</option>";
            }
            echo "<option value = ''>All</option>";
        }
        else{
            echo "<option value = ''>Select</option>";
            echo "<option value = '0'>Customer</option>";
            echo "<option value = ''>All</option>";
        }
    }
    
    public function actionSurveyorall($id)
    {
        if($id == '')
        {
        
            $countPosts = User::find()
                            ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                            ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                            ->count();

            $posts = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();

            if($countPosts>0){
                    
                    echo "<option value = ''>All</option>";
                    echo "<option value = '0'>Customer</option>";
                    foreach($posts as $post){
                        echo "<option value='".$post->id."'>".$post->firstName."</option>";
                    }
            }
            else{
                echo "<option value = '0'>Customer</option>";
                echo "<option value = ''>All</option>";
            }
        }
        else {
            
            return "noload";
        }
    }
    
    public function actionKmsvalue($id,$cid)
    {
        if($id != '' && $cid != '')
        {
            $countPosts = MasterLocation::find()
                    ->where(['cityId' => $cid])
                    ->andFilterWhere(['townId' => $id])
                    ->count();

            $posts = MasterLocation::find()
                    ->where(['cityId' => $cid])
                    ->andFilterWhere(['townId' => $id])
                    ->all();

            if($countPosts>0){
                foreach($posts as $post){     
                    return $post->extraKms;
                }
            }
            else{
                return "";
            }
        }
        else
        {
            return "";
        }
    }
    
    protected function updateFieldexecutivesTask($processModel,$updateType)
    {
        //inserting record
        if($updateType == 'insert')
        {
            $countPosts = FieldexecutivesTasks::find()
                    ->where(['processId' => $processModel->id])
                    ->count();
            
            if($countPosts > 0)
            {
                FieldexecutivesTasks::deleteAll(['processId' => $processModel->id]);
            }

            $model = new FieldexecutivesTasks();
            $model->processId = $processModel->id;
            $model->processNo = $processModel->referenceNo;
            $model->companyName = $processModel->insurerName;
            $model->location = $processModel->surveyLocation;
            $model->customerAppointmentDateTime = $processModel->customerAppointDateTime;
            $model->fieldexecutiveId = $processModel->surveyorName;
            $model->processType = 'PI';
            $model->requestDateTime = $processModel->intimationDate;
            $model->vehicleNumber = $processModel->registrationNo;
            if($processModel->status == 12)
            {
                $status = 'SCHEDULE';
            }
            else if($processModel->status == 1)
            {
                $status = 'RE-SCHEDULE';
            }
            else if($processModel->status == 8)
            {
                $status = 'COMPLETED';
            }
            else if($processModel->status == 9)
            {
                $status = 'CANCELLED';
            }
            else { $status = '';}
            $model->status = $status;
            $model->save();
             
        }
        
        //deleting record
        if($updateType == 'delete')
        {
             FieldexecutivesTasks::deleteAll(['processId' => $processModel->id]);
        }
        
    }
    
    protected function insertQcImageRecord($preinspectionId,$type)
    {
        $phmodel = new AxionPreinspectionPhotos();
        $phmodel->preinspection_id = $preinspectionId;
        $phmodel->type = $type;
        $phmodel->save();
    }
    
    protected function updateQc($preModel,$updateType)
    {
        if($preModel->vehicleType == '4-WHEELER')
        {
            if($updateType == 'insert')
            {
                $countPosts = AxionPreinspectionFourwheeler::find()
                        ->where(['preinspection_id' => $preModel->id])
                        ->count();

                if($countPosts == 0)
                {
                    $model = new AxionPreinspectionFourwheeler();
                    $model->preinspection_id = $preModel->id;
                    $model->save();
                    
                    $this->insertQcImageRecord($preModel->id, 'chassisThumb');
                    $this->insertQcImageRecord($preModel->id, 'frontViewNumberPlate');
                    $this->insertQcImageRecord($preModel->id, 'rearViewImage');
                    $this->insertQcImageRecord($preModel->id, 'frontBumper');
                    $this->insertQcImageRecord($preModel->id, 'rearBumper');
                    $this->insertQcImageRecord($preModel->id, 'frontLeftCorner45');
                    $this->insertQcImageRecord($preModel->id, 'frontRightCorner45');
                    $this->insertQcImageRecord($preModel->id, 'leftSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'rightSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'leftQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'rightQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'enginePhoto');
                    $this->insertQcImageRecord($preModel->id, 'chassisPlate');
                    $this->insertQcImageRecord($preModel->id, 'dickyOpenImage');
                    $this->insertQcImageRecord($preModel->id, 'underChassis');
                    $this->insertQcImageRecord($preModel->id, 'dashBoardPhoto');
                    $this->insertQcImageRecord($preModel->id, 'odometerReading');
                    $this->insertQcImageRecord($preModel->id, 'cngLpgKit');
                    $this->insertQcImageRecord($preModel->id, 'rcCopy');
                    $this->insertQcImageRecord($preModel->id, 'preInsuranceCopy');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage1');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage2');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage3');
                    
                }

            }
            //deleting record
            if($updateType == 'delete')
            {
                 AxionPreinspectionFourwheeler::deleteAll(['preinspection_id' => $preModel->id]);
                 AxionPreinspectionPhotos::deleteAll(['preinspection_id' => $preModel->id]);
            }
        }
        if($preModel->vehicleType == 'COMMERCIAL')
        {
            if($updateType == 'insert')
            {
                $countPosts = AxionPreinspectionCommercial::find()
                        ->where(['preinspection_id' => $preModel->id])
                        ->count();

                if($countPosts == 0)
                {
                    $model = new AxionPreinspectionCommercial();
                    $model->preinspection_id = $preModel->id;
                    $model->save();
                    
                    $this->insertQcImageRecord($preModel->id, 'chassisThumb');
                    $this->insertQcImageRecord($preModel->id, 'frontViewNumberPlate');
                    $this->insertQcImageRecord($preModel->id, 'rearViewImage');
                    $this->insertQcImageRecord($preModel->id, 'frontBumper');
                    $this->insertQcImageRecord($preModel->id, 'rearBumper');
                    $this->insertQcImageRecord($preModel->id, 'frontLeftCorner45');
                    $this->insertQcImageRecord($preModel->id, 'frontRightCorner45');
                    $this->insertQcImageRecord($preModel->id, 'leftSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'rightSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'leftQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'rightQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'enginePhoto');
                    $this->insertQcImageRecord($preModel->id, 'chassisPlate');
                    $this->insertQcImageRecord($preModel->id, 'dickyOpenImage');
                    $this->insertQcImageRecord($preModel->id, 'underChassis');
                    $this->insertQcImageRecord($preModel->id, 'dashBoardPhoto');
                    $this->insertQcImageRecord($preModel->id, 'odometerReading');
                    $this->insertQcImageRecord($preModel->id, 'cngLpgKit');
                    $this->insertQcImageRecord($preModel->id, 'rcCopy');
                    $this->insertQcImageRecord($preModel->id, 'preInsuranceCopy');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage1');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage2');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage3');
                }

            }
            //deleting record
            if($updateType == 'delete')
            {
                AxionPreinspectionCommercial::deleteAll(['preinspection_id' => $preModel->id]);
                AxionPreinspectionPhotos::deleteAll(['preinspection_id' => $preModel->id]);
            }
        }
        
    }
    
    protected function createDropboxFolder($fileDate,$valuatorName,$vehicleNumber)
    {
        $dropboxImageLoc = \Yii::$app->params['dropboxImageLoc'];
        $fileDate = date('d-m-Y',strtotime($fileDate));
        $path = $dropboxImageLoc.'/PI/'.$fileDate.'/'.$valuatorName.'/'.$vehicleNumber;
        FileHelper::createDirectory($path);
    }
    
    
    protected function createCustomerSession($id)
    {
  
        $model = AxionPreinspection::findOne($id);
        $countPosts = User::find()
        ->andFilterWhere(['mobile' => $model->insuredMobile])
        ->count();

        if($countPosts>0){
            $delUser = User::findOne(['mobile' => $model->insuredMobile]);
            if($delUser)
            {
                $auth = new DbManager;
                $auth->init();
                if($auth->revokeAll($delUser->id))
                {
                    $delUser->delete();
                }
            }
        }

       $cmodel = new User();
       date_default_timezone_set('Asia/Calcutta');
       $currentDateTime = date('Y-m-d H:i:s');
       $cmodel->createdOn = $currentDateTime;
       $cmodel->email = $model->insuredMobile.'@pcs.in';
       $cmodel->password = $model->insuredMobile;
       $cmodel->password_repeat = $model->insuredMobile;
       $cmodel->mobile = $model->insuredMobile;
       $cmodel->firstName = $model->insuredName;
       $cmodel->companyId = $model->id;
       $cmodel->activationLink = 'Y';
       $cmodel->active = 'Y';
       if($cmodel->save())
       {
            $auth = new DbManager;
            $auth->init();
            $role = $auth->getRole('Customer');
            $auth->assign($role, $cmodel->id);
            
            //Creating Video Session
            if($model->ro == '')
            {
                $apiKey = \Yii::$app->params['tokApiKey'];
                $apiSecret = \Yii::$app->params['tokApiSecret'];
                $opentok = new OpenTok($apiKey, $apiSecret);
                $sessionOptions = array(
                                            'archiveMode' => ArchiveMode::ALWAYS,
                                            'mediaMode' => MediaMode::ROUTED
                                        );
                $session = $opentok->createSession($sessionOptions);
                $sessionId = $session->getSessionId();
                $model->ro = $sessionId;
                $model->save();
            }

               if($model->vehicleType == '4-WHEELER')
               {
                    $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/fourwheelerqc?id='.$model->id);
               }
               else
               {
                   $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/commercialqc?id='.$model->id);
               }

                $mobileno = $model->insuredMobile;
                $message = 'Username:'.$model->insuredMobile.'@pcs.in Password:'.$model->insuredMobile.' Quality Check Url - '.$link;
                $this->sendSms($mobileno, $message); 
                
                $customerEmail = $model->contactPersonMobileNo;
                if($customerEmail != '')
                {
                $emailSubject = 'Quality Check URL';
                $emailMessage = 'Username:'.$model->insuredMobile.'@pcs.in Password:'.$model->insuredMobile.' Quality Check Url - '.$link;

                $emailPosts = EmailHistory::find()
                    ->where('email = :val1 AND subject = :val2 AND message = :val3',['val1' =>$customerEmail,'val2' => $emailSubject,'val3' => $emailMessage])
                    ->count();

                    if($emailPosts==0){
                        $emailHistory =  new EmailHistory();
                        $emailHistory->email = $customerEmail;
                        $emailHistory->subject = $emailSubject;
                        $emailHistory->message = $emailMessage;
                        $emailHistory->save();
                    }
                }

       }

                  
    }

    /**
     * Creates a new Preinspection model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $lastStatus = 0;
        $block = 'N';
        $sameId = 'N';
        $callerModel = false;
        
        $model = new AxionPreinspection();

        $city = MasterCity::find()
                   ->all();
        $company = PreinspectionClientCompany::find()
                   ->all();
        $division = ['id' => '', 'divisionName' => 'Select'];
        $branch = ['id' => '', 'branchName' => 'Select'];
        $caller = ['id' => '', 'firstName' => 'Select'];
        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
                    ->where(['id' => Yii::$app->user->identity->companyId])
                    ->all();
            $division = PreinspectionClientDivision::find()
                ->where(['id' => Yii::$app->user->identity->divisionId])
                ->all();
            $branch = PreinspectionClientBranch::find()
                ->where(['id' => Yii::$app->user->identity->branchId])
                ->all();
            $caller = User::find()
                ->where(['id' => Yii::$app->user->identity->id])
                ->all();
        }
        
        $umodel = User::findOne(Yii::$app->user->identity->id);
        
        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {

                date_default_timezone_set('Asia/Calcutta');
  
                $model->created_on = date('Y-m-d H:i:s');
                $model->userId = Yii::$app->user->identity->id;
                $model->referenceNo = $this->getReferenceNo();
                
                if($model->surveyorName)
                {
                    $model->surveyorAppointDateTime = date('Y-m-d H:i:s');
                }

                 if($model->save())
                 {
                    if($model->surveyorName != '' && $model->surveyorName == 0 && $model->insuredMobile != '')
                    {
                        
                        $this->createCustomerSession($model->id);

                    } 
                     
                    //updating qc
                    $this->updateQc($model, 'insert');
                    
                    $currentDateTime = date( 'Y-m-d H:i:s');
                    $obj = $this->findModel($model->id);
                    $hismodel = new AxionPreinspectionHistory();
                    $hismodel->attributes = $obj->attributes;
                    $hismodel->preinspection_id = $obj->id;
                    $hismodel->id = 0;
                    $hismodel->created_on = $currentDateTime;
                    $hismodel->save();
                    return "Updated Successfully";
                 }
             //return $this->redirect(['/']);
        } else {
            return $this->renderAjax('create', [
                'model' => $model,
                'city' => $city,
                'lastStatus' => $lastStatus,
                'block' => $block,
                'sameId' => $sameId,
                'callerModel' => $callerModel,
                'company'=> $company,
                'umodel'=> $umodel,
                'role' => $role,
                'division' => $division,
                'branch' => $branch,
                'caller' => $caller,
            ]);
        }
    }
    
    public function actionCreateRequest()
    {
        /*
        $model = new Preinspection();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['view', 'id' => $model->id]);
        } else {
            return $this->render('create', [
                'model' => $model,
            ]);
        }
         * 
         */
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $lastStatus = 0;
        $block = 'N';
        $sameId = 'N';
        $callerModel = false;
        
        $model = new AxionPreinspection();

        $city = MasterCity::find()
                   ->all();
        $company = PreinspectionClientCompany::find()
                   ->all();
        $division = ['id' => '', 'divisionName' => 'Select'];
        $branch = ['id' => '', 'branchName' => 'Select'];
        $caller = ['id' => '', 'firstName' => 'Select'];
        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
                    ->where(['id' => Yii::$app->user->identity->companyId])
                    ->all();
            $division = PreinspectionClientDivision::find()
                ->where(['id' => Yii::$app->user->identity->divisionId])
                ->all();
            $branch = PreinspectionClientBranch::find()
                ->where(['id' => Yii::$app->user->identity->branchId])
                ->all();
            $caller = User::find()
                ->where(['id' => Yii::$app->user->identity->id])
                ->all();
        }
        
        $umodel = User::findOne(Yii::$app->user->identity->id);
        
        if ($model->load(Yii::$app->request->post())) {

                date_default_timezone_set('Asia/Calcutta');
  
                $model->created_on = date('Y-m-d H:i:s');
                $model->userId = Yii::$app->user->identity->id;
                $model->referenceNo = $this->getReferenceNo();
                
                if($model->surveyorName)
                {
                    $model->surveyorAppointDateTime = date('Y-m-d H:i:s');
                }

                 if($model->save())
                 {
                    if($model->surveyorName != '' && $model->surveyorName == 0 && $model->insuredMobile != '')
                    {

                      $this->createCustomerSession($model->id);

                    }
                     
                     
                    //updating qc
                    $this->updateQc($model, 'insert');
                    
                    $currentDateTime = date( 'Y-m-d H:i:s');
                    $obj = $this->findModel($model->id);
                    $hismodel = new AxionPreinspectionHistory();
                    $hismodel->attributes = $obj->attributes;
                    $hismodel->preinspection_id = $obj->id;
                    $hismodel->id = 0;
                    $hismodel->created_on = $currentDateTime;
                    $hismodel->save();
                    return "noajax success";
                 }
             //return $this->redirect(['/']);
        } else {
            return $this->render('create', [
                'model' => $model,
                'city' => $city,
                'lastStatus' => $lastStatus,
                'block' => $block,
                'sameId' => $sameId,
                'callerModel' => $callerModel,
                'company'=> $company,
                'umodel'=>$umodel,
                'role' => $role,
                'division' => $division,
                'branch' => $branch,
                'caller' => $caller,
            ]);
        }
    }
    
    protected function getReferenceNo()
    {
        if (($model = AxionPreinspection::find()->orderBy(['id' => SORT_DESC])->one()) !== null) {
            return ($model->referenceNo) + 1;
        } else {
            return 1000;
        }
    }

    public function actionFollowup($ro)
    {
      $call = 'ajax';
      $idCheck = '';
      return $output = $this->getFollowupData($call,$idCheck,$ro);
    }
    
    protected function getFollowupData($call,$idCheck,$ro)
    {
        $block = 'N';
        $sameId = 'N';
        $output = '';
        date_default_timezone_set('Asia/Calcutta');
        $ctime = date('Y-m-d H:i:s');
        $followup = AxionPreinspection::find()
                   ->select(['id,referenceNo,followupRemainder,followupUpdatedBy,TIMESTAMPDIFF(MINUTE,:ctime,followupRemainder) AS remarks'])
                   ->where('TIMESTAMPDIFF(MINUTE,:ctime,followupRemainder) <= 10 and Status = 0 and ro = :val',['ctime' =>$ctime,'val'=>$ro])
                   ->orderBy('followupRemainder')
                   ->all();
        foreach($followup As $val)
        {
            $id = $val->id;
            $referenceNo = $val->referenceNo;
            $followupRemainder = date( 'd/m/Y h:i A', strtotime( $val->followupRemainder ));
            $followupUpdatedBy = $val->followupUpdatedBy;
            $timeDifference =$val->remarks; 
            if($timeDifference < 0)
            {
                $block = 'Y';
                $color = 'red';
            }
            else
            {
                $color = 'blue';
            }
            $output .= '<div> <a style="color:'.$color.'" class="activity-update-link" data-pjax="0" data-id="'.$id.'" data-target="#update-modal" data-toggle="modal" title="Update" href="#">'.$referenceNo.'</a> - <strong> '.$followupRemainder.' </strong> Updated By '.$followupUpdatedBy.'</div>';
            
            if($call == 'update' && $id == $idCheck)
            {
                $sameId = 'Y';
            }
        }
        if($call== 'update')
        {
            return $block.'|'.$sameId;
        }
        if($call== 'ajax')
        {
            return $output;
        }
        
    }
    
    protected function hisMessage($id)
    {
        
        $his = AxionPreinspectionHistory::find()
                   ->where(['preinspection_id' => $id])
                   ->orderBy('created_on desc')
                   ->all();
        $msg = '';
        foreach($his As $val)
        {
            if($val->status == 0 && $val->followupReason == 0 )
            {
               $msg .=  '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> CASE RECEIVED </td></tr>';  
            }
            else if($val->status == 0 && $val->followupReason != 0)
            {
               $msg .=  '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> '.$val->followupValue[$val->followupReason].'</td></tr>';
            }
            else if($val->status == 12)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $val->customerAppointDateTime )).'</td></tr>';
            }
            else if($val->status == 1)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> Re-Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $val->customerAppointDateTime )).'</td></tr>';
            }
            else if($val->status == 8)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> Survey Done - DateTime :'.date( 'd/m/Y h:i A', strtotime( $val->completedSurveyDateTime )).'</td></tr>';
            }
            else if($val->status == 101)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Recommended </td></tr>';
            }
            else if($val->status == 102)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Not Recommended </td></tr>';
            }
            else if($val->status == 103)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Inprogress </td></tr>';
            }
            else if($val->status == 104)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Refer to Under Writer </td></tr>';
            }
            else if($val->status == 9)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> CANCELLED - Reason : '.$val->cancelReasonsvalue[$val->cancellationReason].'</td></tr>';
            }
            
        }
        
        return $msg;
        
    }

    /**
     * Updates an existing Preinspection model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {
       
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
	$model = $this->findModel($id);
        $lastStatus = $model->status;
        $lastFollowupReason = $model->followupReason;
        $lastFollowupRemainder = $model->followupRemainder;
        $lastFollowupUpdatedBy = $model->followupUpdatedBy;
        $lastFollowupUpdatedDateTime = $model->followupUpdatedDateTime;
        $lastIntimationDate = $model->intimationDate;
        $lastSurveyorName = $model->surveyorName;
        $lastCustomerAppointDateTime = $model->customerAppointDateTime;
        
        $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();
        $city = MasterCity::find()
                ->all();
        
        $town = MasterTown::find()
                ->where(['cityId' => $model->cityId])
                ->orderBy('town')
                ->all();
        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
                    ->where(['id' => Yii::$app->user->identity->companyId])
                    ->all();
            $division = PreinspectionClientDivision::find()
                ->where(['id' => Yii::$app->user->identity->divisionId])
                ->all();
            $branch = PreinspectionClientBranch::find()
                ->where(['id' => Yii::$app->user->identity->branchId])
                ->all();
            $caller = User::find()
                ->where(['id' => Yii::$app->user->identity->id])
                ->all();
        }
        else {
        $company = PreinspectionClientCompany::find()
                   ->all();
        $division = PreinspectionClientDivision::find()
                ->where(['companyId' => $model->insurerName])
                ->orderBy('divisionName')
                ->all();
        $branch = PreinspectionClientBranch::find()
                ->where(['divisionId' => $model->insurerDivision])
                ->orderBy('branchName')
                ->all();
        $caller = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['or',
                        ['auth_assignment.item_name' => 'Branch Head'],
                        ['auth_assignment.item_name' => 'Branch Executive']])
                    ->andFilterWhere(['companyId' => $model->insurerName])
                    ->andFilterWhere(['divisionId' => $model->insurerDivision])
                    ->andFilterWhere(['branchId' => $model->insurerBranch])
                    ->orderBy('firstName')
                    ->all();
        }
        
        $umodel = User::findOne(Yii::$app->user->identity->id);
        
       if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
                    
                date_default_timezone_set('Asia/Calcutta');
                $currentDateTime = date( 'Y-m-d H:i:s');
                $cusAppDT = \DateTime::createFromFormat('d/m/Y h:i a', $model->customerAppointDateTime );
                if($cusAppDT)
                {
                   $model->customerAppointDateTime = $cusAppDT->format('Y-m-d H:i:s');
                }
                $reschDT = \DateTime::createFromFormat('d/m/Y h:i a', $model->rescheduleDateTime );
                if($reschDT)
                {
                   $model->rescheduleDateTime = $reschDT->format('Y-m-d H:i:s');
                }
                $compDT = \DateTime::createFromFormat('d/m/Y h:i a', $model->completedSurveyDateTime );
                if($compDT)
                {
                   $model->completedSurveyDateTime = $compDT->format('Y-m-d H:i:s');
                }
                if($lastCustomerAppointDateTime != '')
                {
                   $model->customerAppointDateTime = $lastCustomerAppointDateTime;
                }
                if($lastStatus == 12 && $model->status == 1)
                {
                   $model->customerAppointDateTime = $model->rescheduleDateTime; 
                }
                if($lastStatus == 1 && $model->status == 1)
                {
                  $lastRescheduleDateTime = $model->rescheduleDateTime;
                  $lastRescheduleReason = $model->rescheduleReason;
                  $model->rescheduleDateTime =   $model->rescheduleDateTime1;
                  $model->rescheduleReason =   $model->rescheduleReason1;
                  $model->customerAppointDateTime = $model->rescheduleDateTime;  
                }
                
                if($model->surveyorName != 0)
                {
                    $valuatorModel = User::findOne($model->surveyorName);        
                    $surveyor_name =  $valuatorModel->firstName;
                    $surveyor_mobile =  $valuatorModel->mobile;
                }
                if($model->surveyorName == 0)
                {    
                    $surveyor_name =  'Customer - '.$model->insuredName;
                    $surveyor_mobile =  $model->insuredMobile;
                }
                
               if($lastSurveyorName != $model->surveyorName)
               {
                   $model->surveyorAppointDateTime = $currentDateTime;
               }
               else if($model->surveyorName != '')
               {
                    $sadate = \DateTime::createFromFormat('d/m/Y h:i a', $model->surveyorAppointDateTime );
                    if($sadate)
                    {
                       $model->surveyorAppointDateTime = $sadate->format('Y-m-d H:i:s');
                    }
               }

                $model->intimationDate = $lastIntimationDate;
                //$model->userId = Yii::$app->user->identity->id;

                //updating followup updated datetime
                if($lastStatus == 0 && $model->status == 0 && $model->followupReason != 0 && $model->followupRemainder != '' && $model->followupUpdatedBy !='')
                {
                    //checking for followup duplicate
                    if($lastFollowupReason != $model->followupReason || $lastFollowupRemainder != $model->followupRemainder || $lastFollowupUpdatedBy != $model->followupUpdatedBy)
                    {
                        $model->followupUpdatedDateTime = trim(date('Y-m-d H:i:s'));
                    }
                    else
                    {
                        $model->followupUpdatedDateTime = $lastFollowupUpdatedDateTime;
                    }
                }
                else
                {
                    $model->followupUpdatedDateTime = $lastFollowupUpdatedDateTime;
                }
                    
                    if($model->save())
                    {

                        if($model->surveyorName != '' && $model->surveyorName == 0 && $model->insuredMobile != '')
                        {
                                                   
                           $this->createCustomerSession($model->id);
                             
                        }
                         
                        //Master Caller Data 
                        $callerData = PreinspectionClientCaller::findOne(['callerMobileNo' => $model->callerMobileNo]);
                        if($callerData)
                        {
                          $callerEmail = $callerData->callerEmailId;
                        }
                        else
                        {
                          $callerEmail = '';
                        }
                        
                        //Caller Email
                        $callerEmail = $model->callerDetails;
                        
                        //additional sms message
                        $additionalSmsMessage = "";
                        if($model->insurerName == "IFFCO TOKIO GENERAL INSURANCE CO. LTD.")
                        {
                            $additionalSmsMessage = "Please note the Revised contact number of ITGI (8668095573). Kindly contact for all future correspondence.";
                        }
                        else if($model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                        {
                            $additionalSmsMessage = "Please note the Revised contact number of RSA (8668095574). Kindly contact for all future correspondence.";
                        }
                        else if($model->insurerName == "HDFC ERGO GENERAL INSURANCE CO.LTD.")
                        {
                            $additionalSmsMessage = "Please note the Revised contact number of HDFC (8668095572). Kindly contact for all future correspondence.";
                        }
                        else if($model->insurerName == "L&T GENERAL INSURANCE CO. LTD.")
                        {
                            $additionalSmsMessage = "Please note the Revised contact number of L&T (8668095572). Kindly contact for all future correspondence.";
                        }
                        
                        //sending sms
                        if($model->status == 12)
                        {
                            //updating field executuves task
                            //$this->updateFieldexecutivesTask($model, 'insert');
                            
                            if($_POST['sendSms'] == 'Y')
                            {
                                $mobileno = $model->callerMobileNo;
                                $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' SCHEDULE APP - '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).' SURVEYOR NAME:('.$surveyor_name.') '.$additionalSmsMessage;
                                $this->sendSms($mobileno, $message); 
                                
                                //sending sms to surveyor
                                $surveyor_message = $model->referenceNo.' '.$model->insuredName.' '.$model->contactPersonMobileNo.' '.$model->surveyLocation.' '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime ));
                                $this->sendSms($surveyor_mobile, $message);
                            }
                            
                            if($callerEmail != '')
                            {
                                //caller email
                                $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                                $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                                $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).'</td></tr>';
                                $emailMessage .= $this->hisMessage($model->id);
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr></table></div>';
                                
                            }
                            
                            //creating dropbox folder
                            //$this->createDropboxFolder($model->customerAppointDateTime, $surveyor_name, $model->registrationNo);
                        }
                        else if($model->status == 1)
                        {
                            //updating field executuves task
                            //$this->updateFieldexecutivesTask($model, 'insert');
                            
                            
                            if($_POST['sendSms'] == 'Y')
                            {
                                $mobileno = $model->callerMobileNo;
                                $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' RE - SCHEDULE APP - '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).' REASON:'.'('.$model->rescheduleReason.') SURVEYOR NAME:('.$surveyor_name.') '.$additionalSmsMessage;
                                $this->sendSms($mobileno, $message);
                                
                                //sending sms to surveyor
                                if($lastSurveyorName != $model->surveyorName)
                                {
                                    $surveyor_message = $model->referenceNo.' '.$model->insuredName.' '.$model->contactPersonMobileNo.' '.$model->surveyLocation.' '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime ));
                                    $this->sendSms($surveyor_mobile, $message); 
                                }
                            }
                            
                            if($callerEmail != '')
                            {
                                //caller email
                                $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                                $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                                $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> Re-Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).'</td></tr>';
                                $emailMessage .= $this->hisMessage($model->id);
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr></table></div>';
                            }
                            
                            
                            //creating dropbox folder
                            //$this->createDropboxFolder($model->customerAppointDateTime, $surveyor_name, $model->registrationNo);
                        }
                        else if($model->status == 8)
                        {
                            //updating qc
                            $this->updateQc($model, 'insert');
                            
                            //updating field executuves task
                            //$this->updateFieldexecutivesTask($model, 'delete');
                            
                            $mobileno = $model->callerMobileNo;
                            $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' COMPLETED '.date( 'd/m/Y h:i A', strtotime( $model->completedSurveyDateTime )).' KINDLY DOWNLOAD FROM AXION SITE '.$additionalSmsMessage;
                            if($_POST['sendSms'] == 'Y')
                            {
                                $this->sendSms($mobileno, $message);
                            }
                           
                           if($callerEmail != '')
                            { 
                                //caller email
                                $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                                $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                                $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> COMPLETED - DateTime :'.date( 'd/m/Y h:i A', strtotime( $model->completedSurveyDateTime )).'</td></tr>';
                                $emailMessage .= $this->hisMessage($model->id);
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr></table></div>';
                            }
                        }
                        if($model->status == 9)
                        {
                            //updating qc
                            $this->updateQc($model, 'delete');  
                            
                            //updating field executuves task
                            //$this->updateFieldexecutivesTask($model, 'delete');
                            
                            $cancelledReason = $model->cancelReasonsvalue[$model->cancellationReason]; 
                            $mobileno = $model->callerMobileNo;
                            $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' CANCELLED REASON:('.$cancelledReason.') '.$additionalSmsMessage;
                            if($_POST['sendSms'] == 'Y')
                            {
                                $this->sendSms($mobileno, $message);
                            }
                            
                            if($callerEmail != '')
                            {
                                //caller email
                                $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                                $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                                $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> CANCELLED - Reason :'.$cancelledReason.'</td></tr>';
                                $emailMessage .= $this->hisMessage($model->id);
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';
                                $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr></table></div>';
                            }
                        }
                        //insert email data to email table for sending
                        if($model->status == 12 || $model->status == 1 || $model->status == 8 || $model->status == 9)
                        {
                            if($callerEmail != '')
                            {                                
                                $emailPosts = EmailHistory::find()
                                ->where('email = :val1 AND subject = :val2 AND message = :val3',['val1' =>$callerEmail,'val2' => $emailSubject,'val3' => $emailMessage])
                                ->count();
 
                                if($emailPosts==0){
                                    $emailHistory =  new EmailHistory();
                                    $emailHistory->email = $callerEmail;
                                    $emailHistory->subject = $emailSubject;
                                    $emailHistory->message = $emailMessage;
                                    $emailHistory->save();
                                }  
                            }
                        }
                        
                      
                        
                        //sending followup sms
                        if($lastStatus == 0 && $model->status == 0 && $model->followupReason != 0 && $model->followupRemainder != '' && $model->followupUpdatedBy !='')
                        {
                            //checking for followup duplicate
                            if($lastFollowupReason != $model->followupReason || $lastFollowupRemainder != $model->followupRemainder || $lastFollowupUpdatedBy != $model->followupUpdatedBy)
                            {
                                    //sending sms to customer
                                    if($model->followupReason == 1 || $model->followupReason == 2 || $model->followupReason == 3 || $model->followupReason == 4)
                                    {
                                        //customer
                                        $mobileno = $model->contactPersonMobileNo;
                                        if($mobileno != '')
                                        {
                                            $message = 'Vehicle No:'.$model->registrationNo.'We are not able to contact you for your vehicle Inspection. Kindly Contact to us on Mobile No.8668095573';
                                            $this->sendSms($mobileno, $message);
                                        }
                                        
                                        //insured mobile no
                                        $insuredMobileno = $model->insuredMobile;
                                        if($insuredMobileno != '')
                                        {
                                            $this->sendSms($insuredMobileno, $message);
                                        }
                                    }
                                                                        
                                    //sending sms to caller
                                    $mobileno = $model->callerMobileNo;
                                    $message = 'Vehicle No:'.$model->registrationNo.' '.$model->followupValue[$model->followupReason].' '.$additionalSmsMessage;
                                    $this->sendSms($mobileno, $message);
                                    
                                    //sending email when followup is updated
                                    if($callerEmail != '')
                                    {
                                        $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                                        $emailMessage = '<strong>Dear Sir/Madam,<br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                                        $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;">'.$model->followupValue[$model->followupReason].'</td></tr>';
                                        $emailMessage .= $this->hisMessage($model->id);
                                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';
                                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr></table></div>';
                                    
                                        $emailPosts = EmailHistory::find()
                                            ->where('email = :val1 AND subject = :val2 AND message = :val3',['val1' =>$callerEmail,'val2' => $emailSubject,'val3' => $emailMessage])
                                            ->count();

                                            if($emailPosts==0){
                                                $emailHistory =  new EmailHistory();
                                                $emailHistory->email = $callerEmail;
                                                $emailHistory->subject = $emailSubject;
                                                $emailHistory->message = $emailMessage;
                                                $emailHistory->save();
                                            }
                                        
                                    }
                            }    
                        }
                                 
                        $currentDateTime = date( 'Y-m-d H:i:s');
                        $obj = $this->findModel($model->id);
                        $hismodel = new AxionPreinspectionHistory();
                        $hismodel->attributes = $obj->attributes;
                        $hismodel->preinspection_id = $obj->id;
                        $hismodel->userId = Yii::$app->user->identity->id;
                        $hismodel->id = 0;
                        $hismodel->created_on = $currentDateTime;
                        $hismodel->save();
                        
                        if(!isset($output) || $output == '')
                        {
                            return "Updated Successfully";
                        }
                    }
                    else
                    {
                        return "DB Updated Error";
                    }

        } else {
            if($model->status == 0 || $model->status == 12 || $model->status == 1 )
            {
               $model->status = '';
            }
            $model->rescheduleDateTime1 = '';
            $model->rescheduleReason1 = '';
            $ro = $model->ro; 
            $followupCheck = $this->getFollowupData('update', $id, $ro);
            $followupCheck = explode('|', $followupCheck);
            $block = $followupCheck[0];
            $sameId = $followupCheck[1];
            //Master Caller Data 
            $callerData = PreinspectionClientCaller::findOne(['callerMobileNo' => $model->callerMobileNo]);
            if($callerData)
            {
              $callerModel = $callerData;
            }
            else
            {
              $callerModel = false;
            }
            return $this->renderAjax('update', [
                'model' => $model,
                'valuator' => $valuator,
                'lastStatus' => $lastStatus,
                'block' => $block,
                'sameId' => $sameId,
                'city' => $city,
                'town' => $town,
                'callerModel' => $callerModel,
                'company' => $company,
                'division' => $division,
                'branch' => $branch,
                'caller' => $caller,
                'umodel' => $umodel,
                'role' => $role,
            ]);
        }
    }
    

    protected function sendSms($mobileno,$message) {
        
          $sendSmsUpdate = \Yii::$app->params['sendSmsUpdate'];
          $username = \Yii::$app->params['sendSmsUser'];
          $password = \Yii::$app->params['sendSmsPwd'];
          $sendername = \Yii::$app->params['sendSmsSender'];
          
          $mobileno = '91'.$mobileno;
          $message = urlencode($message);
            
           if($sendSmsUpdate == 'Y')
           {
            //$url = "http://bulksms.mysmsmantra.com/WebSMS/SMSAPI.jsp?username=$username&password=$password&sendername=$sendername&mobileno=$mobileno&message=$message";
            $url = "http://bulksms.mysmsmantra.com:8080/WebSMS/SMSAPI.jsp?username=$username&password=$password&sendername=$sendername&mobileno=$mobileno&message=$message";

            $useragent = 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.3 Safari/533.2';

            $ch = curl_init($url);
            //curl_setopt($ch, CURLOPT_COOKIEJAR, 'C:\wamp\www\processcontrol\tmp\cookies.txt');
            //curl_setopt($ch, CURLOPT_COOKIEFILE, 'C:\wamp\www\processcontrol\tmp\cookies.txt');
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // required as godaddy fails
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // required as godaddy fails
            curl_setopt($ch, CURLOPT_USERAGENT, $useragent);

            $html = curl_exec($ch);
            
            //print $html;
            
            if(!$html){
                echo "cURL error number:" .curl_errno($ch);
                echo "cURL error:" . curl_error($ch);
            }
            
            curl_close($ch);
           }  
    }

    /**
     * Deletes an existing Preinspection model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
		/*
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
		*/
		$id = Yii::$app->request->post('id'); // Array or selected records primary keys

        // Preventing extra unnecessary query
        if (!$id) {
            return;
        }

          AxionPreinspection::findOne($id)->delete();

        return;
    }

    public function actionDeleteMultiple()
    {
        $id = Yii::$app->request->post('id'); // Array or selected records primary keys

        // Preventing extra unnecessary query
        if (!$id) {
            return;
        }
        
        foreach ($id as $key => $value) 
        {
          AxionPreinspection::findOne($value)->delete();
        }
        return;
    }
    
    public function actionRemovePhoto()
    {
        $id = Yii::$app->request->post('key'); // Array or selected records primary keys

        // Preventing extra unnecessary query
        if (!$id) {
            return;
        }
       
        $qcLoc = \Yii::$app->params['qcLoc'];

            $model = AxionPreinspectionPhotos::findOne($id);
            $filename = getcwd().'/'.$qcLoc.$model->image;
            if(unlink($filename))
            {
                $model->image = '';
                $model->iLat = '';
                $model->iLong = '';
                $model->bLat = '';
                $model->bLong = '';
                $model->iTime = '';
                $model->sTime = '';
                $model->iLocation = '';
                $model->bLocation = '';
                $model->locStatus = '';
                $model->timeStatus = '';
                $model->save();
                return 1;
            }
            else
            {
                return 0;
            }
        
         
    }
    
    public function actionAssignLocation()
    {
        $lat = Yii::$app->request->post('lat'); // Array or selected records primary keys
        $long = Yii::$app->request->post('long');

        // Preventing extra unnecessary query
        if (!$lat || !$long) {
            return;
        } 
         Yii::$app->session->set('user.lat',$lat);
         Yii::$app->session->set('user.long',$long);
         return 0;
    }
    
    
    public function actionDownloadphotos($id)
    {
        $model = AxionPreinspection::findOne($id);
        $referenceNo = $model->referenceNo;
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        $qcLoc = \Yii::$app->params['qcLoc'];
        
        $zip = new \ZipArchive();

        $tmp_file = getcwd().'/uploads/'.$referenceNo.'-images.zip';

        if(file_exists($tmp_file)){
            $zip->open($tmp_file, \ZipArchive::OVERWRITE);
        }
        else{
            $zip->open($tmp_file, \ZipArchive::CREATE);
        }

        if(count($phmodel) > 0)
        {
             foreach($phmodel as $obj)
             {
                if($obj->image != '')
                {
                    $file = getcwd().'/'.$qcLoc.$obj->image;
                    $download_file = file_get_contents($file);
                    $zip->addFromString(basename($file), $download_file);
                }
             }
             $zip->close();
             
                $path = getcwd().'/uploads/'.$referenceNo.'-images.zip';
                if(file_exists($path)){
                \Yii::$app->response->sendFile($path)->send();
                unlink($path);
                }
                else
                {
                    return $this->redirect(Yii::$app->request->referrer);
                }
        }
        else
        {
            return $this->redirect(Yii::$app->request->referrer);
        }
    }
    

    /**
     * Finds the Preinspection model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Preinspection the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AxionPreinspection::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function actionVehicleCheck($regno)
    {
            $today = date("Y-m-d");
            $prefirstday = date('Y-m-01');
            $countPosts = AxionPreinspection::find()
                ->where(['registrationNo' => $regno])
                ->andwhere(['between', 'intimationDate',$prefirstday,$today])
                ->count();
            if($countPosts>0){
           echo "1";
        }
        else{
           echo "0";
        }
        
    }

}
