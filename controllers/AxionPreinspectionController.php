<?php

namespace app\controllers;
use Yii;
use app\models\AxionPreinspection;
use app\models\AxionPreinspectionSearch;
use app\models\User;
use app\models\MasterCity;
use app\models\MasterState;
use app\models\MasterTown;
use app\models\MasterLocation;
use app\models\MasterFieldexecutives;
use app\models\FieldexecutivesTasks;
use app\models\AxionPreinspectionHistory;
use app\models\PreinspectionClientCaller;
use app\models\EmailHistory;
use app\models\AxionPreinspectionVehicle;
use app\models\AxionPreinspectionCommercial;
use app\models\AxionPreinspectionCommercialwheeler;
use app\models\AxionPreinspectionFwheeler;
use app\models\AxionPreinspectionTwowheeler;
use app\models\AxionPreinspectionPhotos;
use app\models\PreinspectionClientCompany;
use app\models\PreinspectionClientDivision;
use app\models\PreinspectionClientBranch;
use app\models\AxionPreinspectionBilling;
use yii\web\Controller;
use yii\web\NotFoundHttpException;
use yii\base\ErrorException;
use yii\data\ActiveDataProvider;
use yii\web\Response;
use yii\filters\AccessControl;
use yii\filters\VerbFilter;
use yii\widgets\ActiveForm;
use yii\helpers\Url;
use yii\helpers\ArrayHelper;
use yii\helpers\FileHelper;
use yii\web\UploadedFile;
use kartik\mpdf\Pdf;
use yii\imagine\Image;
use Imagine\Gd;
use Imagine\Image\Box;
use Imagine\Image\BoxInterface;
use yii\rbac\DbManager;
use OpenTok\OpenTok;
use OpenTok\MediaMode;
use OpenTok\ArchiveMode;
use OpenTok\Session;
use OpenTok\Role;
use linslin\yii2\curl;
use app\models\Logs;
use yii\web\HttpException;
use app\helpers\S3Helper;
use app\helpers\SMSHelper;

ini_set('max_execution_time', '0');
ini_set('memory_limit', '-1');
/**
 * PreinspectionController implements the CRUD actions for Preinspection model.
 */
class AxionPreinspectionController extends Controller
{
    public function behaviors()
    {
        return [
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['post'],
                ],
            ],
        ];
    }

    /**
     * Lists all Preinspection models.
     * @return mixed
     */
    public function actionIndex()
    {

        /*
        $searchModel = new PreinspectionSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
         * 
         */ 
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;


        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();

               // your default model and dataProvider generated by gii
        $searchModel = new AxionPreinspectionSearch();
        $searchModel->status = [0,12,1,101,102,104,9];

        $dataProvider = $searchModel->search(Yii::$app->request->queryParams,'index');


        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
        }
        else
        {
            $company = PreinspectionClientCompany::find()
            ->all();
        }

        $branch = '';

        $params = Yii::$app->request->getQueryParams();

        if(isset($params['AxionPreinspectionSearch']['insurerBranch']))
        {

            $branch = PreinspectionClientBranch::find()
            ->where(['companyId' => $params['AxionPreinspectionSearch']['insurerName']])
            ->all();  

        }

               // non-ajax - render the grid by default
        return $this->render('index', [
           'dataProvider' => $dataProvider,
           'searchModel' => $searchModel,
           'valuator' => $valuator,
           'role' => $role,
           'company' => $company,
           'branch' => $branch,
       ]);
    }
    
    public function actionChangerolist($id)
    {
    	$role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        // $model = $this->findModel($id);
        $smodel=new MasterState();

        $state=MasterState::find()->all();
        


        if(Yii::$app->request->isAjax && $smodel->load(Yii::$app->request->post()))
        {

        	$stateId=$smodel->state;
        	$state_name=MasterState::findOne($stateId);
        	$name=$state_name->state;

            $query = User::find();
            $userlist = $query->select('id')->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
            ->andFilterWhere(['auth_assignment.item_name' => 'BO User'])->andFilterWhere(['stateId' => $stateId])->one();

            //echo $query->createCommand()->sql;
            $oldUserId='';
            if($userlist)
            {

                $preinspect_model = $this->findModel($id);

                $oldUserId = $preinspect_model->userId;
                    // $preinspect_model=AxionPreinspection::find()->where(['id'=>$id])->one();
                //$history_model = AxionPreinspectionHistory::find()->where(['preinspection_id'=>$id])->one();

                $preinspect_model->userId=$userlist->id;
                $preinspect_model->updatedBy = Yii::$app->user->identity->id;
                $preinspect_model->stateId = $stateId;
                if(!$preinspect_model->inspectionType){
                    $preinspect_model->inspectionType = 'Break In';
                }
                if($preinspect_model->save()) {
                    date_default_timezone_set('Asia/Kolkata');
                    $currentDateTime = date('Y-m-d H:i:s');
                    $hismodel = new AxionPreinspectionHistory();
                    $hismodel->attributes = $preinspect_model->attributes;
                    $hismodel->id = 0;
                    $hismodel->preinspection_id = $preinspect_model->id;
                    $hismodel->created_on = $currentDateTime;
                    $hismodel->userId=$userlist->id;
                    $hismodel->updatedBy = Yii::$app->user->identity->id;
                    if (!$hismodel->save()) {
                        $this->log($preinspect_model->contactPersonMobileNo, json_encode($hismodel->getErrors()));
                    }

                    
                }
                else {
                    return json_encode($preinspect_model->getErrors());exit;
                            // return json_encode(['status'=>'success','msg'=>'RO List Moved To the'.$name]);
                }
                    // return json_encode(['status'=>'success','msg'=>'RO List Moved To the'.$name]);
                return json_encode(['status'=>'success','msg'=>'This case was assigned to '.$name.' RO']);

            }
            else {
                return json_encode(['status'=>'fail','msg'=>'This case is not assigned to '.$name.' RO. Check RO List']) ;
            }
        }
        else {
            return $this->renderAjax('changerolist',[
            'role'=>$role,
            'smodel'=>$smodel,
            'state'=>$state,]);
        }
    	//$query = AxionPreinspectionHistory::find()->where(['preinspection_id' => $id]);

    }

    public function actionCancelCase($id) {

        $premodel = $this->findModel($id);
        
        if(Yii::$app->request->isAjax && $premodel->load(Yii::$app->request->post())) {
            if (empty($premodel->cancelledOn) && ($premodel->status == 9)){
                date_default_timezone_set('Asia/Kolkata');
                $currentDateTime = date('Y-m-d H:i:s');
                $premodel->cancelledOn = $currentDateTime;
            }
            if ($premodel->save()) {

                $insuredUser = User::findOne(['mobile' => @$premodel->insuredMobile]);
                //updating qc
                $this->updateQc($premodel, 'delete');  

                //updating field executuves task
                $this->updateFieldexecutivesTask($premodel, 'delete');

                $cancelledReason = $premodel->cancelReasonsvalue[$premodel->cancellationReason]; 
                $mobileno = $premodel->callerMobileNo;
                $message = 'STATUS- '.$premodel->registrationNo.'/'.$premodel->referenceNo.' CANCELLED REASON:('.$cancelledReason.') '.$additionalSmsMessage.' By Axion Team';

                // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                // {
                //     $message = 'RSA VIR Status-Vehicle NO '.$model->registrationNo.' Ref No '.$model->contactPersonMobileNo.'has been Cancelled. Reason:  '.$cancelledReason .' By Axion';
                    
                //     //sending sms to agent
                //     $smsStatus = $this->sendSms($mobileno, $message);

                //     //sending sms to customer
                //     $smsStatus = $this->sendSms(@$model->insuredMobile, $message);
                // }
                // else
                // {
                // }
                //sending sms to agent
                $smsStatus = $this->sendSms($mobileno, $message);
                

                if($premodel->callerDetails != '')
                {
                    $emailSubject = 'VEHICLE NO: '.$premodel->registrationNo.'/'.$premodel->referenceNo.' - STATUS';
                    $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                    $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> CANCELLED - Reason :'.$cancelledReason.'</td></tr>';
                    $emailMessage .= $this->hisMessage($premodel->id);
                    /*$emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$premodel->extraKM.'</td></tr>';*/
                    $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr>';
                    $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Remarks </td><td style="padding:15px;border:1px solid #000;">'.$premodel->remarks.'</td></tr></table></div>';
                    $emailMessage .= '<br><h2 style ="border-top: 1px solid #f1f1f1; border-bottom: 1px solid #f1f1f1; color: #ff110f; text-align: center; padding: 5px auto">Auto Generated Email. Please Do not Reply.</h2>';
                    $emailMessage .= '<br><p>Thanks & Regards,</p>';
                    $emailMessage .= '<h4>Axion Technical Services</h4>';
                    $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$emailMessage]);
                    if($smailer)
                    {
                        $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                        ->setTo($premodel->callerDetails) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                        ->setSubject($emailSubject);
                        $smailer->send();

                        // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                        // {
                        //     $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                        //     ->setTo(@$insuredUser->email) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                        //     ->setSubject($emailSubject);
                        //     $smailer->send();
                        // }
                    }
                }
                
                date_default_timezone_set('Asia/Kolkata');
                $currentDateTime = date('Y-m-d H:i:s');
                $obj = $this->findModel($premodel->id);
                $hismodel = new AxionPreinspectionHistory();
                $hismodel->attributes = $obj->attributes;
                $hismodel->preinspection_id = $obj->id;
                $hismodel->id = 0;

                $smsSendStatusresult = $smsSendStatusresultobj = $messageId = $smsText = $smsSendStatus = '';
                $messageIds = [];
                if (!empty($smsStatus))
                {
                    $smsStatusObj = json_decode($smsStatus);
                    if (!empty($smsStatusObj->Data))
                    {
                        foreach ($smsStatusObj->Data as $smsStatusObjValue)
                        {
                            $messageId = @$smsStatusObjValue->MessageId;
                            $checkSmsSendStatus = SMSHelper::checkSmsSendStatus($messageId);

                            $smsSendStatusresult = @$checkSmsSendStatus['data'];
                            
                            if (!empty($smsSendStatusresult))
                            {
                                $smsSendStatusresultobj = json_decode($smsSendStatusresult);
                                $smsText .= @$smsSendStatusresultobj->Data->Message;
                                $messageIds[] = @$smsSendStatusresultobj->Data->MessageId;
                                $smsSendStatus = @$smsSendStatusresultobj->Data->Status;
                            }
                        }
                    }    
                    $hismodel->messageId = json_encode(@$messageIds);
                    $hismodel->smsType = @$smsType;
                    $hismodel->smsText = @$smsText;//$smsSendStatusresult;//@$smsSendStatusresultobj->Data->Message;
                    $hismodel->smsSendStatus = strtoupper(@$smsSendStatus);//strtoupper(@$smsSendStatusresultobj->Data->Status);
                }
                
                $hismodel->created_on = $currentDateTime;
                if (!$hismodel->save()) {
                    $this->log($premodel->contactPersonMobileNo, json_encode($hismodel->getErrors()));
                }

                Yii::$app->session->setFlash('Success','Case cancelled successfully..!');
                return json_encode(['status'=>'success', 'msg'=>'Case cancelled']);
            }
            else
            {
                $errors = $premodel->getErrors();
                Yii::$app->session->setFlash('Failure', json_encode($errors));
                return json_encode(['status'=>'failure', 'msg'=> json_encode($errors)]);
            }
        }
        else {
            return $this->renderAjax('cancelcase', ['premodel' => $premodel]);
        }
    }

    public function actionCompleted()
    {
        /*
        $searchModel = new PreinspectionSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);

        return $this->render('index', [
            'searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
        ]);
         * 
         */
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();

               // your default model and dataProvider generated by gii
        $searchModel = new AxionPreinspectionSearch();
        $searchModel->status = [8]; 
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams,'completed');

        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
        }
        else
        {
            $company = PreinspectionClientCompany::find()
            ->all();
        }

        $branch = '';

        $params = Yii::$app->request->getQueryParams();

        if(isset($params['AxionPreinspectionSearch']['insurerBranch']))
        {

            $branch = PreinspectionClientBranch::find()
            ->where(['companyId' => $params['AxionPreinspectionSearch']['insurerName']])
            ->all();  

        }

               // non-ajax - render the grid by default
        return $this->render('completed', [
           'dataProvider' => $dataProvider,
           'searchModel' => $searchModel,
           'valuator'=>$valuator,
           'role' => $role,
           'company' => $company,
           'branch' => $branch,
       ]);
    }

    public function actionCompletedCase()
    {

        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();

               // your default model and dataProvider generated by gii
        $searchModel = new AxionPreinspectionSearch();
        $searchModel->status = [9,101,102,104,103]; 
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams,'completed-case');

        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
        }
        else
        {
            $company = PreinspectionClientCompany::find()
            ->all();
        }

        $branch = '';

        $params = Yii::$app->request->getQueryParams();

        if(isset($params['AxionPreinspectionSearch']['insurerBranch']))
        {

            $branch = PreinspectionClientBranch::find()
            ->where(['companyId' => $params['AxionPreinspectionSearch']['insurerName']])
            ->all();  

        }

               // non-ajax - render the grid by default
        return $this->render('completedcase', [
           'dataProvider' => $dataProvider,
           'searchModel' => $searchModel,
           'valuator'=>$valuator,
           'role' => $role,
           'company' => $company,
           'branch' => $branch,
       ]);



    }
    
    public function actionTransaction($id)
    {
        $historyData = AxionPreinspectionHistory::find()->where(['preinspection_id' => $id])->all();
        $smsText = $smsSendStatus = '';

        foreach ($historyData as $key => $value)
        {
            if (empty($value->smsSendStatus) || $value->smsSendStatus == 'SUBMITTED')
            {
                $messageIds = json_decode($value->messageId);
                if (!empty($messageIds))
                {
                    foreach ($messageIds as $messageId)
                    {
                        $checkSmsSendStatus = SMSHelper::checkSmsSendStatus($messageId);
                        
                        $smsSendStatusresult = @$checkSmsSendStatus['data'];
                        
                        if (!empty($smsSendStatusresult))
                        {
                            $smsSendStatusresultobj = json_decode($smsSendStatusresult);
                            $smsText .= @$smsSendStatusresultobj->Data->Message;
                            $smsSendStatus = @$smsSendStatusresultobj->Data->Status;
                        }
                    }
                }
                
                $checkSmsSendStatus = SMSHelper::checkSmsSendStatus($mId->messageId);
                $smsSendStatusresult = @$checkSmsSendStatus['data'];
    
                if (!empty($smsSendStatusresult))
                {
                    $smsSendStatusresultobj = json_decode($smsSendStatusresult);
                    $preinspectionHistory = AxionPreinspectionHistory::findOne($value->id);
                    $preinspectionHistory->smsText = @$smsText;
                    $preinspectionHistory->smsSendStatus = strtoupper(@$smsSendStatus);
                    $preinspectionHistory->save();
                }
            }
        }

        $query = AxionPreinspectionHistory::find()->where(['preinspection_id' => $id]);

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort'=> ['defaultOrder' => ['created_on'=>SORT_DESC]]
        ]);

        return $this->render('transaction', [
            'model' => $dataProvider,
        ]); 
    }
    
    protected function get_image_location($image = ''){
        $exif = exif_read_data($image, 0, true);
        $latitude = '';
        $longitude = '';
        $datetime = '';

        if($exif && isset($exif['GPS'])){
            if(isset($exif['GPS']['GPSLatitude']) && isset($exif['GPS']['GPSLongitude']))
            {
                $GPSLatitudeRef = $exif['GPS']['GPSLatitudeRef'];
                $GPSLatitude    = $exif['GPS']['GPSLatitude'];
                $GPSLongitudeRef= $exif['GPS']['GPSLongitudeRef'];
                $GPSLongitude   = $exif['GPS']['GPSLongitude'];

                $lat_degrees = count($GPSLatitude) > 0 ? $this->gps2Num($GPSLatitude[0]) : 0;
                $lat_minutes = count($GPSLatitude) > 1 ? $this->gps2Num($GPSLatitude[1]) : 0;
                $lat_seconds = count($GPSLatitude) > 2 ? $this->gps2Num($GPSLatitude[2]) : 0;

                $lon_degrees = count($GPSLongitude) > 0 ? $this->gps2Num($GPSLongitude[0]) : 0;
                $lon_minutes = count($GPSLongitude) > 1 ? $this->gps2Num($GPSLongitude[1]) : 0;
                $lon_seconds = count($GPSLongitude) > 2 ? $this->gps2Num($GPSLongitude[2]) : 0;

                $lat_direction = ($GPSLatitudeRef == 'W' or $GPSLatitudeRef == 'S') ? -1 : 1;
                $lon_direction = ($GPSLongitudeRef == 'W' or $GPSLongitudeRef == 'S') ? -1 : 1;

                $latitude = $lat_direction * ($lat_degrees + ($lat_minutes / 60) + ($lat_seconds / (60*60)));
                $longitude = $lon_direction * ($lon_degrees + ($lon_minutes / 60) + ($lon_seconds / (60*60)));
            }
            
            if(isset($exif['EXIF']['DateTimeOriginal']))
            {
                $datetime = $exif['EXIF']['DateTimeOriginal'];
            }

            return array('latitude'=>$latitude, 'longitude'=>$longitude, 'datetime'=>$datetime);
        }else{
            return array('latitude'=>$latitude, 'longitude'=>$longitude, 'datetime'=>$datetime);
        }
    }
    protected function gps2Num($coordPart){
        $parts = explode('/', $coordPart);
        if(count($parts) <= 0)
            return 0;
        if(count($parts) == 1)
            return $parts[0];

        if (floatval($parts[1]) > 0)
            return floatval($parts[0]) / floatval($parts[1]);
        else {
            return floatval($parts[0]);
        }
    }
    
    protected function distance($lat1, $lon1, $lat2, $lon2, $unit) {
        $theta = $lon1 - $lon2;
        $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta));
        $dist = acos($dist);
        $dist = rad2deg($dist);
        $miles = $dist * 60 * 1.1515;
        $unit = strtoupper($unit);

        if ($unit == "K") {
            return ($miles * 1.609344);
        } else if ($unit == "N") {
            return ($miles * 0.8684);
        } else {
            return $miles;
        }
    }
    
    protected function customImage($inputFile,$displayText)
    {
        if(Image::getImagine()->open($inputFile)->thumbnail(new Box(500, 500))->save($inputFile , ['quality' => 250]))
        {
            //list($width, $height, $type, $attr) = getimagesize($inputFile);

            $watermark = '@webroot/images/Axion_logo_watermark.png';
            Image::watermark($inputFile, $watermark, [5, 5])->save($inputFile);

            if($displayText != '')
            {
                $fontFile = '@webroot/fonts/Crimson-Bold.otf';
                $img = Image::text($inputFile, $displayText, $fontFile, [0, 0], ['style' => ['size' => 12, 'border' => 1,'padding' => '10px 5px','text-shadow' => '1px 1px #000000', 'background-color' => '#FFAF0']]);
                $img->save($inputFile);
            } 

            $result = S3Helper::upload($inputFile, $inputFile);
        }
    }
    
    protected function getLocation($lat,$long)
    {
        $loc = '';
        
        $geocode=@file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?latlng='.$lat.','.$long.'&sensor=false');

        if ($geocode === false) {
            $geocode= '';
        }
        
        if($geocode != '')
        {
            $output = json_decode($geocode);

            if(isset($output->results[0]->address_components))
            {

                foreach($output->results[0]->address_components as $addAttr){
                    if($addAttr->types[0] == 'locality'){
                        if(!empty($addAttr->long_name) && isset($addAttr->long_name)) {
                           $route = $addAttr->long_name.' ';
                       }
                   }
                   if($addAttr->types[0] == 'postal_code'){
                    if(!empty($addAttr->long_name) && isset($addAttr->long_name)) {
                       $postal = $addAttr->long_name;
                   }
               } 
           } 
           $loc = $route." ".$postal;

                /*
                for($j=0;$j<count($output->results[0]->address_components);$j++){
                    $cn=array($output->results[0]->address_components[$j]->types[0]);
                    if(in_array("locality", $cn))
                    {
                     $loc = $output->results[0]->address_components[$j]->long_name;
                    }
                }
                 //area
                 //postal_code
                 //locality
                * 
                */

            }
        }

        return trim($loc);
    }
    
    protected function saveImageObj($obj,$id,$lastImage,$img,$type='') {
        $qcLoc = \Yii::$app->params['qcLoc'];
        $image_parts = explode(";base64,", $img);
        $image_type_aux = explode("image/", $image_parts[0]);
        $image_type = $image_type_aux[1];
        //$image_type = 'jpg';
        $image_base64 = base64_decode($image_parts[1]);
        if($image_base64) {

                // For Others photo
            if ($obj->type == '') {
                $obj->type = $type;
                $obj->preinspection_id = $id;
            }
            $obj->image = $id . '-'.$obj->type.'-'. Yii::$app->security->generateRandomString() . '.' . $image_type;
            $inputFile = $qcLoc . $obj->image;
            if(file_put_contents($inputFile, $image_base64))
            {
                date_default_timezone_set('Asia/Kolkata');

                $iLocation = '';
                $bLocation = '';
                $bLat = Yii::$app->session->get('user.lat');
                $bLong = Yii::$app->session->get('user.long');
                $iLat = $bLat;
                $iLong = $bLong;
                $sTime = date('Y-m-d H:i:s');
                $iTime =  $sTime;
                $timeStatus = 0;

                $displayText = '';

                if($timeStatus == 0)
                {  
                    $displayText = date("d-m-Y h:i:s A", strtotime($iTime));
                }

                if($iLat == '' && $iLong == '')
                {     
                            //No Geolocation found
                    $locStatus = 5;
                }
                else {    
                    $locStatus = 0;
                    $iLocation = $this->getLocation($iLat, $iLong);
                    $bLocation = $iLocation; 
                }

                if($locStatus == 0)
                {
                    if($iLocation == '') {
                    $location = 'Lat:'.$iLat.' Long:'.$iLong;
                    }
                    else {
                        $location = $iLocation;
                    }
                    $displayText .= '  '.$location;
                }


                $this->customImage($inputFile,$displayText);

                if($lastImage != '')
                {
                    $filename = getcwd().'/'.$qcLoc.$lastImage;
                    if(file_exists($filename )){
                        unlink($filename);
                    }else{
                                    //echo 'file not found';

                    }
                }

                $obj->iLat = $iLat." ";
                $obj->iLong = $iLong." ";
                $obj->bLat = $bLat." ";
                $obj->bLong = $bLong." ";
                $obj->iTime = $iTime;
                $obj->sTime = $sTime;
                $obj->locStatus = $locStatus;
                $obj->timeStatus = $timeStatus;
                $obj->iLocation = $iLocation;
                $obj->bLocation = $bLocation;
                $obj->created_on = $sTime;
            }
        }
        else {
            $obj->image =  $lastImage;
        }
        $obj->save();

        return $obj->image;
    }


    public function actionImageUpload()
    {
        // $qcLoc = \Yii::$app->params['qcLoc'];

            //$_POST['type'] = 'chassisThumb';
        $img = $_POST['base64image'];
        $qcLoc = \Yii::$app->params['qcLoc'];
        $id = $_POST['id'];
        $type = $_POST['type'];
        $photoId = $_POST['photoId'];

        if (!preg_match("/Others-/i", $type))
            $whereCondition = ['preinspection_id' => $id,'type' => $type];
        else   
            $whereCondition = $photoId;

            // Check whether recored will insert or update
        if ($whereCondition != '')
            $obj = AxionPreinspectionPhotos::findOne($whereCondition);
        else
            $obj = new AxionPreinspectionPhotos();

        $locStatusData = $obj->locStatusValue;

        $timeStatusData = $obj->timeStatusValue;

        $premodel = AxionPreinspection::findOne($id);
        if (empty($premodel->uploadSource))
        {
            $premodel->uploadSource = 'Mobile App';
            $premodel->save();
        }

        if($obj->image)
            $lastImage = $obj->image;
        else
            $lastImage = '';

        $image = $lastImage;

        if(Yii::$app->request->post())
        {
            $image = $this->saveImageObj($obj,$id,$lastImage,$img,$type);
        }
        $imgUrl = Yii::$app->urlManager->createAbsoluteUrl($qcLoc.$image);

        if (!preg_match("/Others-/i", $type) || $photoId != '')
            return $imgUrl;
        else
        return json_encode(['imgUrl' => $imgUrl, 'insertedId' => Yii::$app->db->getLastInsertId()]); 
    }

    protected function saveImageObjbrowse($obj,$id,$lastImage,$type='') {
        $qcLoc = \Yii::$app->params['qcLoc'];

        try {

            // For Others photo
            if ($obj->type == '') {
                $obj->type = $type;
                $obj->preinspection_id = $id;
                $image =  UploadedFile::getInstance($obj,'image['.preg_replace('/-\d+/i', '', $obj->type).']');
            }
            else {
                $image =  UploadedFile::getInstance($obj,'image['.$obj->type.']');
            }
    
            if($image)
            {
                $obj->image = $id . '-'.$obj->type.'-'. Yii::$app->security->generateRandomString() . '.' . $image->extension;
                $inputFile = $qcLoc . $obj->image;
                if($image->saveAs($inputFile))
                {
                    if($obj->type != 'vehicleVideo')
                    {
                        date_default_timezone_set('Asia/Kolkata');
                        $imgData = $this->get_image_location($inputFile);
    
                            //print_r($imgData);
    
                        $iLocation = '';
                        $bLocation = '';
                        $iLat = $imgData['latitude'];
                        $iLong = $imgData['longitude'];
                        $iTime =  $imgData['datetime'];
                        if($iTime != '')
                        {
                            $datetime = explode(" ", $iTime);
                            $iTime  = str_replace(":","-",$datetime[0])." ".$datetime[1];
                        }
                        $bLat = Yii::$app->session->get('user.lat');
                        $bLong = Yii::$app->session->get('user.long');
                        $sTime = date('Y-m-d H:i:s');
    
                        if($iLat == '' && $iLong == '' && $bLat == '' && $bLong == '')
                        {
                                //No Image and Browser Geolocation found
                            $locStatus = 2;
                        }
                        else if($iLat == '' && $iLong == '' && $bLat != '' && $bLong != '')
                        {
                                //No Image Geolocation found
                            $locStatus = 3;
                        }
                        else if($iLat != '' && $iLong != '' && $bLat == '' && $bLong == '')
                        {
                                //No Browser Geolocation found
                            $locStatus = 4;
                        }
                        else if($iLat != '' && $iLong != '' && $bLat != '' && $bLong != '')
                        {     
                            $km = $this->distance($iLat, $iLong, $bLat, $bLong, "K");
                            if($km <= 10)
                            {
                                    //Correct Data    
                                $locStatus = 0;  
                            }
                            else
                            {
                                    //Location mismatch 
                                $locStatus = 1; 
                            }
                        }
                        else {
                                //No Browser Geolocation found
                            $locStatus = 5;
                        }
    
                        if($iTime == '')
                        {
                                //No Image DateTime found
                            $timeStatus = 2;
                        }
                        else 
                        {
                            $nInterval = strtotime($sTime) - strtotime($iTime);
                            $nInterval = $nInterval/60;
                            if($nInterval <= 60)
                            {
                                    //Correct data
                                $timeStatus = 0; 
                            }
                            else
                            {
                                    //DateTime Mismatch
                                $timeStatus = 1; 
                            }
                        }
                        if($iLat != '' && $iLong != '')
                        {
                            $iLocation = $this->getLocation($iLat, $iLong);
                        }
    
                        if($bLat != '' && $bLong != '')
                        {
                            $bLocation = $this->getLocation($bLat, $bLong);
                        }
    
                        $displayText = '';
    
                        if($timeStatus == 0)
                        {  
                            $displayText = date("d-m-Y h:i:s A", strtotime($iTime));
                        }
    
                        if($locStatus == 0)
                        {
                            $location = $iLocation;
                            if($location == '')
                            {
                                $location = $bLocation;
                            }
                            if($location == '')
                            {
                                $location = 'Lat:'.$iLat.' Long:'.$iLong;
                            }
                            $displayText .= '  '.$location;
                        }                   
    
    
                        /* Disable Caption Text - Temporary */
                            //$displayText = '';
                            //$timeStatus = 0;
                            //$locStatus = 0;
                        /* end - code will removed after resolving retrieving date time after client resize */
    
    
                        $this->customImage($inputFile,$displayText);
    
                        $premodel = AxionPreinspection::findOne($id);
                        if (empty($premodel->uploadSource))
                        {
                            $premodel->uploadSource = 'File Upload';
                            $premodel->save();
                        }
                        
                        if($lastImage != '')
                        {
                            $filename = getcwd().'/'.$qcLoc.$lastImage;
                            if(file_exists($filename )){
                                unlink($filename);
                            }else{
                                    //echo 'file not found';
    
                            }
                        }
    
                        $obj->iLat = $iLat." ";
                        $obj->iLong = $iLong." ";
                        $obj->bLat = $bLat." ";
                        $obj->bLong = $bLong." ";
                        $obj->iTime = $iTime;
                        $obj->sTime = $sTime;
                        $obj->locStatus = $locStatus;
                        $obj->timeStatus = $timeStatus;
                        $obj->iLocation = $iLocation;
                        $obj->bLocation = $bLocation;
                    }   
                    else {
                        $obj->image = $this->saveVideoFfmpeg($id, $obj->type, $inputFile);
                    } 
                }
            }
            else
            {
                $obj->image =  $lastImage;
                $obj->iLocation =  $lastImage;
            }
        }
        catch(ErrorException $e) {
            $this->log(@$obj->preinspection_id, @$e->getMessage(), @$obj->type);
        }

        $obj->save();

        /*if ($obj->save())
            die('Saved');
        else 
        print_r($obj->getErrors());*/
    }

    public function actionImageUploadbrowse()
    {
        $qcLoc = \Yii::$app->params['qcLoc'];
        $id = $_POST['id'];
        $type = $_POST['type'];
        
        if ($type == "Others") {
            $existData = AxionPreinspectionPhotos::find()->select('type')->andFilterWhere(['preinspection_id' =>  $id])->andFilterWhere(['LIKE', 'type', 'Others%', false])->orderBy(['LENGTH(type)' => SORT_ASC,
                'type' => SORT_ASC])->all();
            //return $existData->createCommand()->sql;
            foreach ($existData as $OtherType) {
                $lastOtherType = $OtherType->type;
            }

            if (!empty($lastOtherType)) {
                $typeArray = explode('-', $lastOtherType);
                $type = 'Others-' . (trim($typeArray[1]) + 1);
            }
            else {
                $type = 'Others-1';
            }

            $obj = new AxionPreinspectionPhotos();
        }
        else
            $obj = AxionPreinspectionPhotos::findOne(['preinspection_id' => $id,'type' => $type]);

        $locStatusData = $obj->locStatusValue;
        
        $timeStatusData = $obj->timeStatusValue;
        if($obj->image)
            $lastImage = $obj->image;
        else
            $lastImage = '';

        if(Yii::$app->request->post())
        {
            $this->saveImageObjbrowse($obj,$id,$lastImage,$type);
        }
        $s3BaseUrl = 'https://'.\Yii::$app->params['s3Bucket'].'.s3.'.\Yii::$app->params['s3Region'].'.amazonaws.com/';
        $imgUrl = $s3BaseUrl.$qcLoc.$obj->image;
        $json = array(
            'initialPreview' => [
                $obj->image ? $imgUrl : null, 
            ], 
            'initialPreviewConfig' => [
                [
                    'caption' => $obj->locStatus ? $locStatusData[$obj->locStatus]." <br>".$timeStatusData[$obj->timeStatus]: '', 
                    'size' => '',
                    'url'=> Url::to(['/axion-preinspection/remove-photobrowse']),
                    'key'=> $obj->id,
                ],

            ],

        );

        return json_encode( $json );
    }
    
    
    public function actionVideoSession($id)
    {
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        if($role == 'Customer' && Yii::$app->user->identity->companyId != $id)
        {
            $this->goBack();
        }
        
        $premodel = AxionPreinspection::findOne($id);
        
        $apiKey = \Yii::$app->params['tokApiKey'];
        $apiSecret = \Yii::$app->params['tokApiSecret'];
        $opentok = new OpenTok($apiKey, $apiSecret);
        $archiveList = $opentok->listArchives();
        $archives = $archiveList->getItems($premodel->ro);
        

        
        $apiKey = \Yii::$app->params['tokApiKey'];
        $apiSession = $premodel->ro;
        if(!Yii::$app->session->get('user.token') || Yii::$app->session->get('user.token') == '' )
        {
            $apiToken = '';
        }
        else
        {
            $apiToken = Yii::$app->session->get('user.token');
        }
        
        if (Yii::$app->request->post('join_session')==='join_session') {
           $token = $opentok->generateToken($premodel->ro);
           Yii::$app->session->set('user.token',$token);
           return $this->redirect(array('video-session', 'id' => $id));
        }
        else if (Yii::$app->request->post('end_session')==='end_session') {
           Yii::$app->session->set('user.token','');
           if($premodel->vehicleType == 'ALL-VEHICLE')
               return $this->redirect(array('vehicleqc', 'id' => $id));
           else
               return $this->redirect(array('commercialqc', 'id' => $id));    
        }

        else {
            return $this->render('video-session', [
                'premodel' => $premodel,
                'apiKey' => $apiKey,
                'apiSession' => $apiSession,
                'apiToken' => $apiToken,
                'archives' => $archives,
                'role' => $role,
            ]);
        }
    }

    public function actionVehicleqc($id,$page)
    {
        $premodel = AxionPreinspection::findOne($id);

        if (!Yii::$app->user->getId())
        {
            // If case completed that customer will be not allowed perform the QC.
            if (in_array($premodel->status, [9, 101, 102, 104]))
               throw new HttpException(403,"You are not allowed to perform this action.");

            $role = 'Customer';
            $redirect_page=array('vehicleqc', 'id' => $id,'page'=>$page); 
        }
        else {
            $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;


            if($role == 'Customer' && Yii::$app->user->identity->companyId != $id)
            {
                return $this->goBack();
            }
            elseif($role=='Surveyor')
            {
                $redirect_page=$page;
            }
            else
            {
                $redirect_page=array('vehicleqc', 'id' => $id,'page'=>$page);
            }
        }
        
        $premodel->scenario = 'vehicleqc';
        $conveyanceApprovalImg = $premodel->conveyanceApprovalImg;

        $completedSurveyDateTime = $premodel->completedSurveyDateTime;
        $customerAppointDateTime = $premodel->customerAppointDateTime;

        $extraKM = $premodel->extraKM;

        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        if(count($phmodel) == 0)
        {
            $this->updateQc($premodel, 'insert');
            $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        }
        
        $model = AxionPreinspectionVehicle::findOne(['preinspection_id' => $id]);
        $model->scenario='vehicleqc';
        $twowheelermodel = AxionPreinspectionTwowheeler::findOne(['preinspection_id' => $id]);
        if(count($twowheelermodel) <= 0){
            $twowheelermodel = new AxionPreinspectionTwowheeler();
        }
        $fwheelermodel = AxionPreinspectionFwheeler::findOne(['preinspection_id' => $id]);
        if(count($fwheelermodel) <= 0){
            $fwheelermodel = new AxionPreinspectionFwheeler();
        }
        $commercialwheelermodel = AxionPreinspectionCommercialwheeler::findOne(['preinspection_id' => $id]);
        if(count($commercialwheelermodel) <= 0){
            $commercialwheelermodel = new AxionPreinspectionCommercialwheeler();
        }
        
        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();
        //Master Caller Data 
        $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
        $callerEmail = $callerModel->callerEmailId;
        if($callerModel)
            $callerModel = false; 

        $qcLoc = \Yii::$app->params['qcLoc'];

        $company = PreinspectionClientCompany::find()
        ->where(['id' => $premodel->insurerName])
        ->all();

        $caller = User::find()
        ->where(['id' => $premodel->callerName])
        ->all();

        $customerSession = User::find()
        ->where(['mobile' => $premodel->insuredMobile])
        ->count();

        date_default_timezone_set('Asia/Kolkata');
        $currentDateTime = date('Y-m-d H:i:s');

        $apiData = [];
        // if ($premodel->insurerName == 10 || $premodel->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
        // {
        //     $postData = Yii::$app->request->post();

        //     if ($postData['AxionPreinspection']['chassisNo']) // $premodel->chassisNo != 
        //     {
        //         $apiData['chassis_number'] = $postData['AxionPreinspection']['chassisNo'];
        //     }
        //     if ($postData['AxionPreinspection']['engineNo']) // $premodel->engineNo != 
        //     {
        //         $apiData['engine_number'] = $postData['AxionPreinspection']['engineNo'];
        //     }
        //     if ($postData['AxionPreinspection']['registrationNo']) // $premodel->registrationNo != 
        //     {
        //         $apiData['registration_number'] = $postData['AxionPreinspection']['registrationNo'];
        //     }
        //     //if ($premodel->status != $postData['AxionPreinspection']['status'])
        //     //{
        //         $reportLink = '';
        //         switch($postData['AxionPreinspection']['status'])
        //         {
        //             case 0:
        //                 $rsStatus = 'Case Created';
        //                 break;

        //             case 1:
        //                 $rsStatus = 'Reassigned';
        //                 break;

        //             case 9:
        //                 $rsStatus = 'Rejected';
        //                 break;

        //             case 8:
        //                 $rsStatus = 'QC Pending';
        //                 break;

        //             case 12:
        //                 $rsStatus = 'Assigned';
        //                 break;

        //             case 101:
        //                 $rsStatus = 'Recommended';
        //                 $reportLink = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/vehicleqcpdf?id='.$id);                            
        //                 break;

        //             case 102:
        //                 $rsStatus = 'Not Recommended';
        //                 $reportLink = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/vehicleqcpdf?id='.$id);  
        //                 break;

        //             case 104:
        //                 $rsStatus = 'Refer to Under Writer';
        //                 $reportLink = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/vehicleqcpdf?id='.$id);  
        //                 break;

        //             default:
        //                 $rsStatus = 'Case Created';
        //         }

        //         $apiData['status'] = $rsStatus;
        //         $apiData["vir_link"] = $reportLink;
        //     //}
        //     if (!empty($apiData['status']) && $apiData['status'] == 'Reassigned')
        //     {
        //         if (!empty($postData['AxionPreinspection']['rescheduleDateTime']))
        //         {
        //             $rescheduleDateTimeData = ($postData['AxionPreinspection']['rescheduleDateTime1']) ? $postData['AxionPreinspection']['rescheduleDateTime1']: $postData['AxionPreinspection']['rescheduleDateTime'];                    
        //             $postData['AxionPreinspection']['rescheduleDateTime'] = $rescheduleDateTimeData;
                    
        //             $apiData['reassigned_inspection_date'] = date('Y-m-d h:i:s A', strtotime($postData['AxionPreinspection']['rescheduleDateTime']));
        //             //$apiData['reassigned_inspection_date'] = str_replace('+00:00', '.00', $apiData['reassigned_inspection_date']);
        //         }
        //         else if (!empty($postData['AxionPreinspection']['customerAppointDateTime']))
        //         {
        //             $apiData['reassigned_inspection_date'] = date('Y-m-d h:i:s A', strtotime($postData['AxionPreinspection']['customerAppointDateTime']));
        //             //$apiData['reassigned_inspection_date'] = str_replace('+00:00', '.00', $apiData['reassigned_inspection_date']);
        //         }
        //     }
        //     if ($premodel->manufacturer != $postData['AxionPreinspection']['manufacturer'])
        //     {
        //         $apiData['vehicle_make'] = $postData['AxionPreinspection']['manufacturer'];
        //     }
        //     if ($premodel->model != $postData['AxionPreinspection']['model'])
        //     {
        //         $apiData['vehicle_model'] = $postData['AxionPreinspection']['model'];
        //     }
        //     if ($premodel->manufacturingYear != $postData['AxionPreinspection']['manufacturingYear'])
        //     {
        //         $apiData['year_of_manufacture'] = $postData['AxionPreinspection']['manufacturingYear'];
        //     }
        //     //if ($premodel->remarks != $postData['AxionPreinspection']['remarks'])
        //     //{
        //         $apiData['remarks'] = $postData['AxionPreinspection']['remarks'];
        //     //}
        //     //if (($premodel->completedSurveyDateTime != $postData['AxionPreinspection']['completedSurveyDateTime']) && $premodel->status == 101)
        //     //{
        //         if ($postData['AxionPreinspection']['status'] == 101 && !empty($postData['AxionPreinspection']['completedSurveyDateTime'])) {
        //             $apiData['approvedDate'] = date('Y-m-d h:i:s A', strtotime($postData['AxionPreinspection']['completedSurveyDateTime']));
        //             // $apiData['approvedDate'] = date('Y-m-d h:i:s A', strtotime($currentDateTime));
        //             //$apiData['approvedDate'] = str_replace('+00:00', '.00', $apiData['approvedDate']);
        //         }
        //     //}
        //     //if (($premodel->completedSurveyDateTime != $postData['AxionPreinspection']['completedSurveyDateTime']) && $premodel->status == 102)
        //     //{
        //         if (($postData['AxionPreinspection']['status'] == 102 || $postData['AxionPreinspection']['status'] == 9)) {
        //             $apiData['rejectedDate'] = date('Y-m-d h:i:s A', strtotime($currentDateTime));
        //             //$apiData['rejectedDate'] = str_replace('+00:00', '.00', $apiData['rejectedDate']);
        //         }
        //     //} 

        //     //if ($model->vType != $postData['AxionPreinspectionVehicle']['vType'])
        //     //{
        //         switch($postData['AxionPreinspectionVehicle']['vType'])
        //         {
        //             case '4-WHEELER':
        //                 $rsVehicleType = 'Private Car';
        //                 break;

        //             case '2-WHEELER':
        //                 $rsVehicleType = 'Two-wheeler';
        //                 break;

        //             case 'COMMERCIAL':
        //                 switch($postData['AxionPreinspectionVehicle']['vCategory'])
        //                 {
        //                     case 'Passenger Carrying Vehicle':
        //                         $rsVehicleType = 'Passenger Carrying Vehicle';
        //                         break;

        //                     case 'Goods Carrying Vehicle':
        //                         $rsVehicleType = 'Goods Carrying Vehicle';
        //                         break;

        //                     case 'Miscellaneous Vehicle':
        //                         $rsVehicleType = 'Miscellaneous Vehicle';
        //                         break;
        //                     default:
        //                         $rsVehicleType = 'Private Car';
        //                 }
        //                 break;
                        
        //             default:
        //                 $rsVehicleType = 'Private Car';
        //         }

        //         $apiData['vehicle_type'] = $rsVehicleType;

        //     //} 
        //     if ($model->fuelType != $postData['AxionPreinspectionVehicle']['fuelType'])
        //     {
        //         $apiData['fuel_type'] = $postData['AxionPreinspectionVehicle']['fuelType'];
        //     } 
        //     if ($model->odometerReading != $postData['AxionPreinspectionVehicle']['odometerReading'])
        //     {
        //         $apiData['odometer_reading'] = $postData['AxionPreinspectionVehicle']['odometerReading'];
        //     } 
            
        //     $apiData['inspected_Start_location'] = $premodel->surveyLocation;
        //     $apiData['inspected_Location'] = $premodel->surveyLocation2;
        //     $apiData['no_of_Kilometers'] = $premodel->extraKM;

        //     $apiData['vir_case_number'] = $premodel->contactPersonMobileNo;
        //     $apiData['reference_no'] = $premodel->referenceNo;
        // }

        if (Yii::$app->request->post('create_session')==='create_session') {
            $this->createCustomerSession($premodel->id);
            return $this->redirect(array('vehicleqc', 'id' => $id));
        } 
        else if ($premodel->load(Yii::$app->request->post()) && $model->load(Yii::$app->request->post()) && $twowheelermodel->load(Yii::$app->request->post())
            && $fwheelermodel->load(Yii::$app->request->post()) && $commercialwheelermodel->load(Yii::$app->request->post())) {     
            //$premodel->completedSurveyDateTime = $completedSurveyDateTime;
            $premodel->customerAppointDateTime = $customerAppointDateTime;

            // if ( ($role != 'Admin' && $role != 'Superadmin') || $premodel->insurerName == 9)
            if ($role != 'Admin' && $role != 'Superadmin')
                $premodel->updatedBy = Yii::$app->user->identity->id;

            if ($conveyanceApprovalImg) {
                $premodel->conveyanceApprovalImg = $conveyanceApprovalImg;
            }

            // Upload conveyance Approval Image
            if ($_FILES['AxionPreinspection']['name']['conveyanceApprovalImg']) {
                $premodel->conveyanceApprovalImg = $this->actionConveyanceApprovalUpload($premodel->id);
            }

            // Billing table functionality
            $this->billingUpdate($premodel, $model, $extraKM, $completedSurveyDateTime);

            if (empty($premodel->surveyDoneOn))
            {
                $premodel->surveyDoneOn = $currentDateTime;
            }
            if (empty($premodel->qcDoneOn) && ($premodel->status != 8 && $premodel->status != 9))
            {
                $premodel->qcDoneOn = $currentDateTime;
            }
            if (empty($premodel->cancelledOn) && ($premodel->status == 9))
            {
                $premodel->cancelledOn = $currentDateTime;
            }
            $premodel->updated_on = $currentDateTime;

            $apiData['last_modified_date'] = date('Y-m-d h:i:s A', strtotime($premodel->updated_on));

            //Updating Preinspection details
            $premodel->save();           

            //Updating QC details
            $model->save();

            $twowheelermodel->save();   
            $fwheelermodel->save();   
            $commercialwheelermodel->save();

            foreach($phmodel as $obj)
            {
                if($obj->image)
                    $lastImage = $obj->image;
                else
                    $lastImage = '';

                if($obj->load(Yii::$app->request->post()))
                {
                    $this->saveImageObjbrowse($obj, $id, $lastImage); 
                }
            }

            if($this->saveVehicleqcpdf($id))
            {
                $this->savePhotosPdf($premodel->id, $premodel->conveyanceApprovalImg);
            }

            function status($pairs,$stats) {
                foreach ($pairs as $key => $value) {
                    if ($key == $stats) {
                        return ("{$value}");
                    }
                }
            }

            /*function ItgiStatus($pairs,$stats) {
                foreach ($pairs as $key => $value) {
                    if ($key == $stats) {
                        return ("{$value}");
                    }
                }
            }*/


            $Status = array(0=>'followupReason',1=>'Intimation Re-Schedule',8=>'Survey Done',9=>'Cancelled',12=>   'Schedule-CustomerAppointment',100=>'Change RO',101=>'PI-Recommended',102=>'PI-Not Recommended',103=>'PI-Inprogress',104=>'PI-Refer to Under Writer');

            //$itgiStatusArr = array(0=>'followupReason',1=>'Intimation Re-Schedule',8=>'Survey Done',9=>'Report Rejected By Underwriter',12=>'Schedule-CustomerAppointment',100=>'Reassignment of Agency',101=>'Report Recommended',102=>'Report Not Recommended',103=>'PI-Inprogress',104=>'Report Referred To Underwriter');


            $image = "Images";
            $refno = $premodel->contactPersonMobileNo;
            $partner = "Axion";
            $vehicleno = $premodel->registrationNo;
            $Subject = sprintf("%s,%s,%s,%s,",$image,$partner,$refno,$vehicleno);

            //$name = PreinspectionClientCompany::findOne(['id' => $id]);
            $division = PreinspectionClientDivision::findOne(['id' => $id]);
            $partnerName = "Axion";
            $partnerCode = "NA";                            
            $piStatus = status($Status,$premodel->status);
            //$itgiStatus = status($itgiStatusArr,$premodel->status);
            $refno = $premodel->referenceNo;
            $insurerName = "Go Digit General Insurance Limited";
            $vehicleRegNo = $premodel->registrationNo;
            $insuredname = $premodel->insuredName;
            $insuredAddress = $premodel->insuredAddress;
            $insuredMobile = $premodel->insuredMobile;
            $agentEmail = $premodel->callerDetails;
            $customerOccupation =  $premodel->customerOccupation;
            $residence =  $premodel->residence;
            $customerAge =  $premodel->customerAge;
            $numberOfCarsOwned =  $premodel->numberOfCarsOwned;
            $vehicleParked =  $premodel->vehicleParked;
            $securityOfVehicle =  $premodel->securityOfVehicle;
            $relationship = $premodel->relationship;
            $maintenance  = $premodel->maintenance;
            $vehicleTimeOfInspection = $premodel->vehicleTimeOfInspection;
            $updatedContact = $premodel->updatedContact;
            $insurerRefNo= $premodel->contactPersonMobileNo;

            $Gmessage = sprintf('"partnerName":"%s", <br/> "piStatus":"%s",<br/> "referenceNo":"%s",<br/>"insurerName": "%s",<br/> "vehicleRegNo":"%s",<br/> "insurerRefNo":"%s",<br/> "insuredName":"%s",<br/> "insuredAddress":"%s",<br/> "insuredMobile":"%s",<br/> "agentEmail":"%s", <br/> <br/> <br/>  <br/> <br/> <br/> "customerOccupation":"%s",<br/> "residence":"%s",<br/> "customerAge":"%s",<br/> "numberOfCarsOwned":"%s",<br/> "vehicleParked":"%s",<br/> "securityOfVehicle":"%s",<br/> "relationship":"%s",<br/> "maintenance":"%s",<br/> "vehicleTimeOfInspection":"%s",<br/> "updatedContact":"%s"',$partnerName,$piStatus,$refno,$insurerName,$vehicleRegNo,$insurerRefNo,$insuredname,$insuredAddress,$insuredMobile,$agentEmail,$customerOccupation,$residence,$customerAge,$numberOfCarsOwned,$vehicleParked,$securityOfVehicle,$relationship,$maintenance,$vehicleTimeOfInspection,$updatedContact);

                                            //$upload=sprintf('C:/xampp/htdocs/taig-wb/images/',$Image);
            $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$Gmessage]);

            // $attachment = array("chassisThumb"=>"chp.jpg","rcCopy"=>"rcb1.jpg","preInsuranceCopy"=>"rcb2.jpg","cngLpgKit"=>"cng.jpg","rightSideFullView"=>"rs.jpg","rearViewImage"=>"bs.jpg","enginePhoto"=>"ecr.jpg","dashBoardPhoto"=>"dbd.jpg","frontLeftCorner45"=>"flc.jpg","leftSideFullView"=>"ls.jpg","leftQtrPanel"=>"blc.jpg","rightQtrPanel"=>"brc.jpg","frontRightCorner45"=>"frc.jpg","frontViewNumberPlate"=>"ws.jpg","frontViewNumberPlate"=>"fs.jpg", "Others-1"=>"Others-1.jpg", "Others-2"=>"Others-2.jpg", "Others-3"=>"Others-3.jpg", "Others-4"=>"Others-4.jpg", "Others-5"=>"Others-5.jpg", "Others-6"=>"Others-6.jpg", "Others-7"=>"Others-7.jpg", "Others-8"=>"Others-8.jpg", "Others-9"=>"Others-9.jpg", "Others-10"=>"Others-10.jpg", "Others-11"=>"Others-11.jpg", "Others-12"=>"Others-12.jpg", "Others-13"=>"Others-13.jpg", "Others-14"=>"Others-14.jpg", "Others-15"=>"Others-15.jpg", "Others-16"=>"Others-16.jpg", "Others-17"=>"Others-17.jpg", "Others-18"=>"Others-18.jpg", "Others-19"=>"Others-19.jpg", "Others-20"=>"Others-20.jpg", "Others-21"=>"Others-21.jpg", "Others-22"=>"Others-22.jpg", "Others-23"=>"Others-23.jpg", "Others-24"=>"Others-24.jpg", "Others-25"=>"Others-25.jpg", "Others-26"=>"Others-26.jpg", "Others-27"=>"Others-27.jpg", "Others-28"=>"Others-28.jpg", "Others-29"=>"Others-29.jpg", "Others-30"=>"Others-30.jpg", "Others-31"=>"Others-31.jpg", "Others-32"=>"Others-32.jpg", "Others-33"=>"Others-33.jpg", "Others-34"=>"Others-34.jpg", "Others-35"=>"Others-35.jpg", "Others-36"=>"Others-36.jpg", "Others-37"=>"Others-37.jpg", "Others-38"=>"Others-38.jpg", "Others-39"=>"Others-39.jpg", "Others-40"=>"Others-40.jpg", "Others-41"=>"Others-41.jpg", "Others-42"=>"Others-42.jpg", "Others-43"=>"Others-43.jpg", "Others-44"=>"Others-44.jpg", "Others-45"=>"Others-45.jpg", "Others-46"=>"Others-46.jpg", "Others-47"=>"Others-47.jpg", "Others-48"=>"Others-48.jpg", "Others-49"=>"Others-49.jpg", "Others-50"=>"Others-50.jpg","vehicleVideo"=>"video.mp4");


            // else if ($premodel->insurerName == 10 || $premodel->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
            // {
            //     // $url = "https://www.royalsundaram.net/iLoungeServices/virintegration/updateVirCaseStatus";  // Test  
            //     $url = "https://www.royalsundaram.in/iLoungeServices/virintegration/updateVirCaseStatus";    // Production 
            //     // $resp = $this->rsCurlRequest($url, json_encode($apiData));
            //     $resp = $this->rsCurlRequest($url, json_encode($apiData));

            //     // Check if the response is an array
            //     if (is_array($resp)) {
            //         $testRes = (object) $resp; // Convert array to object
            //         $testResJSON = json_encode($testRes); // Encode object to JSON
            //         $this->log($premodel->contactPersonMobileNo, $testResJSON, json_encode($apiData));
            //     } else {
            //         // If the response is not an array, log or handle accordingly
            //         $this->log($premodel->contactPersonMobileNo, $resp, json_encode($apiData));
            //     }

                
            //     // $this->log($premodel->contactPersonMobileNo, @$resp, json_encode($apiData));

            //     if($premodel->status == 101)
            //     {                  
            //         $message = 'RSA VIR Status- Vehicle NO '.$premodel->registrationNo.' Ref No '.$premodel->contactPersonMobileNo.' status is RECOMMENDED Please download the report in I-lounge By Axion';
            //     }
            //     else if($premodel->status == 102)
            //     {                  
            //         $message = 'RSA VIR Status- Vehicle NO '.$premodel->registrationNo.' Ref No '.$premodel->contactPersonMobileNo.' status is NOT RECOMMENDED Please download the report in I-lounge By Axion';
            //     }

            //     //Sending sms to customer
            //     $this->sendSms(@$premodel->callerMobileNo, $message);
                
            //     $emailSubject = 'VEHICLE NO: '.$premodel->registrationNo.'/'.$premodel->referenceNo.' - STATUS';
            //     $emailMessage = '<strong>Dear Sir/Madam,<br><br>'. $message .'</strong>';
            //     $emailMessage .= '<br><p>Thanks & Regards,</p>';
            //     $emailMessage .= '<h4>Axion Technical Services</h4>';
            //     $smailer=\Yii::$app->googlemailer->compose('../views/site/about',['message' =>$emailMessage]);
            //     if($smailer)
            //     {
            //         $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
            //         ->setTo(@$agentEmail) //manual.PI@godigit.com mythili.gopi@axionpcs.in
            //         ->setSubject($emailSubject);
            //         $smailer->send();
            //     }
            // }
                                
            // if($premodel->insurerName == 12)
            // {
            //     $pdfFile = getcwd().'/api-uploads/pdf/'.$id.'.pdf';
            //     if($smailer)
            //         $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
            //         //->setTo("mythili.gopi@axionpcs.in") //manual.PI@godigit.com mythili.gopi@axionpcs.in
            //     ->setTo("manual.PI@godigit.com")
            //     ->setSubject($Subject);
            //     if (file_exists($pdfFile))  
            //     {
            //         $smailer->attach($pdfFile, ['fileName' =>'report_pdf.pdf','contentType'
            //             => 'text/pdf']);
            //     }
            //     // foreach($attachment as $file => $x_value) {
            //         // $upload = AxionPreinspectionPhotos::findOne(['preinspection_id' => $id,'type' => $file]);
            //         $uploads = AxionPreinspectionPhotos::find()->where(['preinspection_id' => $id])->andWhere(['!=','image',''])->all();
            //         foreach($uploads as $upload){
            //             if(isset($upload) and isset($upload->image) and strlen($upload -> image) > 0) {
            //                 $qcuploadFile = getcwd().'/qcphotos/'.$upload->image;
            //                 $compressedFile = getcwd().'/compressed_qcphotos/'.$upload->image;                            
            //                 if (file_exists($qcuploadFile)){
            //                     $Image = sprintf('./qcphotos/%s',$upload->image);  
            //                 }else{
            //                     $Image = 'https://axion-preinspection.s3.ap-south-1.amazonaws.com/qcphotos/'.$upload->image;
            //                 }
            //                 if($file == 'vehicleVideo'){
            //                     $smailer->attach($Image, ['fileName' => $x_value,'contentType' => 'video/mp4']);
            //                 }
            //                 else {
            //                     $smailer->attach($Image, ['fileName' => $x_value,'contentType' => 'image/jpeg']);
            //                 }
            //             }
            //         }
            //     // }
            //     // attach file from local file system
            //     $smailer->send();
            // }

            if($role=='Surveyor')
            {
                if($premodel->status=='8')
                {
                    if($callerEmail != '')
                    {
                        //caller email
                        $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                        $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                        $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).'</td></tr>';
                        $emailMessage .= $this->hisMessage($model->id);
                        /* $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>'; */
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr>';
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Remarks </td><td style="padding:15px;border:1px solid #000;">'.$model->remarks.'</td></tr></table></div>';
                        $emailMessage .= '<br><h2 style ="border-top: 1px solid #f1f1f1; border-bottom: 1px solid #f1f1f1; color: #ff110f; text-align: center; padding: 5px auto">Auto Generated Email. Please Do not Reply.</h2>';
                        $emailMessage .= '<br><p>Thanks & Regards,</p>';
                        $emailMessage .= '<h4>Axion Technical Services</h4>';
                        $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$emailMessage]);
                        if($smailer) {
                            $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            ->setTo($agentEmail) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            ->setSubject($emailSubject);
                            $smailer->send();
                        }

                    }
                }
            }

            date_default_timezone_set('Asia/Kolkata');
            $currentDateTime = date('Y-m-d H:i:s');
            $obj = $this->findModel($premodel->id);
            $hismodel = new AxionPreinspectionHistory();
            $hismodel->attributes = $obj->attributes;
            $hismodel->preinspection_id = $obj->id;
            $hismodel->id = 0;

            $smsSendStatusresult = $smsSendStatusresultobj = $messageId = $smsText = $smsSendStatus = '';
            $messageIds = [];
            if (!empty($smsStatus))
            {
                $smsStatusObj = json_decode($smsStatus);
                if (!empty($smsStatusObj->Data))
                {
                    foreach ($smsStatusObj->Data as $smsStatusObjValue)
                    {
                        $messageId = @$smsStatusObjValue->MessageId;
                        $checkSmsSendStatus = SMSHelper::checkSmsSendStatus($messageId);

                        $smsSendStatusresult = @$checkSmsSendStatus['data'];
                        
                        if (!empty($smsSendStatusresult))
                        {
                            $smsSendStatusresultobj = json_decode($smsSendStatusresult);
                            $smsText .= @$smsSendStatusresultobj->Data->Message;
                            $messageIds[] = @$smsSendStatusresultobj->Data->MessageId;
                            $smsSendStatus = @$smsSendStatusresultobj->Data->Status;
                        }
                    }
                }    
                $hismodel->messageId = json_encode(@$messageIds);
                $hismodel->smsType = @$smsType;
                $hismodel->smsText = @$smsText;//$smsSendStatusresult;//@$smsSendStatusresultobj->Data->Message;
                $hismodel->smsSendStatus = strtoupper(@$smsSendStatus);//strtoupper(@$smsSendStatusresultobj->Data->Status);
            }
            
            $hismodel->created_on = $currentDateTime;
            if (!$hismodel->save()) {
                $this->log($premodel->contactPersonMobileNo, json_encode($hismodel->getErrors()));
            }
            
            Yii::$app->session->setFlash('Success','Updated successfully..!');
            return $this->redirect($redirect_page);
        } 
        else if ($role == 'Customer' && Yii::$app->request->post()) {
            $premodel->status = '8';
            if (empty($premodel->surveyDoneOn))
            {
                $premodel->surveyDoneOn = $currentDateTime;
                $premodel->completedSurveyDateTime = $premodel->surveyDoneOn;
            }
            $premodel->updated_on = $currentDateTime;

            $apiData['status'] = 'QC Pending';            
            $apiData['inspected_Start_location'] = $premodel->surveyLocation;
            $apiData['inspected_Location'] = $premodel->surveyLocation2;
            $apiData['no_of_Kilometers'] = $premodel->extraKM;
            $apiData['vir_case_number'] = $premodel->contactPersonMobileNo;
            $apiData['reference_no'] = $premodel->referenceNo;
            $apiData['last_modified_date'] = date('Y-m-d h:i:s A', strtotime($premodel->updated_on));
            // 'false' is used for save the data without validation
            if ($premodel->save(false)) {
                // if ($premodel->insurerName == 10 || $premodel->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                // {
                //     // $url = "https://www.royalsundaram.net/iLoungeServices/virintegration/updateVirCaseStatus";  // Test  
                //     $url = "https://www.royalsundaram.in/iLoungeServices/virintegration/updateVirCaseStatus";    // Production 
                //     $resp = $this->rsCurlRequest($url, json_encode($apiData));
                //     if (is_array($resp)) {
                //         $testRes = (object) $resp; // Convert array to object
                //         $testResJSON = json_encode($testRes); // Encode object to JSON
                //         $this->log($premodel->contactPersonMobileNo, $testResJSON, json_encode($apiData));
                //     } else {
                //         // If the response is not an array, log or handle accordingly
                //         $this->log($premodel->contactPersonMobileNo, $resp, json_encode($apiData));
                //     }
                // }
                Yii::$app->session->setFlash('Success','You have successfully saved all photos. You may close the application by clicking "Close" button.');
            } else {
                Yii::$app->session->setFlash('Failure','Something Went Wrong...');
            }

            return $this->redirect($redirect_page);
        }
        else {
            return $this->render('vehicleqc', [
                'premodel' => $premodel,
                'model' => $model,
                'phmodel' => $phmodel,
                'valuator' => $valuator,
                'callerModel' => $callerModel,
                'qcLoc' => $qcLoc,
                'role' => $role,
                'company' => $company,
                'caller' => $caller,
                'customerSession' => $customerSession,
                'twowheelermodel' => $twowheelermodel,
                'fwheelermodel' => $fwheelermodel,
                'commercialwheelermodel' => $commercialwheelermodel,
            ]);
        }
    }

    protected function billingUpdate($premodel, $vehicleModel, $oldExtraKM, $oldCompletedSurveyDateTime) {
        $searchModel = new AxionPreinspectionSearch();

        // Remove from billing 
        if ( !empty($premodel->billId) && $premodel->billId != 0 
            && ($premodel->paymentMode == 2 || !in_array($premodel->status, [101, 102, 104]) ) ) {

            $billingRow = AxionPreinspectionBilling::findOne(['id' => $premodel->billId]);
            $billDetails = json_decode($billingRow->billDetails);

            if (!empty($billingRow->parentId)) {
                $billingParentRow = AxionPreinspectionBilling::findOne(['id' => $billingRow->parentId]);
                $billParentDetails = json_decode($billingParentRow->billDetails);
            }

            switch ($vehicleModel->vType) {
                case '4-WHEELER':
                    $billDetails->total4W -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->total4W -= 1;
                    }
                    break;
             /* case '3-WHEELER':
                    $billDetails->total3W -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->total3W -= 1;
                    }
                    break;
                case '2-WHEELER':
                    $billDetails->total2W -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->total2W -= 1;
                    }
                    break; */
                case 'COMMERCIAL':
                    $billDetails->totalCW -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->totalCW -= 1;
                    }
                    break;   
            }

            if (trim($oldExtraKM) > 0) {
                $billDetails->totalKm -= trim($oldExtraKM);
                if (!empty($billParentDetails)) {
                    $billParentDetails->totalKm -= trim($oldExtraKM);
                }
            } 

            $premodel->billId = 0;
            $premodel->billStatus = '';
        }

        // Add to billing
        else if ( (empty($premodel->billId) || $premodel->billId == 0) 
        && in_array($premodel->paymentMode, [1, 3]) && in_array($premodel->status, [101, 102, 104]) ) {

            $user = Yii::$app->db->createCommand("
                SELECT * 
                FROM `users` 
                LEFT JOIN `auth_assignment` ON auth_assignment.user_id = users.id 
                WHERE users.id = :updatedBy
            ")
            ->bindValue(':updatedBy', $premodel->updatedBy)
            ->queryOne();

            $user = json_decode(json_encode($user), false);
            
            if ($user->item_name != 'BO User' && $user->item_name != 'Superadmin') {
                $user = User::findOne($user->roId);
            }
            
            // For TATA AIG
            // if ($premodel->insurerName == 5) {
            //     $billingRow = AxionPreinspectionBilling::find()->where(['companyId' => $premodel->insurerName])
            //             ->andWhere(['stateId' => $user->stateId])
            //             ->andWhere(['<=', 'billPeriodFrom', date('Y-m-d', strtotime($premodel->intimationDate))])
            //             ->andWhere(['>=', 'billPeriodTo', date('Y-m-d', strtotime($premodel->intimationDate))])
            //             ->andWhere(['<=', 'billPeriodFrom', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])
            //             ->andWhere(['>=', 'DATE_ADD(`billPeriodTo`, INTERVAL 5 DAY)', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])->one();

            // }
            // else {
                $billingRow = AxionPreinspectionBilling::find()->where(['companyId' => $premodel->insurerName])
                        ->andWhere(['stateId' => $user->stateId])
                        ->andWhere(['<=', 'billPeriodFrom', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])
                        ->andWhere(['>=', 'billPeriodTo', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])->one();
            // }
            
            //echo $billingRow->createCommand()->getRawSql();exit;
            if ($billingRow) {
                $billDetails = json_decode($billingRow->billDetails);

                if (!empty($billingRow->parentId)) {
                    $billingParentRow = AxionPreinspectionBilling::findOne(['id' => $billingRow->parentId]);
                    $billParentDetails = json_decode($billingParentRow->billDetails);
                }

                switch ($vehicleModel->vType) {
                    case '4-WHEELER':
                        $billDetails->total4W += 1;
                        if (!empty($billParentDetails)) {
                            $billParentDetails->total4W += 1;
                        }
                        break;
                 /* case '3-WHEELER':
                        $billDetails->total3W += 1;
                        if (!empty($billParentDetails)) {
                            $billParentDetails->total3W += 1;
                        }
                        break;
                    case '2-WHEELER':
                        $billDetails->total2W += 1;
                        if (!empty($billParentDetails)) {
                            $billParentDetails->total2W += 1;
                        } 
                        break; */
                    case 'COMMERCIAL':
                        $billDetails->totalCW += 1;
                        if (!empty($billParentDetails)) {
                            $billParentDetails->totalCW += 1;
                        }
                        break;   
                }

                // For Royal sundaram KM will be claculated only it is > 50
                // if ( ($premodel->insurerName != 10 && trim($premodel->extraKM) > 0) 
                //     || ($premodel->insurerName == 10 && trim($premodel->extraKM) >= 50) ) {

                //     $billDetails->totalKm += trim($premodel->extraKM);
                //     if (!empty($billParentDetails)) {
                //         $billParentDetails->totalKm += trim($premodel->extraKM);
                //     }
                // } 

                $premodel->billId = $billingRow->id;
                $premodel->billStatus = 'Initiated';
            }

        }

        // Update billing (extraKM)
        else if ( (!empty($premodel->billId) && $premodel->billId != 0) 
            && in_array($premodel->paymentMode, [1, 3]) && in_array($premodel->status, [101, 102, 104])
            && $premodel->extraKM != $oldExtraKM ) {

            $billingRow = AxionPreinspectionBilling::findOne(['id' => $premodel->billId]);
            $billDetails = json_decode($billingRow->billDetails);

            if (!empty($billingRow->parentId)) {
                $billingParentRow = AxionPreinspectionBilling::findOne(['id' => $billingRow->parentId]);
                $billParentDetails = json_decode($billingParentRow->billDetails);
            }

            // For Royal sundaram KM will be claculated only it is > 50
            // if ($premodel->insurerName == 10) {
            //     if ($premodel->extraKM >= 50 && $oldExtraKM < 50) {
            //         // Here addition or subtraction will happen depends on $oldExtraKM value
            //         $billDetails->totalKm += $premodel->extraKM;

            //         if (!empty($billParentDetails)) {
            //             $billParentDetails->totalKm += $premodel->extraKM;
            //         }
            //     }
            //     else if ($premodel->extraKM < 50 && $oldExtraKM >= 50) {
            //         $updatedExtraKM = -$oldExtraKM;
                    
            //         // Here addition or subtraction will happen depends on $oldExtraKM value
            //         $billDetails->totalKm += $updatedExtraKM;

            //         if (!empty($billParentDetails)) {
            //             $billParentDetails->totalKm += $updatedExtraKM;
            //         }
            //     }
            //     else if ($premodel->extraKM >= 50 && $oldExtraKM >= 50) {
            //         $updatedExtraKM = trim($premodel->extraKM) - trim($oldExtraKM);

            //         // Here addition or subtraction will happen depends on $oldExtraKM value
            //         $billDetails->totalKm += $updatedExtraKM;

            //         if (!empty($billParentDetails)) {
            //             $billParentDetails->totalKm += $updatedExtraKM;
            //         }
            //     }
            // }
            // else {
            // }
            $updatedExtraKM = trim($premodel->extraKM) - trim($oldExtraKM);

            // Here addition or subtraction will happen depends on $oldExtraKM value
            $billDetails->totalKm += $updatedExtraKM;

            if (!empty($billParentDetails)) {
                $billParentDetails->totalKm += $updatedExtraKM;
            }

        }

        // If completedSurveyDateTime or IntimationDate month is changed
        else if ( !empty($premodel->billId) && $premodel->billId != 0 
            && ( date('m-Y', strtotime($premodel->completedSurveyDateTime)) != date('m-Y', strtotime($oldCompletedSurveyDateTime)) ) ) {
                
            // Remove the case from billing
            
            $billingRow = AxionPreinspectionBilling::findOne(['id' => $premodel->billId]);
            $billDetails = json_decode($billingRow->billDetails);

            if (!empty($billingRow->parentId)) {
                $billingParentRow = AxionPreinspectionBilling::findOne(['id' => $billingRow->parentId]);
                $billParentDetails = json_decode($billingParentRow->billDetails);
            }

            switch ($vehicleModel->vType) {
                case '4-WHEELER':
                    $billDetails->total4W -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->total4W -= 1;
                    }
                    break;
             /* case '3-WHEELER':
                    $billDetails->total3W -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->total3W -= 1;
                    }
                    break;
                case '2-WHEELER':
                    $billDetails->total2W -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->total2W -= 1;
                    }
                    break; */
                case 'COMMERCIAL':
                    $billDetails->totalCW -= 1;
                    if (!empty($billParentDetails)) {
                        $billParentDetails->totalCW -= 1;
                    }
                    break;   
            }

            if (trim($oldExtraKM) > 0) {
                $billDetails->totalKm -= trim($oldExtraKM);
                if (!empty($billParentDetails)) {
                    $billParentDetails->totalKm -= trim($oldExtraKM);
                }
            } 

            $premodel->billId = 0;
            $premodel->billStatus = '';

            if ($billingRow) {
                $billingRow->billDetails = json_encode($billDetails);
                $billingRow->save();
    
                if (!empty($billParentDetails)) {
                    $billingParentRow->billDetails = json_encode($billParentDetails);
                    $billingParentRow->save();
                }
                $premodel->save();

                /*** If completedSurveyDateTime or IntimationDate is match 
                 * any other billing month, the case will be assigned to that billing month ***/

                $billingRow = $billingParentRow = '';
                
                $user = Yii::$app->db->createCommand("SELECT * 
                                                FROM `users` LEFT JOIN `auth_assignment` 
                                                ON auth_assignment.user_id = id 
                                                WHERE `id`=".$premodel->updatedBy)->queryOne();

                $user = json_decode(json_encode($user), false);
                
                if ($user->item_name != 'BO User' && $user->item_name != 'Superadmin') {
                    $user = User::findOne($user->roId);
                }
                
                // For TATA AIG
                // if ($premodel->insurerName == 5) {
                //     $billingRow = AxionPreinspectionBilling::find()->where(['companyId' => $premodel->insurerName])
                //             ->andWhere(['stateId' => $user->stateId])
                //             ->andWhere(['<=', 'billPeriodFrom', date('Y-m-d', strtotime($premodel->intimationDate))])
                //             ->andWhere(['>=', 'billPeriodTo', date('Y-m-d', strtotime($premodel->intimationDate))])
                //             ->andWhere(['<=', 'billPeriodFrom', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])
                //             ->andWhere(['>=', 'DATE_ADD(`billPeriodTo`, INTERVAL 5 DAY)', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])->one();

                // }
                // else {
                    $billingRow = AxionPreinspectionBilling::find()->where(['companyId' => $premodel->insurerName])
                            ->andWhere(['stateId' => $user->stateId])
                            ->andWhere(['<=', 'billPeriodFrom', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])
                            ->andWhere(['>=', 'billPeriodTo', date('Y-m-d', strtotime($premodel->completedSurveyDateTime))])->one();
                // }
                
                //echo $billingRow->createCommand()->getRawSql();exit;
                if ($billingRow) {
                    $billDetails = json_decode($billingRow->billDetails);

                    if (!empty($billingRow->parentId)) {
                        $billingParentRow = AxionPreinspectionBilling::findOne(['id' => $billingRow->parentId]);
                        $billParentDetails = json_decode($billingParentRow->billDetails);
                    }

                    switch ($vehicleModel->vType) {
                        case '4-WHEELER':
                            $billDetails->total4W += 1;
                            if (!empty($billParentDetails)) {
                                $billParentDetails->total4W += 1;
                            }
                            break;
                    /* case '3-WHEELER':
                            $billDetails->total3W += 1;
                            if (!empty($billParentDetails)) {
                                $billParentDetails->total3W += 1;
                            }
                            break;
                        case '2-WHEELER':
                            $billDetails->total2W += 1;
                            if (!empty($billParentDetails)) {
                                $billParentDetails->total2W += 1;
                            } 
                            break; */
                        case 'COMMERCIAL':
                            $billDetails->totalCW += 1;
                            if (!empty($billParentDetails)) {
                                $billParentDetails->totalCW += 1;
                            }
                            break;   
                    }

                    // For Royal sundaram KM will be claculated only it is > 50
                    // if ( ($premodel->insurerName != 10 && trim($premodel->extraKM) > 0) 
                    //     || ($premodel->insurerName == 10 && trim($premodel->extraKM) >= 50) ) {

                    //     $billDetails->totalKm += trim($premodel->extraKM);
                    //     if (!empty($billParentDetails)) {
                    //         $billParentDetails->totalKm += trim($premodel->extraKM);
                    //     }
                    // } 

                    $premodel->billId = $billingRow->id;
                    $premodel->billStatus = 'Initiated';
                }

            }

        }

        // Saving the details
        if ($billingRow) {
            $billingRow->billDetails = json_encode($billDetails);
            $billingRow->save();

            if (!empty($billParentDetails)) {
                $billingParentRow->billDetails = json_encode($billParentDetails);
                $billingParentRow->save();
            }
            $premodel->save();
        }
    } 

    public function actionConveyanceApprovalUpload($id="") {
        $id = ($_POST['id'])?$_POST['id']:$id;
        $premodel = AxionPreinspection::findOne(['id' => $id]);

        $image = UploadedFile::getInstance($premodel, 'conveyanceApprovalImg');

        $premodel->conveyanceApprovalImg = $id . '-conveyanceApprovalImg-'. Yii::$app->security->generateRandomString() . '.' . $image->extension;
        $inputFile = 'conveyance_images/'.$premodel->conveyanceApprovalImg;
        $image->saveAs($inputFile);
        S3Helper::upload($inputFile, $inputFile);
        $premodel->save();

        unlink($inputFile);

        $s3BaseUrl = 'https://'.\Yii::$app->params['s3Bucket'].'.s3.'.\Yii::$app->params['s3Region'].'.amazonaws.com/';
        $imgUrl = $s3BaseUrl.$inputFile;
        $json = array(
            'initialPreview' => [
                $imgUrl ? $imgUrl : null, 
            ], 
            'initialPreviewConfig' => [
                [ 
                    'caption' => $premodel->conveyanceApprovalImg,
                    'size' => '',
                    'url'=> Url::to(['/axion-preinspection/conveyance-approval-remove']),
                    'key'=> $id,
                ],

            ],
            
        );

        if ($_POST['id'])
            return json_encode( $json );
        else
            return $premodel->conveyanceApprovalImg;
    }

    public function actionConveyanceApprovalRemove() {
        $model = AxionPreinspection::findOne($_POST['key']);
        $filename = getcwd().'/conveyance_images/'.$model->conveyanceApprovalImg;
        S3Helper::delete('/conveyance_images/'.$model->conveyanceApprovalImg);
        if (file_exists($filename))
        {
            if (unlink($filename))
            {
                $model->conveyanceApprovalImg = '';
            }
        }
        else
        {
            $model->conveyanceApprovalImg = '';
        }
        $model->save();
        return 1;
    }

    protected function sendNotification($data){

        if($data){
    // $data_string = json_encode($data);                                                                                   

            $ch = curl_init();
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_URL, 'http://tataaiguat.vahancheck.com/VCWebAPI/api/ExternalAgencyReport/Post');
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
            curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: multipart/form-data' ,'Authorization: Basic PuwoFFOP+Zr2wtaTjv9KnQ=='));
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            $result = curl_exec($ch);
            curl_close($ch);
    // print_r($result);
    // print_r($data);
        }

        return '{"error": "Invalid request parameters"}';
    } 


    public function actionVehicleqcpdf($id) {

        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;

        $premodel = AxionPreinspection::findOne($id); 

        $RoUser = AxionPreinspectionSearch::getRoFromCaseID($id);

        // Checks whether the RO is not SuperAdmin
        if ($RoUser != 16) 
            $RoUser = User::findOne(['id' => $RoUser]);

        $model = AxionPreinspectionVehicle::findOne(['preinspection_id' => $id]);
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        $twowheelermodel = AxionPreinspectionTwowheeler::findOne(['preinspection_id' => $id]);
        $fwheelermodel = AxionPreinspectionFwheeler::findOne(['preinspection_id' => $id]);
        $commercialwheelermodel = AxionPreinspectionCommercialwheeler::findOne(['preinspection_id' => $id]);


        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();

        //getting suryeyor details
        $valuatorModel = User::findOne($premodel->surveyorName);        
        if($valuatorModel)
            $surveyor_name =  $valuatorModel->firstName;
        else
            $surveyor_name = '';  

        //Master Caller Data 
        $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
        if($callerModel)
            $callerModel = false; 

        $qcLoc = \Yii::$app->params['qcLoc'];
        // $clientName = '';
        // if($premodel->insurerName == 9 || $premodel->insurerName == 15 || $premodel->insurerName == 22 || $premodel->insurerName == 23 || $premodel->insurerName == 24)
        // {
        // }else{
        //     $clientName = \Yii::$app->params['clientName'];
        // }
        $clientName = \Yii::$app->params['siatraclientName'];
        
        $pdf = new Pdf([
            'mode' => Pdf::MODE_CORE, // leaner size using standard fonts
            //'format' => [200, 320],
            // 'compress' => true,
            // 'compressOptions' => [
            //     'CompressionLevel' => 9,
            // ],
            'filename' => $premodel->referenceNo.'.pdf',
            'content' => $this->renderPartial('vehicleqcpdf',[
                'premodel' => $premodel,
                'role'=>$role,
                'RoUser'=>$RoUser,
                'model' => $model,
                'phmodel' => $phmodel,
                'valuator' => $valuator,
                'callerModel' => $callerModel,
                'qcLoc' => $qcLoc,
                'surveyor_name' => $surveyor_name,
                'twowheelermodel' => $twowheelermodel,
                'fwheelermodel' => $fwheelermodel,
                'commercialwheelermodel' => $commercialwheelermodel,
                'AP_RO_Case_Checker' => $AP_RO_Case_Checker
            ]),
            'marginLeft' => 5,
            'marginRight' => 5,
            'options' => [
                'title' => $clientName,
                'subject' => 'Inspection Report'
            ],
            'methods' => [
                'SetHeader' => [$clientName.'||Inspection Report'],
                'SetFooter' => ['|Page {PAGENO}|'],
            ]
        ]);
        $pdf->cssInline = '.tftable {font-size:10px;;width:100%;border-width: 1px;border-collapse: collapse;}
            .tftable th {font-size:10px;border-width: 1px;padding: 8px;border-style: solid;text-align:left;}
            .tftable td {font-size:10px;border-width: 1px;padding: 4px;border-style: solid; font-weight:bold;}
            .topbox{height:80px;background-color:#337ab7;font-weight:bold}
            .topbox table{color:#fff;}
            .box1{ border:1mm solid  #666666;
            border-radius: 3mm / 3mm;
            background-clip: border-box;
            padding: 1em;}
            .declarationbox{font-size:9px;}        
            .midtitle{text-align:center;margin-top: 5px;font-weight:bold}
            .spacebox{height:15px;}
            .imgdiv{float:left;width:50%;height:300px;}
            .img{margin:10px;height:280px;}';
        //$pdf->fileName=
        return $pdf->render();
    }

    protected function saveVehicleqcpdf($id) {

        $premodel = AxionPreinspection::findOne($id); 
        $model = AxionPreinspectionVehicle::findOne(['preinspection_id' => $id]);
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        $twowheelermodel = AxionPreinspectionTwowheeler::findOne(['preinspection_id' => $id]);
        $fwheelermodel = AxionPreinspectionFwheeler::findOne(['preinspection_id' => $id]);
        $commercialwheelermodel = AxionPreinspectionCommercialwheeler::findOne(['preinspection_id' => $id]);

        $RoUser = AxionPreinspectionSearch::getRoFromCaseID($id);

        // Checks whether the RO is not SuperAdmin
        if ($RoUser != 16) 
            $RoUser = User::findOne(['id' => $RoUser]);

        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();

        //getting suryeyor details
        $valuatorModel = User::findOne($premodel->surveyorName);        
        if($valuatorModel)
            $surveyor_name =  $valuatorModel->firstName;
        else
            $surveyor_name = '';  

        //Master Caller Data 
        $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
        if($callerModel)
            $callerModel = false; 

        $qcLoc = \Yii::$app->params['qcLoc'];
        $clientName = \Yii::$app->params['clientName'];

        $pdf = new Pdf([
            'mode' => Pdf::MODE_CORE, // leaner size using standard fonts
            'filename' => $premodel->referenceNo,
            'content' => $this->renderPartial('vehicleqcpdf',[
                'premodel' => $premodel,
                'model' => $model,
                'phmodel' => $phmodel,
                'valuator' => $valuator,
                'RoUser' => $RoUser,
                'callerModel' => $callerModel,
                'qcLoc' => $qcLoc,
                'surveyor_name' => $surveyor_name, 
                'twowheelermodel' => $twowheelermodel,
                'fwheelermodel' => $fwheelermodel,
                'commercialwheelermodel' => $commercialwheelermodel,
            ]),
            'marginLeft' => 5,
            'marginRight' => 5,
            'options' => [
                'title' => $clientName,
                'subject' => 'Inspection Report'
            ],
            'methods' => [
                'SetHeader' => [$clientName.'||Inspection Report'],
                'SetFooter' => ['|Page {PAGENO}|'],
            ]
        ]);
        $pdf->cssInline = '.tftable {font-size:10px;;width:100%;border-width: 1px;border-collapse: collapse;}
            .tftable th {font-size:10px;border-width: 1px;padding: 8px;border-style: solid;text-align:left;}
            .tftable td {font-size:10px;border-width: 1px;padding: 4px;border-style: solid; font-weight:bold;}
            .topbox{height:80px;background-color:#337ab7;font-weight:bold}
            .topbox table{color:#fff;}
            .box1{ border:1mm solid  #666666;
            border-radius: 3mm / 3mm;
            background-clip: border-box;
            padding: 1em;}
            .declarationbox{font-size:9px;}        
            .midtitle{text-align:center;margin-top: 5px;font-weight:bold}
            .spacebox{height:15px;}
            .imgdiv{float:left;width:50%;height:300px;}
            .img{margin:10px;height:280px;}';

        $content = $pdf->content;
        $s3FileLocation = 'api-uploads/pdf/'.$id.'.pdf';
        $file = getcwd().'/api-uploads/pdf/'.$id.'.pdf';

        $path = $pdf->Output($content,$file,\Mpdf\Output\Destination::FILE);
        $result = S3Helper::upload($file, $s3FileLocation);

        if ($result['status'])
        {
            //unlink($file);
        }
        clearstatcache();
        return $result['data']['url'];        
        // $fd = fopen('/output/qcLoc/'.$id.'.pdf', 'wb');
        // $client->convertURI("http://example.com", $fd);
        // fclose($fd);

        return true;

    }


    /*

    public function actionCommercialqc($id)
    {
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        if($role == 'Customer' && Yii::$app->user->identity->companyId != $id)
        {
            $this->goBack();
        }
        
        $premodel = AxionPreinspection::findOne($id);

        $completedSurveyDateTime = $premodel->completedSurveyDateTime;
        $customerAppointDateTime = $premodel->customerAppointDateTime;
        
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        if(count($phmodel) == 0)
        {
            $this->updateQc($premodel, 'insert');
            $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        }
        $model = AxionPreinspectionCommercial::findOne(['preinspection_id' => $id]);
        

        
        $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();
        //Master Caller Data 
         $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
         if($callerModel)
         $callerModel = false; 
         
        $company = PreinspectionClientCompany::find()
                    ->where(['id' => $premodel->insurerName])
                    ->all();

        $caller = User::find()
                ->where(['id' => $premodel->callerName])
                ->all();
             
        $qcLoc = \Yii::$app->params['qcLoc'];
        
        $customerSession = User::find()
        ->where(['mobile' => $premodel->insuredMobile])
        ->count();
         
         if (Yii::$app->request->post('create_session')==='create_session') {
           $this->createCustomerSession($premodel->id);
           return $this->redirect(array('commercialqc', 'id' => $id));
        } 
        else if($premodel->load(Yii::$app->request->post()) && $model->load(Yii::$app->request->post())) {
            
            //$premodel->completedSurveyDateTime = $completedSurveyDateTime;
            $premodel->customerAppointDateTime = $customerAppointDateTime;
            //Updating Preinspection details
            $premodel->save();
            
            //Updating QC details
            $model->save();
            
            foreach($phmodel as $obj)
            {
                if($obj->image)
                $lastImage = $obj->image;
                else
                $lastImage = '';
                
                if($obj->load(Yii::$app->request->post()))
                {
                   $this->saveImageObjbrowse($obj, $id, $lastImage); 
                }
            }

            return $this->redirect(array('commercialqc', 'id' => $id));
            
        } else {
            return $this->render('commercialqc', [
                'premodel' => $premodel,
                'model' => $model,
                'phmodel' => $phmodel,
                'valuator' => $valuator,
                'callerModel' => $callerModel,
                'qcLoc' => $qcLoc,
                'role' => $role,
                'company' => $company,
                'caller' => $caller,
                'customerSession' => $customerSession,
            ]);
        }
    }

    
    public function actionCommercialpdf($id) {
        
            $premodel = AxionPreinspection::findOne($id); 
            $model = AxionPreinspectionCommercial::findOne(['preinspection_id' => $id]);
            $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);

            $valuator = User::find()
                    ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                    ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    ->orderBy('firstName ASC')
                    ->all();

            //getting suryeyor details
            $valuatorModel = User::findOne($premodel->surveyorName);
            if($valuatorModel)
            $surveyor_name =  $valuatorModel->firstName;
            else
            $surveyor_name = '';    

            //Master Caller Data 
             $callerModel= PreinspectionClientCaller::findOne(['callerMobileNo' => $premodel->callerMobileNo]);
             if($callerModel)
             $callerModel = false; 

            $qcLoc = \Yii::$app->params['qcLoc'];
            $clientName = \Yii::$app->params['clientName'];

            $pdf = new Pdf([
            'mode' => Pdf::MODE_CORE, // leaner size using standard fonts
            'filename' => $premodel->referenceNo,
            'content' => $this->renderPartial('commercialqcpdf',[
                    'premodel' => $premodel,
                    'model' => $model,
                    'phmodel' => $phmodel,
                    'valuator' => $valuator,
                    'callerModel' => $callerModel,
                    'qcLoc' => $qcLoc,
                    'surveyor_name' => $surveyor_name, 
                ]),
            'marginLeft' => 5,
            'marginRight' => 5,
            'options' => [
                'title' => $clientName,
                'subject' => 'Inspection Report'
            ],
            'methods' => [
                'SetHeader' => [$clientName.'||Inspection Report'],
                'SetFooter' => ['|Page {PAGENO}|'],
            ]
        ]);
        $pdf->cssInline = '.tftable {font-size:10px;;width:100%;border-width: 1px;border-collapse: collapse;}
    .tftable th {font-size:10px;border-width: 1px;padding: 8px;border-style: solid;text-align:left;}
    .tftable td {font-size:10px;border-width: 1px;padding: 4px;border-style: solid; font-weight:bold;}
    .topbox{height:80px;background-color:#337ab7;font-weight:bold}
    .topbox table{color:#fff;}
    .box1{ border:1mm solid #666666;
            border-radius: 3mm / 3mm;
            background-clip: border-box;
            padding: 1em;}
    .declarationbox{font-size:9px;}        
    .midtitle{text-align:center;margin-top: 5px;font-weight:bold}
    .spacebox{height:15px;}
    .imgdiv{float:left;width:50%;height:300px;}
    .img{margin:10px;height:280px;}';
        return $pdf->render();
    }

    */

    /**
     * Displays a single Preinspection model.
     * @param integer $id
     * @return mixed
     */
    public function actionView($id)
    {
       $model = AxionPreinspection::findOne($id);       

       if (!$model) {
        // Handle the case when model with given id does not exist
            //$model = Processdata::findOne(1);
       }

       return $this->renderAjax('view', ['model' => $model]);
    }

    public function actionValidation($id) {
        if($id == '')
        {
            $model = new AxionPreinspection();
            $model->scenario='create';
        }
        else {
            $model = $this->findModel($id);
            $model->scenario='update';
        }

        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model);
        }
    }

    public function actionTownlist($id)
    {
        $countPosts = MasterTown::find()
        ->where(['cityId' => $id])
        ->count();

        $townlist = MasterTown::find()
        ->where(['cityId' => $id])
        ->orderBy('town ASC')
        ->all();

        $result="";
        if($countPosts>0){
            $result.="<option value = ''>Select</option>";
            foreach($townlist as $towns){
                $result.="<option value='".$towns->id."'>".$towns->town."</option>";
            }
        }
        else{
            $result.="<option value = ''>Select</option>";
        }
            // echo "<option value = ''>Select</option>";
        $result.= "|&|";

        $countsurveyorpost = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->andFilterWhere(['cityId' => $id])
        ->count();

        $surveyor_list = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->andFilterWhere(['cityId' => $id])
        ->orderBy('firstName ASC')
        ->all();

        if($countsurveyorpost>0){

            /*
            if($countPosts ==1)
            {
                 foreach($posts as $post){
                    echo "<option value='".$post->id."'>".$post->firstName."</option>";
                }
                echo "<option value = ''>All</option>";
            }
            else
            {
                echo "<option value = ''>Select</option>";
                foreach($posts as $post){
                    echo "<option value='".$post->id."'>".$post->firstName."</option>";
                }
                echo "<option value = ''>All</option>";
            }
             * 
             */
            $result.= "<option value = ''>Select</option>";
            $result.= "<option value = '0'>Self Inspection</option>";
            foreach($surveyor_list as $list)
            {
                $result.= "<option value='".$list->id."'>".$list->firstName."</option>";
            }
            $result.= "<option value = ''>All</option>";

        }
        else{

            $result.= "<option value = ''>Select</option>";
            $result.= "<option value = '0'>Self Inspection</option>";
            $result.= "<option value = ''>All</option>";
        }
        return $result;
    }
    
    public function actionGetsurveyors($id,$modalid){
        // return $id.' !! '.$modalid;
        $preinspectionModal = AxionPreinspection::findOne(['id'=>$modalid]);
        $role = array_keys(Yii::$app->authManager->getRolesByUser($preinspectionModal->userId))[0];
        $result = '';
        // return $role;
        if($role == 'Branch Executive'){
            $getro = User::findOne(['id'=>$preinspectionModal->userId]);
            $roId = $getro->roId;
        }elseif($role == 'BO User'){
            $roId = $preinspectionModal->userId;
        }
        // return 'roId - '.$role.'!!'.$roId.' UserID - '.$preinspectionModal->userId;
        if($roId != null){
            $surveyor_list = User::find()
            ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
            ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
            ->andFilterWhere(['roId' => $roId])
            ->orderBy('firstName ASC')
            ->all();
            $result.= "<option value = ''>Select</option>";
            $result.= "<option value = '0'>Self Inspection</option>";
            foreach($surveyor_list as $list)
            {
                $result.= "<option value='".$list->id."'>".$list->firstName."</option>";
            }
            $result.= "<option value = ''>All</option>";
        }else{
            $result.= "<option value = ''>Select</option>";
            $result.= "<option value = '0'>Self Inspection</option>";
            $result.= "<option value = ''>All</option>";
        }
        return $result;
    }

    public function actionSurveyorall($id)
    {
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $current_user = Yii::$app->user->identity->id;
        
        if($id == '')
        {
            if($role=='Superadmin')
            {
                $countPosts = User::find()
                ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                            // ->andFilterWhere(['users.roId' => $current_user])
                ->count();

                $posts = User::find()
                ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                    // ->andFilterWhere(['users.roId' => $current_user])
                ->orderBy('lastName ASC')
                ->all();
            }
            else
            {
                $countPosts = User::find()
                ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                ->andFilterWhere(['users.roId' => $current_user])
                ->count();

                $posts = User::find()
                ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
                ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
                ->andFilterWhere(['users.roId' => $current_user])
                ->orderBy('lastName ASC')
                ->all();
            }
            

            $options = '';        

            if($countPosts>0){

                $options .= "<option value = ''>All</option>";
                $options .= "<option value = '0'>Self Inspection</option>";
                foreach($posts as $post){
                    $options .= "<option value='".$post->id."'>".$post->firstName."</option>";
                }
            }
            else{
                $options .= "<option value = '0'>Self Inspection</option>";
                $options .= "<option value = ''>All</option>";
            }

            return $options;
        }
        else {

            return "noload";
        }
    }
    
    public function actionKmsvalue($id,$cid)
    {
        if($id != '' && $cid != '')
        {
            $countPosts = MasterLocation::find()
            ->where(['cityId' => $cid])
            ->andFilterWhere(['townId' => $id])
            ->count();

            $posts = MasterLocation::find()
            ->where(['cityId' => $cid])
            ->andFilterWhere(['townId' => $id])
            ->all();

            if($countPosts>0){
                foreach($posts as $post){     
                    return $post->extraKms;
                }
            }
            else{
                return "";
            }
        }
        else
        {
            return "";
        }
    }
    
    protected function updateFieldexecutivesTask($processModel,$updateType)
    {
        //inserting record
        if($updateType == 'insert')
        {
            $countPosts = FieldexecutivesTasks::find()
            ->where(['processId' => $processModel->id])
            ->count();
            
            if($countPosts > 0)
            {
                FieldexecutivesTasks::deleteAll(['processId' => $processModel->id]);
            }

            $model = new FieldexecutivesTasks();
            $model->processId = $processModel->id;
            $model->processNo = $processModel->referenceNo;
            $model->companyName = $processModel->insurerName;
            $model->location = $processModel->surveyLocation;
            $model->customerAppointmentDateTime = $processModel->customerAppointDateTime;
            $model->fieldexecutiveId = $processModel->surveyorName;
            $model->processType = 'PI';
            $model->requestDateTime = $processModel->intimationDate;
            $model->vehicleNumber = $processModel->registrationNo;
            if($processModel->status == 12)
            {
                $status = 'SCHEDULE';
            }
            else if($processModel->status == 1)
            {
                $status = 'RE-SCHEDULE';
            }
            else if($processModel->status == 8)
            {
                $status = 'COMPLETED';
            }
            else if($processModel->status == 9)
            {
                $status = 'CANCELLED';
            }
            else { $status = '';}
            $model->status = $status;
            $model->save();

        }
        
        //deleting record
        if($updateType == 'delete')
        {
            FieldexecutivesTasks::deleteAll(['processId' => $processModel->id]);
        }
    }

    protected function insertQcImageRecord($preinspectionId,$type)
    {
        $phmodel = new AxionPreinspectionPhotos();
        $phmodel->preinspection_id = $preinspectionId;
        $phmodel->type = $type;
        $phmodel->save();
    }

    protected function updateQc($preModel,$updateType)
    {
        if($preModel->vehicleType == 'ALL-VEHICLE')
        {
            if($updateType == 'insert')
            {
                $countPosts = AxionPreinspectionVehicle::find()
                ->where(['preinspection_id' => $preModel->id])
                ->count();

                if($countPosts == 0)
                {
                    $model = new AxionPreinspectionVehicle();
                    $model->preinspection_id = $preModel->id;
                    $model->save();

                    $this->insertQcImageRecord($preModel->id, 'chassisThumb');
                    $this->insertQcImageRecord($preModel->id, 'frontViewNumberPlate');
                    $this->insertQcImageRecord($preModel->id, 'enginePhoto');
                    $this->insertQcImageRecord($preModel->id, 'frontBumper');
                    $this->insertQcImageRecord($preModel->id, 'frontLeftCorner45');
                    $this->insertQcImageRecord($preModel->id, 'leftSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'leftQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'rearViewImage');
                    $this->insertQcImageRecord($preModel->id, 'rearBumper');
                    $this->insertQcImageRecord($preModel->id, 'dickyOpenImage');
                    $this->insertQcImageRecord($preModel->id, 'cngLpgKit');
                    $this->insertQcImageRecord($preModel->id, 'underChassis');
                    $this->insertQcImageRecord($preModel->id, 'rightQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'rightSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'frontRightCorner45');
                    $this->insertQcImageRecord($preModel->id, 'chassisPlate');
                    $this->insertQcImageRecord($preModel->id, 'dashBoardPhoto');
                    $this->insertQcImageRecord($preModel->id, 'odometerReading');
                    $this->insertQcImageRecord($preModel->id, 'odometerWithRPMReading');
                    $this->insertQcImageRecord($preModel->id, 'closeupViewOfOdometerReading'); 
                    $this->insertQcImageRecord($preModel->id, 'frontWindshieldFromOutside');
                    //$this->insertQcImageRecord($preModel->id, 'InteriorViewOfWinshieldGlass');
                    //$this->insertQcImageRecord($preModel->id, 'FrontWindshieldGlassCloseUpImage');
                    //$this->insertQcImageRecord($preModel->id, 'CloseViewOfOdometer');
                    //$this->insertQcImageRecord($preModel->id, 'RPMReading');
                    $this->insertQcImageRecord($preModel->id, 'rcCopy');
                    //$this->insertQcImageRecord($preModel->id, 'rcImageFront');
                    $this->insertQcImageRecord($preModel->id, 'rcImageBack');                   
                    $this->insertQcImageRecord($preModel->id, 'preInsuranceCopy');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage1');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage2');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage3');

                    //$this->insertQcImageRecord($preModel->id, 'BO-Others-1');
                    //$this->insertQcImageRecord($preModel->id, 'BO-Others-2');
                    //$this->insertQcImageRecord($preModel->id, 'BO-Others-3');
                    //$this->insertQcImageRecord($preModel->id, 'BO-Others-4');
                    $this->insertQcImageRecord($preModel->id, 'vehicleVideo');   
                }

                if($preModel->completedSurveyDateTime == 'NULL')
                {
                    alert('please give completedSurveyDateTime');
                }

            }
                //deleting record
            if($updateType == 'delete')
            {
                AxionPreinspectionVehicle::deleteAll(['preinspection_id' => $preModel->id]);
                AxionPreinspectionPhotos::deleteAll(['preinspection_id' => $preModel->id]);
            }
        }

        /*
        if($preModel->vehicleType == 'COMMERCIAL')
        {
            if($updateType == 'insert')
            {
                $countPosts = AxionPreinspectionCommercial::find()
                        ->where(['preinspection_id' => $preModel->id])
                        ->count();

                if($countPosts == 0)
                {
                    $model = new AxionPreinspectionCommercial();
                    $model->preinspection_id = $preModel->id;
                    $model->save();
                    
                    $this->insertQcImageRecord($preModel->id, 'chassisThumb');
                    $this->insertQcImageRecord($preModel->id, 'frontViewNumberPlate');
                    $this->insertQcImageRecord($preModel->id, 'rearViewImage');
                    $this->insertQcImageRecord($preModel->id, 'frontBumper');
                    $this->insertQcImageRecord($preModel->id, 'rearBumper');
                    $this->insertQcImageRecord($preModel->id, 'frontLeftCorner45');
                    $this->insertQcImageRecord($preModel->id, 'frontRightCorner45');
                    $this->insertQcImageRecord($preModel->id, 'leftSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'rightSideFullView');
                    $this->insertQcImageRecord($preModel->id, 'leftQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'rightQtrPanel');
                    $this->insertQcImageRecord($preModel->id, 'enginePhoto');
                    $this->insertQcImageRecord($preModel->id, 'chassisPlate');
                    $this->insertQcImageRecord($preModel->id, 'dickyOpenImage');
                    $this->insertQcImageRecord($preModel->id, 'underChassis');
                    $this->insertQcImageRecord($preModel->id, 'dashBoardPhoto');
                    $this->insertQcImageRecord($preModel->id, 'odometerReading');
                    $this->insertQcImageRecord($preModel->id, 'cngLpgKit');
                    $this->insertQcImageRecord($preModel->id, 'rcCopy');
                    $this->insertQcImageRecord($preModel->id, 'preInsuranceCopy');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage1');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage2');
                    $this->insertQcImageRecord($preModel->id, 'dentsScratchImage3');
                }

            }
            //deleting record
            if($updateType == 'delete')
            {
                AxionPreinspectionCommercial::deleteAll(['preinspection_id' => $preModel->id]);
                AxionPreinspectionPhotos::deleteAll(['preinspection_id' => $preModel->id]);
            }
        }
        
        */
            
    }
    
    protected function createDropboxFolder($fileDate,$valuatorName,$vehicleNumber)
    {
        $dropboxImageLoc = \Yii::$app->params['dropboxImageLoc'];
        $fileDate = date('d-m-Y',strtotime($fileDate));
        $path = $dropboxImageLoc.'/PI/'.$fileDate.'/'.$valuatorName.'/'.$vehicleNumber;
        FileHelper::createDirectory($path);
    }
    
    
    protected function createCustomerSession($id)
    {

        $model = AxionPreinspection::findOne($id);
        /* $countPosts = User::find()
        ->andFilterWhere(['mobile' => $model->insuredMobile])
        ->count();

        if($countPosts>0){
            $delUser = User::findOne(['mobile' => $model->insuredMobile]);
            if($delUser)
            {
                $auth = new DbManager;
                $auth->init();
                if($auth->revokeAll($delUser->id))
                {
                    $delUser->delete();
                }
            }
        }

        $cmodel = new User();
        date_default_timezone_set('Asia/Kolkata');
        $currentDateTime = date('Y-m-d H:i:s');
        $cmodel->createdOn = $currentDateTime;
        $cmodel->email = $model->insuredMobile.'@pcs.in';
        $cmodel->password = $model->insuredMobile;
        $cmodel->password_repeat = $model->insuredMobile;
        $cmodel->mobile = $model->insuredMobile;
        $cmodel->firstName = $model->insuredName;
        $cmodel->companyId = $model->id;
        $cmodel->activationLink = 'Y';
        $cmodel->active = 'Y';
        if($cmodel->save())
        { 
            $auth = new DbManager;
            $auth->init();
            $role = $auth->getRole('Customer');
            $auth->assign($role, $cmodel->id);*/
            
            //Creating Video Session
            /* if($model->ro == '')
            {
                $apiKey = \Yii::$app->params['tokApiKey'];
                $apiSecret = \Yii::$app->params['tokApiSecret'];
                $opentok = new OpenTok($apiKey, $apiSecret);
                $sessionOptions = array(
                    'archiveMode' => ArchiveMode::ALWAYS,
                    'mediaMode' => MediaMode::ROUTED
                );
                $session = $opentok->createSession($sessionOptions);
                $sessionId = $session->getSessionId();
                $model->ro = $sessionId;
                $model->save();
            } */

            if($model->vehicleType == 'ALL-VEHICLE')
            {
                $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/vehicleqc?id='.$model->id.'&page=index');
            }
            else
            {
               $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/commercialqc?id='.$model->id);
            }

            /* $mobileno = $model->insuredMobile;
            $message = 'Dear Customer, Please click the below link to complete your Self Inspection for Vehicle No '.$model->registrationNo.',  Our Reference No'.$model->referenceNo.' Link: '.$link.' by Axion';

            $this->sendSms($mobileno, $message); */

            $customerEmail = $model->contactPersonMobileNo;
            if($customerEmail != '' && !is_numeric($customerEmail))
            {
                $emailSubject = 'Quality Check URL';
                $emailMessage = 'Username:'.$model->insuredMobile.'@pcs.in Password:'.$model->insuredMobile.' Quality Check Url - '.$link.' by Axion';

                $emailPosts = EmailHistory::find()
                ->where('email = :val1 AND subject = :val2 AND message = :val3',['val1' =>$customerEmail,'val2' => $emailSubject,'val3' => $emailMessage])
                ->count();

                if($emailPosts==0){
                    $emailHistory =  new EmailHistory();
                    $emailHistory->email = $customerEmail;
                    $emailHistory->subject = $emailSubject;
                    $emailHistory->message = $emailMessage;
                    $emailHistory->save();
                }
            }
       //}
    }

    /**
     * Creates a new Preinspection model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {

        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $lastStatus = 0;
        $block = 'N';
        $sameId = 'N';
        $callerModel = false;
        
        $model = new AxionPreinspection();
        if($role=='Surveyor')
        {
            $model->scenario='surveyor_role';
        }
        else
        {
            $model->scenario='assigned_role';
        }

        $city = MasterCity::find()
        ->all();        
        $state = MasterState::find()
        ->all();
        $company = PreinspectionClientCompany::find()
        ->all();
        $division = ['id' => '', 'divisionName' => 'Select'];
        $branch = ['id' => '', 'branchName' => 'Select'];
        $caller = ['id' => '', 'firstName' => 'Select'];
        $surveyor_list = null;
        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
            $division = PreinspectionClientDivision::find()
            ->where(['id' => Yii::$app->user->identity->divisionId])
            ->all();
            $branch = PreinspectionClientBranch::find()
            ->where(['id' => Yii::$app->user->identity->branchId])
            ->all();
            $caller = User::find()
            ->where(['id' => Yii::$app->user->identity->id])
            ->all();
        }
        
        $umodel = User::findOne(Yii::$app->user->identity->id);
        
        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {

            date_default_timezone_set('Asia/Kolkata');

            $model->created_on = date('Y-m-d H:i:s');
            $model->intimationDate = date('Y-m-d H:i:s');
            $model->userId = Yii::$app->user->identity->id;
            $model->referenceNo = $this->getReferenceNo();
            if($role=='Surveyor')
            {
                $model->surveyorName=Yii::$app->user->getId();
            }

            if($model->surveyorName)
            {
                $model->surveyorAppointDateTime = date('Y-m-d H:i:s');
            }

            if($model->save())
            {
                if($model->surveyorName != '' && $model->surveyorName == 0 && $model->insuredMobile != '')
                {
                    $mobileno = $model->insuredMobile;
                }
                else if($model->surveyorName != '' && $model->surveyorName != 0)
                {
                    $mobileno = $model->valuatorUser->mobile;
                }

                if ($model->surveyorName != '')
                {
                    if($model->vehicleType == 'ALL-VEHICLE')
                    {
                        $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/vehicleqc?id='.$model->id.'&page=index');
                    }
                    else
                    {
                        $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/commercialqc?id='.$model->id);
                    }

                    $message = 'Dear Customer, Please click the below link to complete your Self Inspection for Vehicle No '.$model->registrationNo.',  Our Reference No'.$model->referenceNo.' Link: '.$link.' by Axion';
                    $this->sendSms($mobileno, $message);
                }

                $twowheelermodel = new AxionPreinspectionTwowheeler();
                $twowheelermodel->preinspection_id = $model->id;
                $twowheelermodel->save();
                $fwheelermodel = new AxionPreinspectionFwheeler();
                $fwheelermodel->preinspection_id = $model->id;
                $fwheelermodel->save();
                $commercialwheelermodel = new AxionPreinspectionCommercialwheeler();
                $commercialwheelermodel->preinspection_id = $model->id;
                $commercialwheelermodel->save();


                    //updating qc
                $this->updateQc($model, 'insert');

                $currentDateTime = date( 'Y-m-d H:i:s');
                $obj = $this->findModel($model->id);
                $hismodel = new AxionPreinspectionHistory();
                $hismodel->attributes = $obj->attributes;
                $hismodel->preinspection_id = $obj->id;
                $hismodel->id = 0;
                $hismodel->created_on = $currentDateTime;
                if (!$hismodel->save()) {
                    $this->log($model->contactPersonMobileNo, json_encode($hismodel->getErrors()));
                }


                function status($pairs,$stats) {
                    foreach ($pairs as $key => $value) {
                        if ($key == $stats) {
                            return ("{$value}");
                        }
                    }
                }
                /*function itgiStatus($pairs,$stats) {
                    foreach ($pairs as $key => $value) {
                        if ($key == $stats) {
                            return ("{$value}");
                        }
                    }
                }*/
                $Status = array(0=>'followupReason',1=>'Intimation Re-Schedule',8=>'Survey Done',9=>'Cancelled',12=>   'Schedule-CustomerAppointment',100=>'Change RO',101=>'PI-Recommended',102=>'PI-Not Recommended',103=>'PI-Inprogress',104=>'PI-Refer to Under Writer');

                //$itgiStatusArr = array(0=>'followupReason',1=>'Intimation Re-Schedule',8=>'Survey Done',9=>'Report Rejected By Underwriter',12=>'Schedule-CustomerAppointment',100=>'Reassignment of Agency',101=>'Report Recommended',102=>'Report Not Recommended',103=>'PI-Inprogress',104=>'Report Referred To Underwriter');

                $image = "Images";
                $refno = $model->contactPersonMobileNo;
                $partner = "Axion";
                $vehicleno = $model->registrationNo;
                $Subject = sprintf("%s,%s,%s,%s,",$image,$partner,$refno,$vehicleno);

                    //$name = PreinspectionClientCompany::findOne(['id' => $id]);
                $division = PreinspectionClientDivision::findOne(['id' => $id]);
                $partnerName = "Axion";
                $partnerCode = "NA";                            
                $piStatus = status($Status,$model->status);
                //$itgiStatus = itgiStatus($itgiStatusArr,$model->status);

                $refno = $model->referenceNo;
                $insurerName = "Go Digit General Insurance Limited";
                $vehicleRegNo = $model->registrationNo;
                $insuredname = $model->insuredName;
                $insuredAddress = $model->insuredAddress;
                $insuredMobile = $model->insuredMobile;
                $agentEmail = $model->callerDetails;
                $customerOccupation =  $model->customerOccupation;
                $residence =  $model->residence;
                $customerAge =  $model->customerAge;
                $numberOfCarsOwned =  $model->numberOfCarsOwned;
                $vehicleParked =  $model->vehicleParked;
                $securityOfVehicle =  $model->securityOfVehicle;
                $relationship = $model->relationship;
                $maintenance  = $model->maintenance;
                $vehicleTimeOfInspection = $model->vehicleTimeOfInspection;
                $updatedContact = $model->updatedContact;
                $insurerRefNo= $model->contactPersonMobileNo;

                $Gmessage = sprintf('"partnerName":"%s", <br/> "piStatus":"%s",<br/> "referenceNo":"%s",<br/>"insurerName": "%s",<br/> "vehicleRegNo":"%s",<br/> "insurerRefNo":"%s",<br/> "insuredName":"%s",<br/> "insuredAddress":"%s",<br/> "insuredMobile":"%s",<br/> "agentEmail":"%s", <br/> <br/> <br/>  <br/> <br/> <br/> "customerOccupation":"%s",<br/> "residence":"%s",<br/> "customerAge":"%s",<br/> "numberOfCarsOwned":"%s",<br/> "vehicleParked":"%s",<br/> "securityOfVehicle":"%s",<br/> "relationship":"%s",<br/> "maintenance":"%s",<br/> "vehicleTimeOfInspection":"%s",<br/> "updatedContact":"%s"',$partnerName,$piStatus,$refno,$insurerName,$vehicleRegNo,$insurerRefNo,$insuredname,$insuredAddress,$insuredMobile,$agentEmail,$customerOccupation,$residence,$customerAge,$numberOfCarsOwned,$vehicleParked,$securityOfVehicle,$relationship,$maintenance,$vehicleTimeOfInspection,$updatedContact);

                    //$upload=sprintf('C:/xampp/htdocs/taig-wb/images/',$Image);
                $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$Gmessage]);

                // $attachment = array("chassisThumb"=>"chp.jpg","rcCopy"=>"rcb1.jpg","preInsuranceCopy"=>"rcb2.jpg","cngLpgKit"=>"cng.jpg","rightSideFullView"=>"rs.jpg","rearViewImage"=>"bs.jpg","enginePhoto"=>"ecr.jpg","dashBoardPhoto"=>"dbd.jpg","frontLeftCorner45"=>"flc.jpg","leftSideFullView"=>"ls.jpg","leftQtrPanel"=>"blc.jpg","rightQtrPanel"=>"brc.jpg","frontRightCorner45"=>"frc.jpg","frontViewNumberPlate"=>"ws.jpg","frontViewNumberPlate"=>"fs.jpg","vehicleVideo"=>"video.mp4");


                
                // if($model->insurerName == 7)
                // {
                // $pdfFile = getcwd().'/api-uploads/pdf/'.$id.'.pdf';
                // if($smailer)
                //    $smailer->setFrom('inspection.request@axionpcs.in')
                //    ->setTo("manual.PI@godigit.com") //manual.PI@godigit.com mythili.gopi@axionpcs.in
                //    ->setSubject($Subject);
                //    if (file_exists($pdfFile))  
                //    {
                //        $smailer->attach($pdfFile, ['fileName' =>'report_pdf.pdf','contentType'
                //        => 'text/pdf']);
                //    }
                //    foreach($attachment as $file => $x_value) {
                //        $upload = AxionPreinspectionPhotos::findOne(['preinspection_id' => $id,'type' => $file]);
                //        if(isset($upload) and isset($upload -> image) and strlen($upload -> image) > 0)
                //        {
                //            $Image = sprintf('./qcphotos/%s',$upload->image);  
                //         if($file == 'vehicleVideo'){
                //             $smailer->attach($Image, ['fileName' => $x_value,'contentType' => 'video/mp4']);
                //         }else{

                //            $smailer->attach($Image, ['fileName' => $x_value,'contentType' => 'image/jpeg']);
                //            }
                //            }
                //    }
                //    // attach file from local file system
                //   $smailer->send();
                //    //Mail Sent Successfully../qcphotos/22-chassis
                // }

                if($role == 'Commonuser'){
                    return $this->redirect(['vehicleqc', 'id' => $model->id]);
                }

                return "Updated Successfully";
            }
             //return $this->redirect(['/']);
        } 
        else {
            return $this->renderAjax('create', [
                'model' => $model,
                'city' => $city,
                'state' => $state,
                'lastStatus' => $lastStatus,
                'block' => $block,
                'sameId' => $sameId,
                'callerModel' => $callerModel,
                'company'=> $company,
                'umodel'=> $umodel,
                'role' => $role,
                'division' => $division,
                'branch' => $branch,
                'caller' => $caller,
                'surveyor_list' => $surveyor_list,
            ]);
        }
    }
    
    public function actionCreateRequest()
    {

        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;

        $lastStatus = 0;
        $block = 'N';
        $sameId = 'N';
        $callerModel = false;
        
        $model = new AxionPreinspection();
        if($role=='Surveyor')
        {
            $model->scenario='surveyor_role';
        }
        else if($role=='Branch Executive')
        {
            $model->scenario='bexe_role';
        }
        else if ($role=='Superadmin') 
        {
            $model->scenario='assigned_role';
        }else{
            $model->scenario='create';
        }
        
        $state=MasterState::find()->all();

        $city = MasterCity::find()
        ->all();
        $company = PreinspectionClientCompany::find()
        ->all();
        $division = ['id' => '', 'divisionName' => 'Select'];
        $branch = ['id' => '', 'branchName' => 'Select'];
        $caller = ['id' => '', 'firstName' => 'Select'];
        $surveyor_list = null;
        if($role == 'Branch Head' || $role == 'Branch Executive' || $role == 'Veyes UAT')
        {

            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
            $division = PreinspectionClientDivision::find()
            ->where(['id' => Yii::$app->user->identity->divisionId])
            ->all();
            $branch = PreinspectionClientBranch::find()
            ->where(['id' => Yii::$app->user->identity->branchId])
            ->all();
            $caller = User::find()
            ->where(['id' => Yii::$app->user->identity->id])
            ->all();
        }
        
        $umodel = User::findOne(Yii::$app->user->identity->id);

        if ($model->load(Yii::$app->request->post())) {

            // return json_encode(Yii::$app->request->post());exit;

            date_default_timezone_set('Asia/Kolkata'); //India time (GMT+5:30)

            $model->created_on = date('Y-m-d H:i:s');
            $model->intimationDate = date('Y-m-d H:i:s');
            $model->userId = Yii::$app->user->identity->id;
            $model->referenceNo = $this->getReferenceNo();
            if($role=='Surveyor')
            {
                $model->surveyorName=Yii::$app->user->getId();
            }
            if($model->surveyorName)
            {
                $model->surveyorAppointDateTime = date('Y-m-d H:i:s');
            }
            if ($model->status == null || $model->status == '')
                $model->status = 0;

            if($model->save()) {
                if($model->surveyorName != '' && $model->surveyorName == 0 && $model->insuredMobile != '')
                {
                    $mobileno = $model->insuredMobile;
                }
                else if($model->surveyorName != '' && $model->surveyorName != 0)
                {
                    $mobileno = $model->valuatorUser->mobile;
                }

                if ($model->surveyorName != '')
                {
                    if($model->vehicleType == 'ALL-VEHICLE')
                    {
                        $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/vehicleqc?id='.$model->id.'&page=index');
                    }
                    else
                    {
                        $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/commercialqc?id='.$model->id);
                    }

                    $message = 'Dear Customer, Please click the below link to complete your Self Inspection for Vehicle No '.$model->registrationNo.',  Our Reference No'.$model->referenceNo.' Link: '.$link.' by Axion';
                    $smsStatus = $this->sendSms($mobileno, $message);
                    $smsType = 'SELF_INSPECTION';
                }

                $twowheelermodel = new AxionPreinspectionTwowheeler();
                $twowheelermodel->preinspection_id = $model->id;
                $twowheelermodel->save();
                $fwheelermodel = new AxionPreinspectionFwheeler();
                $fwheelermodel->preinspection_id = $model->id;
                $fwheelermodel->save();
                $commercialwheelermodel = new AxionPreinspectionCommercialwheeler();
                $commercialwheelermodel->preinspection_id = $model->id;
                $commercialwheelermodel->save();

                //updating qc
                $this->updateQc($model, 'insert');

                $currentDateTime = date( 'Y-m-d H:i:s');
                $hismodel = new AxionPreinspectionHistory();
                $hismodel->attributes = $obj->attributes;
                $hismodel->preinspection_id = $obj->id;
                $hismodel->id = 0;

                $smsSendStatusresult = $smsSendStatusresultobj = $messageId = $smsText = $smsSendStatus = '';
                $messageIds = [];
                if (!empty($smsStatus))
                {
                    $smsStatusObj = json_decode($smsStatus);
                    if (!empty($smsStatusObj->Data))
                    {
                        foreach ($smsStatusObj->Data as $smsStatusObjValue)
                        {
                            $messageId = @$smsStatusObjValue->MessageId;
                            $checkSmsSendStatus = SMSHelper::checkSmsSendStatus($messageId);

                            $smsSendStatusresult = @$checkSmsSendStatus['data'];
                            
                            if (!empty($smsSendStatusresult))
                            {
                                $smsSendStatusresultobj = json_decode($smsSendStatusresult);
                                $smsText .= @$smsSendStatusresultobj->Data->Message;
                                $messageIds[] = @$smsSendStatusresultobj->Data->MessageId;
                                $smsSendStatus = @$smsSendStatusresultobj->Data->Status;
                            }
                        }
                    }    
                    $hismodel->messageId = json_encode(@$messageIds);
                    $hismodel->smsType = @$smsType;
                    $hismodel->smsText = @$smsText;//$smsSendStatusresult;//@$smsSendStatusresultobj->Data->Message;
                    $hismodel->smsSendStatus = strtoupper(@$smsSendStatus);//strtoupper(@$smsSendStatusresultobj->Data->Status);
                }
                
                $hismodel->created_on = $currentDateTime;
                if (!$hismodel->save()) {
                    $this->log($model->contactPersonMobileNo, json_encode($hismodel->getErrors()));
                }


                // if($model->insurerName == 9 || $model->insurerName == "IFFCO TOKIO GENERAL INSURANCE CO. LTD.") {

                //     $status =$model->status;
                //     $report='';

                //     if($status == 101)
                //     {
                //         $report = 'Report Recommended';
                //     }
                //     else if($status == 102)
                //     {
                //         $report = 'Report Not Recommended';
                //     }
                //     else if($status == 104)
                //     {
                //         $report = 'Report Referred To Underwriter';
                //     }

                //     if($report){
                //         $url = "https://sampark.itgi.co.in/eai_ws_enu/start.swe?SWEExtSource=WSWebService&SWEExtCmd=Execute";
                //         date_default_timezone_set('Asia/Kolkata');
                //         $inspectionDatetime = date("m/d/Y h:i:s");
                //         $specialChar = ['&', '"', '<', '>']; 
		        //         $specialCharEntity = ['&amp;', '&quot;', '&lt;', '&gt;']; 
		        //         $premodel->remarks = str_ireplace($specialChar, $specialCharEntity, $premodel->remarks);

                //         $str = '<?xml version="1.0" encoding="UTF-8"?
                //         <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cus="http://siebel.com/CustomUI">
                //         <soapenv:Header/>
                //         <soapenv:Body>
                //         <cus:ITGIMotorPreInspectionAgencyRecommendationResponse_Input>
                //         <!--Optional:-->
                //         <cus:LatitudeLongitude></cus:LatitudeLongitude>
                //         <cus:PreInspectionNumber>'.$premodel->contactPersonMobileNo.'</cus:PreInspectionNumber>
                //         <cus:RecommendationResponse>'.$report.'</cus:RecommendationResponse>
                //         <cus:InspectionLocation>'.$premodel->surveyLocation.'</cus:InspectionLocation>
                //         <cus:PreInspectionIntegrationId>2</cus:PreInspectionIntegrationId>
                //         <!--Optional:-->
                //         <cus:Remarks>'.$premodel->remarks.'</cus:Remarks>
                //         <!--Optional:-->
                //         <cus:ChassisNumber>'.$premodel->chassisNo.'</cus:ChassisNumber>
                //         <!--Optional:-->
                //         <cus:EngineNumber>'.$premodel->engineNo.'</cus:EngineNumber>
                //         <!--Optional:-->
                //         <cus:InspectionDateTime>'.$inspectionDatetime.'</cus:InspectionDateTime>
                //         </cus:ITGIMotorPreInspectionAgencyRecommendationResponse_Input>
                //         </soapenv:Body>
                //         </soapenv:Envelope>';
                //         $actionUrl = 'document/http://siebel.com/CustomUI:ITGIMotorPreInspectionAgencyRecommendationResponse';
                //         $resp = $this->curlRequest($url,$actionUrl,$str);
                //         $this->log($model->contactPersonMobileNo,$resp,$str);
                //     }
                // }

                if($role == 'Commonuser'){
                    return $this->redirect(['vehicleqc', 'id' => $model->id]);
                }
                return "noajax success";
            }else{
                if(!$model->save()){
                    return json_encode($model->getErrors());exit;
                }
            }
             //return $this->redirect(['/']);
        } 
        else {
            return $this->render('create', [
                'model' => $model,
                'city' => $city,
                'state'=>$state,
                'lastStatus' => $lastStatus,
                'block' => $block,
                'sameId' => $sameId,
                'callerModel' => $callerModel,
                'company'=> $company,
                'umodel'=>$umodel,
                'role' => $role,
                'division' => $division,
                'branch' => $branch,
                'caller' => $caller,
                'surveyor_list' => $surveyor_list,
            ]);
        }
    }

    protected function getReferenceNo()
    {
        if (($model = AxionPreinspection::find()->orderBy(['id' => SORT_DESC])->one()) !== null) {
            return ($model->referenceNo) + 1;
        } else {
            return 6130;
        }
    }

    public function actionFollowup($ro)
    {
        $call = 'ajax';
        $idCheck = '';
        return $output = $this->getFollowupData($call,$idCheck,$ro);
    }

    protected function getFollowupData($call,$idCheck,$ro)
    {
        $block = 'N';
        $sameId = 'N';
        $output = '';
        date_default_timezone_set('Asia/Kolkata');
        $ctime = date('Y-m-d H:i:s');
        /*$followup = AxionPreinspection::find()
        ->select(['id,referenceNo,followupRemainder,followupUpdatedBy,TIMESTAMPDIFF(MINUTE,:ctime,followupRemainder) AS remarks'])
        ->where('TIMESTAMPDIFF(MINUTE,:ctime,followupRemainder) <= 10 and Status = 0 and ro = :val',['ctime' =>$ctime,'val'=>$ro])
        ->orderBy('followupRemainder')
        ->all();*/

        $followup = AxionPreinspection::find()
        ->select(['id,referenceNo,followupRemainder,followupUpdatedBy,TIMESTAMPDIFF(MINUTE,:ctime,followupRemainder) AS remarks'])
        ->where('TIMESTAMPDIFF(MINUTE,:ctime,followupRemainder) <= 10 and Status = 0',['ctime' =>$ctime])
        ->orderBy('followupRemainder')
        ->all();

        // return $followup->createCommand()->getRawSql();
        // 
        
        foreach($followup As $val)
        {
            $id = $val->id;
            $referenceNo = $val->referenceNo;
            $followupRemainder = date( 'd/m/Y h:i A', strtotime( $val->followupRemainder ));
            $followupUpdatedBy = $val->followupUpdatedBy;
            $timeDifference =$val->remarks; 
            if($timeDifference < 0)
            {
                $block = 'Y';
                $color = 'red';
            }
            else
            {
                $color = 'blue';
            }
            $output .= '<div> <a style="color:'.$color.'" class="activity-update-link" data-pjax="0" data-id="'.$id.'" data-target="#update-modal" data-toggle="modal" title="Update" href="#">'.$referenceNo.'</a> - <strong> '.$followupRemainder.' </strong> Updated By '.$followupUpdatedBy.'</div>';

            if($call == 'update' && $id == $idCheck)
            {
                $sameId = 'Y';
            }
        }
        if($call== 'update')
        {
            return $block.'|'.$sameId;
        }
        if($call== 'ajax')
        {
            return $output;
        }

    }

    protected function hisMessage($id)
    {

        $his = AxionPreinspectionHistory::find()
        ->where(['preinspection_id' => $id])
        ->orderBy('created_on desc')
        ->all();
        $msg = '';
        foreach($his As $val)
        {
            if($val->status == 0 && $val->followupReason == 0 )
            {
                $msg .=  '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> CASE RECEIVED </td></tr>';  
            }
            else if($val->status == 0 && $val->followupReason != 0)
            {
                $msg .=  '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> '.$val->followupValue[$val->followupReason].'</td></tr>';
            }
            else if($val->status == 12)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $val->customerAppointDateTime )).'</td></tr>';
            }
            else if($val->status == 1)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> Re-Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $val->customerAppointDateTime )).'</td></tr>';
            }
            else if($val->status == 8)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> Survey Done - DateTime :'.date( 'd/m/Y h:i A', strtotime( $val->completedSurveyDateTime )).'</td></tr>';
            }
            else if($val->status == 101)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Recommended </td></tr>';
            }
            else if($val->status == 102)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Not Recommended </td></tr>';
            }
            else if($val->status == 103)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Inprogress </td></tr>';
            }
            else if($val->status == 104)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> PI-Refer to Under Writer </td></tr>';
            }
            else if($val->status == 9)
            {
                $msg .= '<tr><td style="padding:15px;border:1px solid #000;"> STATUS ON '.date( 'd/m/Y h:i A', strtotime( $val->created_on )).'</td><td style="padding:15px;border:1px solid #000;"> CANCELLED - Reason : '.$val->cancelReasonsvalue[$val->cancellationReason].'</td></tr>';
            }

        }
        return $msg;
    }

    /**
     * Updates an existing Preinspection model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     */
    public function actionUpdate($id)
    {

        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        
        $model = $this->findModel($id);
        $model->scenario='update';

        $lastStatus = $model->status;
        $lastFollowupReason = $model->followupReason;
        $lastFollowupRemainder = $model->followupRemainder;
        $lastFollowupUpdatedBy = $model->followupUpdatedBy;
        $lastFollowupUpdatedDateTime = $model->followupUpdatedDateTime;
        $lastIntimationDate = $model->intimationDate;
        $lastSurveyorName = $model->surveyorName;
        $lastCustomerAppointDateTime = $model->customerAppointDateTime;

        
        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('lastName ASC')
        ->all();
        $city = MasterCity::find()
        ->all();

        $state = MasterState::find()
        ->all();
        
        $town = MasterTown::find()
        ->where(['cityId' => $model->cityId])
        ->orderBy('town')
        ->all();

        $usrrole = array_keys(Yii::$app->authManager->getRolesByUser($model->userId))[0];
        if($usrrole == 'Branch Executive' || $usrrole == 'Superadmin'){
            $getro = User::findOne(['id'=>$model->userId]);
            $roId = $getro->roId;
        }elseif($usrrole == 'BO User'){
            $roId = $model->userId;
        }
        // return 'roId - '.$usrrole.'!!'.$roId.' UserID - '.$model->userId;
        if($roId != null){
            $surveyor_list = User::find()
            ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
            ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
            ->andFilterWhere(['roId' => $roId])
            ->orderBy('firstName ASC')
            ->all();
        }else{
            $surveyor_list = null;
        }


        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
            $division = PreinspectionClientDivision::find()
            ->where(['id' => Yii::$app->user->identity->divisionId])
            ->all();
            $branch = PreinspectionClientBranch::find()
            ->where(['id' => Yii::$app->user->identity->branchId])
            ->all();
            $caller = User::find()
            ->where(['id' => Yii::$app->user->identity->id])
            ->all();
        }
        else {
            $company = PreinspectionClientCompany::find()
            ->all();
            $division = PreinspectionClientDivision::find()
            ->where(['companyId' => $model->insurerName])
            ->orderBy('divisionName')
            ->all();
            $branch = PreinspectionClientBranch::find()
            ->where(['divisionId' => $model->insurerDivision])
            ->orderBy('branchName')
            ->all();
            $caller = User::find()
            ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
            ->andFilterWhere(['or',
                ['auth_assignment.item_name' => 'Branch Head'],
                ['auth_assignment.item_name' => 'Branch Executive']])
            // ->andFilterWhere(['companyId' => $model->insurerName])
            // ->andFilterWhere(['divisionId' => $model->insurerDivision])
            // ->andFilterWhere(['branchId' => $model->insurerBranch])
            ->andFilterWhere(['users.id' => $model->callerName])
            ->orderBy('firstName')
            ->all();
            // return $caller->createCommand()->getRawSql(); die;
        }
        
        date_default_timezone_set('Asia/Kolkata');
        $currentDateTime = date('Y-m-d H:i:s');

        $umodel = User::findOne(Yii::$app->user->identity->id);
        $vehicleModel = AxionPreinspectionVehicle::find()->where(['preinspection_id' => $model->id])->one();

        // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
        // {
        //     $postData = Yii::$app->request->post();

        //     if ($model->chassisNo != $postData['AxionPreinspection']['chassisNo'])
        //     {
        //         $apiData['chassis_number'] = $postData['AxionPreinspection']['chassisNo'];
        //     }
        //     if ($model->engineNo != $postData['AxionPreinspection']['engineNo'])
        //     {
        //         $apiData['engine_number'] = $postData['AxionPreinspection']['engineNo'];
        //     }
        //     if ($model->registrationNo != $postData['AxionPreinspection']['registrationNo'])
        //     {
        //         $apiData['registration_number'] = $postData['AxionPreinspection']['registrationNo'];
        //     }
        //     // if ($model->status != $postData['AxionPreinspection']['status'])
        //     // {
        //         switch($postData['AxionPreinspection']['status'])
        //         {
        //             case 0:
        //                 $rsStatus = 'Case Created';
        //                 break;
                    
        //             case 1:
        //                 $rsStatus = 'Reassigned';
        //                 break;

        //             case 9:
        //                 $rsStatus = 'Rejected';
        //                 break;

        //             case 8:
        //                 $rsStatus = 'QC Pending';
        //                 break;

        //             case 12:
        //                 $rsStatus = 'Scheduled'; //Assigned
        //                 break;

        //             case 101:
        //                 $rsStatus = 'Recommended';
        //                 break;

        //             case 102:
        //                 $rsStatus = 'Not Recommended';
        //                 break;

        //             default:
        //                 $rsStatus = 'Case Created';
        //         }

        //         $apiData['status'] = $rsStatus;
        //     //}
        //     if (!empty($apiData['status']) && $apiData['status'] == 'Reassigned')
        //     {
                
        //         if (!empty($postData['AxionPreinspection']['rescheduleDateTime']))
        //         {
        //             $rescheduleDateTimeData = ($postData['AxionPreinspection']['rescheduleDateTime1']) ? $postData['AxionPreinspection']['rescheduleDateTime1']: $postData['AxionPreinspection']['rescheduleDateTime'];                    
        //             $postData['AxionPreinspection']['rescheduleDateTime'] = $rescheduleDateTimeData;
                    
        //             $apiData['reassigned_inspection_date'] = date('Y-m-d h:i:s A', strtotime($postData['AxionPreinspection']['rescheduleDateTime']));
        //             //$apiData['reassigned_inspection_date'] = str_replace('+00:00', '.00', $apiData['reassigned_inspection_date']);
        //         }
        //         else if (!empty($postData['AxionPreinspection']['customerAppointDateTime']))
        //         {
        //             $apiData['reassigned_inspection_date'] = date('Y-m-d h:i:s A', strtotime($postData['AxionPreinspection']['customerAppointDateTime']));
        //             //$apiData['reassigned_inspection_date'] = str_replace('+00:00', '.00', $apiData['reassigned_inspection_date']);
        //         }
        //     }
        //     if ($model->manufacturer != $postData['AxionPreinspection']['manufacturer'])
        //     {
        //         $apiData['vehicle_make'] = $postData['AxionPreinspection']['manufacturer'];
        //     }
        //     if ($model->model != $postData['AxionPreinspection']['model'])
        //     {
        //         $apiData['vehicle_model'] = $postData['AxionPreinspection']['model'];
        //     }
        //     if ($model->manufacturingYear != $postData['AxionPreinspection']['manufacturingYear'])
        //     {
        //         $apiData['year_of_manufacture'] = $postData['AxionPreinspection']['manufacturingYear'];
        //     }
        //     //if ($model->remarks != $postData['AxionPreinspection']['remarks'])
        //     //{
        //         $apiData['remarks'] = $postData['AxionPreinspection']['remarks'];
        //     //}
        //     //if (($model->completedSurveyDateTime != $postData['AxionPreinspection']['completedSurveyDateTime']) && $model->status == 101)
        //     //{
        //     if ($postData['AxionPreinspection']['status'] == 101 && !empty($postData['AxionPreinspection']['completedSurveyDateTime'])) {
        //         $apiData['approvedDate'] = date('Y-m-d h:i:s A', strtotime($currentDateTime));
        //         //$apiData['approvedDate'] = str_replace('+00:00', '.00', $apiData['approvedDate']);
        //     }
        //     //}
        //     //if (($model->completedSurveyDateTime != $postData['AxionPreinspection']['completedSurveyDateTime']) && $model->status == 102)
        //     //{
        //     if (($postData['AxionPreinspection']['status'] == 102 || $postData['AxionPreinspection']['status'] == 9)) {
        //         $apiData['rejectedDate'] = date('Y-m-d h:i:s A', strtotime($currentDateTime));
        //         //$apiData['rejectedDate'] = str_replace('+00:00', '.00', $apiData['rejectedDate']);
        //     }
        //     //} 
        //     //if ($model->vType != $postData['AxionPreinspectionVehicle']['vType'])
        //     //{
        //         switch($vehicleModel->vType)
        //         {
        //             case '4-WHEELER':
        //                 $rsVehicleType = 'Private Car';
        //                 break;

        //             case '2-WHEELER':
        //                 $rsVehicleType = 'Two-wheeler';
        //                 break;

        //             case 'COMMERCIAL':
        //                 if (!empty($postData['AxionPreinspectionVehicle']['vCategory']))
        //                 {
        //                     switch($postData['AxionPreinspectionVehicle']['vCategory'])
        //                     {
        //                         case 'Passenger Carrying Vehicle':
        //                             $rsVehicleType = 'Passenger Carrying Vehicle';
        //                             break;
    
        //                         case 'Goods Carrying Vehicle':
        //                             $rsVehicleType = 'Goods Carrying Vehicle';
        //                             break;
    
        //                         case 'Miscellaneous Vehicle':
        //                             $rsVehicleType = 'Miscellaneous Vehicle';
        //                             break;
    
        //                         default:
        //                             $rsVehicleType = 'Private Car';
        //                     }
        //                     break;
        //                 }
        //                 else if (!empty($vehicleModel->vCategory))
        //                 {
        //                     switch($vehicleModel->vCategory)
        //                     {
        //                         case 'Passenger Carrying Vehicle':
        //                             $rsVehicleType = 'Passenger Carrying Vehicle';
        //                             break;
    
        //                         case 'Goods Carrying Vehicle':
        //                             $rsVehicleType = 'Goods Carrying Vehicle';
        //                             break;
    
        //                         case 'Miscellaneous Vehicle':
        //                             $rsVehicleType = 'Miscellaneous Vehicle';
        //                             break;
    
        //                         default:
        //                             $rsVehicleType = 'Private Car';
        //                     }
        //                     break;
        //                 }                        
        //             default:
        //                 $rsVehicleType = 'Private Car';
        //         }

        //         $apiData['vehicle_type'] = $rsVehicleType;

        //     //} 
        //     $apiData['inspected_Start_location'] = $model->surveyLocation ? $model->surveyLocation : $postData['AxionPreinspection']['surveyLocation'];
        //     $apiData['inspected_Location'] = $model->surveyLocation2 ? $model->surveyLocation2 : $postData['AxionPreinspection']['surveyLocation2'];
        //     $apiData['no_of_Kilometers'] = $model->extraKM ? $model->extraKM : $postData['AxionPreinspection']['extraKM'];

        //     $apiData['vir_case_number'] = $model->contactPersonMobileNo;
        //     $apiData['reference_no'] = $model->referenceNo;
        // }

        $umodel = User::findOne(Yii::$app->user->identity->id);
        
        if (Yii::$app->request->isAjax && $model->load(Yii::$app->request->post())) {

            $cusAppDT = \DateTime::createFromFormat('d/m/Y h:i a', $model->customerAppointDateTime );
            if($cusAppDT)
            {
               $model->customerAppointDateTime = $cusAppDT->format('Y-m-d H:i:s');
            }
            $reschDT = \DateTime::createFromFormat('d/m/Y h:i a', $model->rescheduleDateTime );
            if($reschDT)
            {
               $model->rescheduleDateTime = $reschDT->format('Y-m-d H:i:s');
            }
            $compDT = \DateTime::createFromFormat('d/m/Y h:i a', $model->completedSurveyDateTime );
            if($compDT)
            {
               $model->completedSurveyDateTime = $compDT->format('Y-m-d H:i:s');
            }
           if($lastCustomerAppointDateTime != '')
           {
               $model->customerAppointDateTime = $lastCustomerAppointDateTime;
           }
           if($lastStatus == 12 && $model->status == 1)
           {
               $model->customerAppointDateTime = $model->rescheduleDateTime; 
           }
            if($lastStatus == 1 && $model->status == 1)
            {
              $lastRescheduleDateTime = $model->rescheduleDateTime;
              $lastRescheduleReason = $model->rescheduleReason;
              $model->rescheduleDateTime =   $model->rescheduleDateTime1;
              $model->rescheduleReason =   $model->rescheduleReason1;
              $model->customerAppointDateTime = $model->rescheduleDateTime;  
            }

            if($model->surveyorName != 0)
            {
                $valuatorModel = User::findOne($model->surveyorName);        
                $surveyor_name = $rs_surveyor_name = $valuatorModel->firstName;
                $surveyor_mobile =  $valuatorModel->mobile;

            }
            if($model->surveyorName == 0)
            {    
                $surveyor_name = 'Customer - '.$model->insuredName;
                $rs_surveyor_name = $model->insuredName;
                $surveyor_mobile = $model->insuredMobile;

            }

            if($lastSurveyorName != $model->surveyorName)
            {
                $model->surveyorAppointDateTime = $currentDateTime;
            }
            else if($model->surveyorName != '')
            {
                $sadate = \DateTime::createFromFormat('d/m/Y h:i a', $model->surveyorAppointDateTime );
                if($sadate) {
                    $model->surveyorAppointDateTime = $sadate->format('Y-m-d H:i:s');
                }
            }


            $model->intimationDate = $lastIntimationDate;

                //$model->userId = Yii::$app->user->identity->id;

                //updating followup updated datetime
            if($lastStatus == 0 && $model->status == 0 && $model->followupReason != 0 && $model->followupRemainder != '' && $model->followupUpdatedBy !='')
            {
                //checking for followup duplicate
                if($lastFollowupReason != $model->followupReason || $lastFollowupRemainder != $model->followupRemainder || $lastFollowupUpdatedBy != $model->followupUpdatedBy)
                {
                    $model->followupUpdatedDateTime = trim(date('Y-m-d H:i:s'));
                }
                else
                {
                    $model->followupUpdatedDateTime = $lastFollowupUpdatedDateTime;
                }
            }
            else
            {
                $model->followupUpdatedDateTime = $lastFollowupUpdatedDateTime;
            }

            $model->updated_on = $currentDateTime;
            $apiData['last_modified_date'] = date('Y-m-d h:i:s A', strtotime($model->updated_on));
            if (empty($model->surveyDoneOn) && $model->status == 8)
            {
                $model->surveyDoneOn = $currentDateTime;
            }elseif (empty($model->cancelledOn) && $model->status == 9)
            {
                $model->cancelledOn = $currentDateTime;
            }
            if($model->save())
            {
                if($model->surveyorName != '' && $model->surveyorName == 0 && $model->insuredMobile != '')
                {
                    $mobileno = $model->insuredMobile;
                }
                else if($model->surveyorName != '' && $model->surveyorName != 0)
                {
                    $mobileno = $model->valuatorUser->mobile;
                }

                if ($model->surveyorName != '')
                {
                    if($model->vehicleType == 'ALL-VEHICLE')
                    {
                        $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/vehicleqc?id='.$model->id.'&page=index');
                    }
                    else
                    {
                        $link = Yii::$app->urlManager->createAbsoluteUrl('axion-preinspection/commercialqc?id='.$model->id);
                    }

                    $message = 'Dear Customer, Please click the below link to complete your Self Inspection for Vehicle No '.$model->registrationNo.',  Our Reference No'.$model->referenceNo.' Link: '.$link.' by Axion';
                    $smsStatus = $this->sendSms($mobileno, $message);
                    $smsType = 'SELF_INSPECTION';
                }

                //Master Caller Data 
                $callerData = PreinspectionClientCaller::findOne(['callerMobileNo' => $model->callerMobileNo]);
                if($callerData)
                {
                    $callerEmail = $callerData->callerEmailId;
                }
                else
                {
                    $callerEmail = '';
                }

                        //Caller Email
                $callerEmail = $model->callerDetails;

                        //additional sms message
                $additionalSmsMessage = "";
                if($model->insurerName == "IFFCO TOKIO GENERAL INSURANCE CO. LTD.")
                {
                    $additionalSmsMessage = "Please note the Revised contact number of ITGI (8248998865). Kindly contact for all future correspondence.";
                }
                else if($model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                {
                    $additionalSmsMessage = "Please note the Revised contact number of RSA (8668095574). Kindly contact for all future correspondence.";
                }
                else if($model->insurerName == "HDFC ERGO GENERAL INSURANCE CO.LTD.")
                {
                    $additionalSmsMessage = "Please note the Revised contact number of HDFC (8668095572). Kindly contact for all future correspondence.";
                }
                else if($model->insurerName == "L&T GENERAL INSURANCE CO. LTD.")
                {
                    $additionalSmsMessage = "Please note the Revised contact number of L&T (8668095572). Kindly contact for all future correspondence.";
                }

                function status($pairs,$stats) {
                    foreach ($pairs as $key => $value) {
                        if ($key == $stats) {
                            return ("{$value}");
                        }
                    }
                }
                $Status = array(0=>'followupReason',1=>'Intimation Re-Schedule',8=>'Survey Done',9=>'Cancelled',12=>   'Schedule-CustomerAppointment',100=>'Change RO',101=>'PI-Recommended',102=>'PI-Not Recommended',103=>'PI-Inprogress',104=>'PI-Refer to Under Writer');


                $image = "Images";
                $refno = $model->contactPersonMobileNo;
                $partner = "Axion";
                $vehicleno = $model->registrationNo;
                $Subject = sprintf("%s,%s,%s,%s,",$image,$partner,$refno,$vehicleno);

                                                //$name = PreinspectionClientCompany::findOne(['id' => $id]);
                $division = PreinspectionClientDivision::findOne(['id' => $id]);
                $partnerName = "Axion";
                $partnerCode = "NA";                            
                $piStatus = status($Status,$model->status);
                $refno = $model->referenceNo;
                $insurerName = "Go Digit General Insurance Limited";
                $vehicleRegNo = $model->registrationNo;
                $insuredname = $model->insuredName;
                $insuredAddress = $model->insuredAddress;
                $insuredMobile = $model->insuredMobile;
                $agentEmail = $model->callerDetails;
                $customerOccupation =  $model->customerOccupation;
                $residence =  $model->residence;
                $customerAge =  $model->customerAge;
                $numberOfCarsOwned =  $model->numberOfCarsOwned;
                $vehicleParked =  $model->vehicleParked;
                $securityOfVehicle =  $model->securityOfVehicle;
                $relationship = $model->relationship;
                $maintenance  = $model->maintenance;
                $vehicleTimeOfInspection = $model->vehicleTimeOfInspection;
                $updatedContact = $model->updatedContact;
                $insurerRefNo= $model->contactPersonMobileNo;

                $Gmessage = sprintf('"partnerName":"%s", <br/> "piStatus":"%s",<br/> "referenceNo":"%s",<br/>"insurerName": "%s",<br/> "vehicleRegNo":"%s",<br/> "insurerRefNo":"%s",<br/> "insuredName":"%s",<br/> "insuredAddress":"%s",<br/> "insuredMobile":"%s",<br/> "agentEmail":"%s", <br/> <br/> <br/>  <br/> <br/> <br/> "customerOccupation":"%s",<br/> "residence":"%s",<br/> "customerAge":"%s",<br/> "numberOfCarsOwned":"%s",<br/> "vehicleParked":"%s",<br/> "securityOfVehicle":"%s",<br/> "relationship":"%s",<br/> "maintenance":"%s",<br/> "vehicleTimeOfInspection":"%s",<br/> "updatedContact":"%s"',$partnerName,$piStatus,$refno,$insurerName,$vehicleRegNo,$insurerRefNo,$insuredname,$insuredAddress,$insuredMobile,$agentEmail,$customerOccupation,$residence,$customerAge,$numberOfCarsOwned,$vehicleParked,$securityOfVehicle,$relationship,$maintenance,$vehicleTimeOfInspection,$updatedContact);

                                                //$upload=sprintf('C:/xampp/htdocs/taig-wb/images/',$Image);
                                                // $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$Gmessage]);

                $attachment = array("chassisThumb"=>"chp.jpg","rcCopy"=>"rcb1.jpg","preInsuranceCopy"=>"rcb2.jpg","cngLpgKit"=>"cng.jpg","rightSideFullView"=>"rs.jpg","rearViewImage"=>"bs.jpg","enginePhoto"=>"ecr.jpg","dashBoardPhoto"=>"dbd.jpg","frontLeftCorner45"=>"flc.jpg","leftSideFullView"=>"ls.jpg","leftQtrPanel"=>"blc.jpg","rightQtrPanel"=>"brc.jpg","frontRightCorner45"=>"frc.jpg","frontViewNumberPlate"=>"ws.jpg","frontViewNumberPlate"=>"fs.jpg","vehicleVideo"=>"video.mp4");



                // if($model->insurerName == 7)
                // {
                // $pdfFile = getcwd().'/api-uploads/pdf/'.$id.'.pdf';
                // if($smailer)
                //    $smailer->setFrom('inspection.request@axionpcs.in')
                //    ->setTo("manual.PI@godigit.com") //manual.PI@godigit.com mythili.gopi@axionpcs.in
                //    ->setSubject($Subject);
                //    if (file_exists($pdfFile))  
                //    {
                //        $smailer->attach($pdfFile, ['fileName' =>'report_pdf.pdf','contentType'
                //        => 'text/pdf']);
                //    }
                //    foreach($attachment as $file => $x_value) {
                //        $upload = AxionPreinspectionPhotos::findOne(['preinspection_id' => $id,'type' => $file]);
                //        if(isset($upload) and isset($upload -> image) and strlen($upload -> image) > 0)
                //        {
                //          $Image = sprintf('./qcphotos/%s',$upload->image);  
                //         if($file == 'vehicleVideo'){
                //             $smailer->attach($Image, ['fileName' => $x_value,'contentType' => 'video/mp4']);
                //         }else{

                //            $smailer->attach($Image, ['fileName' => $x_value,'contentType' => 'image/jpeg']);
                //            }
                //            }
                //    }
                //    // attach file from local file system
                //   $smailer->send();
                //    //Mail Sent Successfully../qcphotos/22-chassis
                // }

                $insuredUser = User::findOne(['mobile' => @$model->insuredMobile]);

                //sending sms
                if($model->status == 12)
                {
                    //updating field executuves task
                    $this->updateFieldexecutivesTask($model, 'insert');

                    
                    $mobileno = $model->callerMobileNo;

                    // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                    // {
                    //     $message = 'RSA VIR Status - Vehicle NO '.$model->registrationNo.' Ref No '.$model->contactPersonMobileNo.' has been scheduled on '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).' surveyor Name '.$rs_surveyor_name .' by Axion';
                    //     //sending sms to customer
                    //     $this->sendSms(@$model->insuredMobile, $message);

                    //     //sending sms to agent
                    //     $this->sendSms($mobileno, $message);                         
                    // }
                    // else
                    // {
                    // } 
                    $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' SCHEDULE APP - '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).' SURVEYOR NAME:('.$surveyor_name.') '.$additionalSmsMessage.' By Axion';
                    //sending sms to agent
                    $this->sendSms($mobileno, $message); 

                    //sending sms to surveyor
                    $surveyor_message = $model->referenceNo.' '.$model->insuredName.' '.$model->contactPersonMobileNo.' '.$model->surveyLocation.' '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime ));

                    $this->sendSms($surveyor_mobile, $message);
                    

                    if($callerEmail != '')
                    {
                                                //caller email
                        $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                        $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                        $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).'</td></tr>';
                        $emailMessage .= $this->hisMessage($model->id);
                        /* $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>'; */
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr>';
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Remarks </td><td style="padding:15px;border:1px solid #000;">'.$model->remarks.'</td></tr></table></div>';
                        $emailMessage .= '<br><h2 style ="border-top: 1px solid #f1f1f1; border-bottom: 1px solid #f1f1f1; color: #ff110f; text-align: center; padding: 5px auto">Auto Generated Email. Please Do not Reply.</h2>';
                        $emailMessage .= '<br><p>Thanks & Regards,</p>';
                        $emailMessage .= '<h4>Axion Technical Services</h4>';
                        $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$emailMessage]);
                        if($smailer)
                        {
                            $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            ->setTo($agentEmail) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            ->setSubject($emailSubject);
                            $smailer->send();

                            // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                            // {
                            //     $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            //     ->setTo(@$insuredUser->email) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            //     ->setSubject($emailSubject);
                            //     $smailer->send();
                            // }
                        }

                    }

                    //creating dropbox folder
                    //$this->createDropboxFolder($model->customerAppointDateTime, $surveyor_name, $model->registrationNo);
                }
                else if($model->status == 1)
                {
                    //updating field executuves task
                    $this->updateFieldexecutivesTask($model, 'insert');
                    
                    $mobileno = $model->callerMobileNo;
                    $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' RE - SCHEDULE APP - '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).' REASON:'.'('.$model->rescheduleReason.') SURVEYOR NAME:('.$surveyor_name.') '.$additionalSmsMessage.' By Axion';

                    // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                    // {
                    //     $message = 'RSA VIR Status- Vehicle NO '.$model->registrationNo.' Ref No '.$model->contactPersonMobileNo.' has been Re- scheduled on '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).' surveyor Name '.$surveyor_name .' By Axion';
                        
                    //     //sending sms to agent
                    //     $this->sendSms($mobileno, $message);

                    //     //sending sms to customer
                    //     $this->sendSms(@$model->insuredMobile, $message);
                    // }
                    // else
                    // {
                    // }
                    //sending sms to agent
                    $this->sendSms($mobileno, $message);

                    //sending sms to surveyor
                    if($lastSurveyorName != $model->surveyorName)
                    {
                        $surveyor_message = $model->referenceNo.' '.$model->insuredName.' '.$model->contactPersonMobileNo.' '.$model->surveyLocation.' '.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime ));
                        $this->sendSms($surveyor_mobile, $message); 
                    }
                    

                    if($callerEmail != '')
                    {
                        //caller email
                        $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                        $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                        $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> Re-Schedule - Customer Appointment :'.date( 'd/m/Y h:i A', strtotime( $model->customerAppointDateTime )).'</td></tr>';
                        $emailMessage .= $this->hisMessage($model->id);
                        /*$emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';*/
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr>';
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Remarks </td><td style="padding:15px;border:1px solid #000;">'.$model->remarks.'</td></tr></table></div>';
                        $emailMessage .= '<br><h2 style ="border-top: 1px solid #f1f1f1; border-bottom: 1px solid #f1f1f1; color: #ff110f; text-align: center; padding: 5px auto">Auto Generated Email. Please Do not Reply.</h2>';
                        $emailMessage .= '<br><p>Thanks & Regards,</p>';
                        $emailMessage .= '<h4>Axion Technical Services</h4>';
                        $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$emailMessage]);
                        if($smailer)
                        {
                            $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            ->setTo($agentEmail) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            ->setSubject($emailSubject);
                            $smailer->send();

                            // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                            // {
                            //     $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            //     ->setTo(@$insuredUser->email) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            //     ->setSubject($emailSubject);
                            //     $smailer->send();
                            // }
                        }
                    }

                    //creating dropbox folder
                    //$this->createDropboxFolder($model->customerAppointDateTime, $surveyor_name, $model->registrationNo);
                }
                else if($model->status == 8)
                {
                    //updating qc
                    $this->updateQc($model, 'insert');

                    //updating field executuves task
                    $this->updateFieldexecutivesTask($model, 'delete');

                    $mobileno = $model->callerMobileNo;
                    $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' COMPLETED :'.date( 'd/m/Y h:i A', strtotime( $model->completedSurveyDateTime )).' KINDLY DOWNLOAD FROM AXION SITE.'.$additionalSmsMessage.'By Axion Team';
                    // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                    // {
                    //     //$message = 'RSA VIR Status-Vehicle NO '.$model->registrationNo.' Ref No '.$model->contactPersonMobileNo.'has been Completed on '.date( 'd/m/Y h:i A', strtotime( $model->completedSurveyDateTime )).'Report will be shared to insurer shortly. By Axion';
                    //     $customer_message = 'RSA VIR Status-Vehicle NO '.$model->registrationNo.' Ref No '.$model->contactPersonMobileNo.'has been Completed on '.date( 'd/m/Y h:i A', strtotime( $model->completedSurveyDateTime )).'Report will be shared shortly. By Axion';
                        
                    //     //sending sms to agent
                    //     $this->sendSms($mobileno, $customer_message);

                    //     //sending sms to customer
                    //     $this->sendSms(@$model->insuredMobile, $customer_message);
                    // }
                    // else
                    // {
                    // }
                    //sending sms to agent
                    $this->sendSms($mobileno, $message);
                    

                    if($callerEmail != '')
                    { 
                        //caller email
                        $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                        $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                        $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> COMPLETED (QC Pending) - DateTime :'.date( 'd/m/Y h:i A', strtotime( $model->completedSurveyDateTime )).'</td></tr>';
                        $emailMessage .= $this->hisMessage($model->id);
                        /*$emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';*/
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr>';
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Remarks </td><td style="padding:15px;border:1px solid #000;">'.$model->remarks.'</td></tr></table></div>';
                        $emailMessage .= '<br><h2 style ="border-top: 1px solid #f1f1f1; border-bottom: 1px solid #f1f1f1; color: #ff110f; text-align: center; padding: 5px auto">Auto Generated Email. Please Do not Reply.</h2>';
                        $emailMessage .= '<br><p>Thanks & Regards,</p>';
                        $emailMessage .= '<h4>Axion Technical Services</h4>';
                        $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$emailMessage]);
                        if($smailer)
                        {
                            $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            ->setTo($agentEmail) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            ->setSubject($emailSubject);
                            $smailer->send();

                            // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                            // {
                            //     $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            //     ->setTo(@$insuredUser->email) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            //     ->setSubject($emailSubject);
                            //     $smailer->send();
                            // }
                        }
                    }
                }

                if($model->status == 9)
                {
                    //updating qc
                    $this->updateQc($model, 'delete');  

                    //updating field executuves task
                    $this->updateFieldexecutivesTask($model, 'delete');

                    $cancelledReason = $model->cancelReasonsvalue[$model->cancellationReason]; 
                    $mobileno = $model->callerMobileNo;
                    $message = 'STATUS- '.$model->registrationNo.'/'.$model->referenceNo.' CANCELLED REASON:('.$cancelledReason.') '.$additionalSmsMessage.' By Axion Team';
                    
                    // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                    // {
                    //     $message = 'RSA VIR Status-Vehicle NO '.$model->registrationNo.' Ref No '.$model->contactPersonMobileNo.'has been Cancelled. Reason:  '.$cancelledReason .' By Axion';
                        
                    //     //sending sms to agent
                    //     $this->sendSms($mobileno, $message);

                    //     //sending sms to customer
                    //     $this->sendSms(@$model->insuredMobile, $message);
                    // }
                    // ($model->insurerName == 5 || $model->insurerName == "TATA AIG GENERAL INSURANCE CO.LTD")
                    // {
                        
                    //     $status = "Rejected";
    
                    //     // if (function_exists('curl_file_create')) {
                    //     //     $zipFile = curl_file_create($zipFile);
                    //     // } else {  
                    //     //   $zipFile = curl_file_create(realpath($zipFile));
                    //     // }     
    
                    //     // Change the filename to copied zipfile
                    //     if($model->uploadPath != ''){
                    //         $uploadPath = preg_replace("/\/(\d+)\-/i", "/$1-tata-", $model->uploadPath);
                    //     }else{
                    //         $dummyZip = getcwd().'/api-uploads/dummy.zip';
                    //         $uploadPath = $dummyZip;
                    //     }
                    //     $sendpath = curl_file_create(realpath($uploadPath));
    
                    //     if($model->fristRoid != NULL){
                    //         $getstateid = User::find()->where(['id'=>$model->fristRoid])->one();
                    //         $stateId = $getstateid->stateId;
                    //     }elseif($model->stateId != NULL){
                    //         $stateId = $model->stateId;
                    //     }else{
                    //         $getstateid = User::find()->where(['id'=>$model->userId])->one();
                    //         $stateId = $getstateid->stateId;
                    //     }
                    //     // return $model->createMethod;
                    //     if($model->createMethod == 'Api'){
                    //         // $testResponse[1] = 'IF API - '.$model->createMethod.' ~~ '.$model->status.' ~~ '.$model->insurerName;
                    //         // return $stateId;
                    //         switch ($stateId) {
                    //             case 1:
                    //                 $curlUserid = 'axionkar';
                    //                 break;
                    //             case 2:
                    //                 $curlUserid = 'axion';
                    //                 break;
                    //             case 3:
                    //                 $curlUserid = 'axionker';
                    //                 break;
                    //             case 5:
                    //                 $curlUserid = 'axionap';
                    //             break;
                    //             case 6:
                    //                 $curlUserid = 'axion1';
                    //             break;
                    //             case 10:
                    //                 $curlUserid = 'axionbr';
                    //             break;
                    //             case 14:
                    //                 $curlUserid = 'axiondel';
                    //             break;
                    //             case 11:
                    //                 $curlUserid = 'axionker';
                    //             break;
                    //             default:
                    //                 $curlUserid = 'axion';
                    //         }
            
                    //         // return $curlUserid;
            
                    //         $postFields =  array(
                    //             "leadID" => $model->contactPersonMobileNo,
                    //             "vehicleRegistrationNo" => $model->registrationNo,
                    //             "qcStatus" => $status,
                    //             "zipArray" => $sendpath,
                    //             "pdfArray1" => [],
                    //             "pdfArray2" => [],
                    //             "userID" => $curlUserid,
                    //             "remark" => $model->remarks
                    //         );
            
                    //         //   if($model->taigStatusRequest == '')
                    //         //   {      
                    //         $curl = curl_init();
            
                    //         curl_setopt_array($curl, array(
                    //             CURLOPT_URL => "https://tataaig.vahancheck.com/VCWebAPI/api/ExternalAgencyReport/Post", // Test URL - http://tataaiguat.vahancheck.com/VCWebAPI/api/ExternalAgencyReport/Post
                    //             CURLOPT_RETURNTRANSFER => true,
                    //             CURLOPT_ENCODING => "",
                    //             CURLOPT_MAXREDIRS => 10,
                    //             CURLOPT_TIMEOUT => 1000,
                    //             CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    //             CURLOPT_CUSTOMREQUEST => "POST",
                    //             CURLOPT_POSTFIELDS => $postFields,
                    //             CURLOPT_HTTPHEADER => array(
                    //                 "authorization: Basic PuwoFFOP+Zr2wtaTjv9KnQ==",
                    //                 "cache-control: no-cache",
                    //                 "content-type: multipart/form-data"
                    //             ),
                    //         ));
            
                    //         $response = curl_exec($curl);
                    //         $err = curl_error($curl);
            
                    //         curl_close($curl);
            
                    //         $result = json_decode($response);
                    //                         //   print_r($result->StatusCode); 
                    //         $model->ErrorDesc = $result->ErrorDesc;
                    //         $model->save();
            
                    //         if($result->RequestStatus == 'success' && $result->StatusCode == '111105')
                    //         {
                    //             if($model->load(Yii::$app->request->post()) )
                    //             { 
                    //                 $model->taigRequestStatus = 'Y';
                    //                 $model->taigStatusCode = $result->StatusCode;
                    //                 $model->ErrorDesc = $result->ErrorDesc;
                    //                 $model->save();
            
                    //                 // Yii::$app->session->setFlash('Success','Upload successfully..!');
                    //                 $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                    //                 // Remove zipfile copy
                    //                 //unlink($zipFileCopy);
                    //             }
                    //         }
                    //         else{
                    //             $model->taigStatusCode = $result->StatusCode;
                    //             $model->ErrorDesc = $result->ErrorDesc;
                    //             $model->save();
                    //             $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                    //             //Yii::$app->session->setFlash('Failure','Not Uploaded - Error Code:'.$result->StatusCode.' Error Message:'.$result->ErrorDesc);
                    //             // Yii::$app->session->setFlash('Failure','Not Uploaded - Error Code:'.$result->StatusCode.' Error Message:'.$result->ErrorDesc.' curlUserid:'.$curlUserid.' stateId - '.json_encode($stateId));
                    //         }
                    //     }elseif($model->createMethod == 'New TataAgi Api' || $model->createMethod == ''){
                    //         // $testResponse[2] = 'Else IF New TataAgi Api - '.$model->createMethod.' ~~ '.$model->status.' ~~ '.$model->insurerName;
    
                    //         switch ($stateId) {
                    //             case 1:
                    //                 $curlUserid = '8105741060';
                    //                 $auth = '8e9e003b-5ef4-4abf-acf2-fca7168b54eb';
                    //                 break;
                    //             case 2:
                    //                 $curlUserid = '8668095935';
                    //                 $auth = '872f4d85-4083-4bb7-8be5-1cb82743d841';
                    //                 break;
                    //             case 3:
                    //                 $curlUserid = '9072872233';
                    //                 $auth = '479ec179-b5c8-44bc-8a50-bbb779e923c1';
                    //                 break;
                    //             case 5:
                    //                 $curlUserid = '7330714466';
                    //                 $auth = '0de3a3c2-9d98-441c-9fa8-43da27013a8e';
                    //             break;
                    //             default:
                    //                 $curlUserid = '8105741060';
                    //                 $auth = '8e9e003b-5ef4-4abf-acf2-fca7168b54eb';
                    //         }

                    //         // return $curlUserid;
    
                    //         $postFields =  array(
                    //             "leadID" => $model->contactPersonMobileNo,
                    //             "vehicleRegistrationNo" => $model->registrationNo,
                    //             "qcStatus" => $status,
                    //             "zipArray" => new \CurlFile($uploadPath, mime_content_type($uploadPath), basename($uploadPath)),
                    //             "pdfArray1" => new \CurlFile($uploadPath, mime_content_type($uploadPath), basename($uploadPath)),
                    //             "pdfArray2" => new \CurlFile($uploadPath, mime_content_type($uploadPath), basename($uploadPath)),
                    //             "userID" => $curlUserid
                    //         );
            
                    //         //   if($model->taigStatusRequest == '')
                    //         //   {      
                    //         $curl = curl_init();
            
                    //         curl_setopt_array($curl, array(
                    //             CURLOPT_URL => "https://byomkeshmotorapi.tataaig.com/api/lob-specific/motor-claims/external-agency-report", // https://uatbyomkeshmotorapi.tataaig.com/api/lob-specific/motor-claims/external-agency-report // Test URL
                    //             CURLOPT_RETURNTRANSFER => true,
                    //             CURLOPT_ENCODING => "",
                    //             CURLOPT_MAXREDIRS => 10,
                    //             CURLOPT_TIMEOUT => 1000,
                    //             CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    //             CURLOPT_CUSTOMREQUEST => "POST",
                    //             CURLOPT_POSTFIELDS => $postFields,
                    //             CURLOPT_HTTPHEADER => array(
                    //                 "x-api-key:".$auth
                    //             ),
                    //         ));
            
                    //         $response = curl_exec($curl);
                    //         $err = curl_error($curl);
    
                    //         if($err){
                    //             //Yii::$app->session->setFlash('Try Again','API - Error Message:'.json_encode($err));
                    //             $this->log($model->contactPersonMobileNo,json_encode($err),json_encode($postFields));
                    //         }
            
                    //         curl_close($curl);
            
                    //         $result = json_decode($response);
    
                    //         // return json_encode($result);
    
                    //         if(!$err && $result != null && $result->error == false){
                    //             if($model->load(Yii::$app->request->post()) )
                    //             { 
                    //                 $model->taigRequestStatus = 'Y';
                    //                 $model->taigStatusCode = 0;
                    //                 $model->ErrorDesc = $result->message;
                    //                 $model->save();    
                    //                 // $testResponse[6] = $result;
                    //                 // if (!Yii::$app->session->hasFlash('Success') || !Yii::$app->session->hasFlash('Failure')) {
                    //                 //     Yii::$app->session->setFlash('Success','Upload successfully..!');
                    //                 // }
                    //                 $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                    //                 // Remove zipfile copy
                    //                 //unlink($zipFileCopy);
                    //             }
                    //         }else{
                    //             $model->taigStatusCode = $result->message;
                    //             $model->ErrorDesc = $result->message;
                    //             $model->save();
                    //             // $testResponse[5] = $result;
                    //             // if (!Yii::$app->session->hasFlash('Success') || !Yii::$app->session->hasFlash('Failure')) {
                    //             //     if($result->message == 'Cannot change state to the existing state.'){
                    //             //         Yii::$app->session->setFlash('Success','Upload successfully..! - Message: Files Already Uploaded');
                    //             //     }else{
                    //             //         Yii::$app->session->setFlash('Failure','Not Uploaded - Error Message:'.json_encode($result));
                    //             //     }
                    //             // }
                    //             $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                    //         }
                    //     }
                    // }
                    // else
                    // {
                    // }
                    //sending sms to agent
                    $this->sendSms($mobileno, $message);

                    if($callerEmail != '')
                    {
                        //caller email
                        $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                        $emailMessage = '<strong>Dear Sir/Madam,<br><br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                        $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;"> CANCELLED - Reason :'.$cancelledReason.'</td></tr>';
                        $emailMessage .= $this->hisMessage($model->id);
                        /*$emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';*/
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr>';
                        $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Remarks </td><td style="padding:15px;border:1px solid #000;">'.$model->remarks.'</td></tr></table></div>';
                        $emailMessage .= '<br><h2 style ="border-top: 1px solid #f1f1f1; border-bottom: 1px solid #f1f1f1; color: #ff110f; text-align: center; padding: 5px auto">Auto Generated Email. Please Do not Reply.</h2>';
                        $emailMessage .= '<br><p>Thanks & Regards,</p>';
                        $emailMessage .= '<h4>Axion Technical Services</h4>';
                        $smailer=\Yii::$app->googlemailer->compose('/site/about',['message' =>$emailMessage]);
                        if($smailer)
                        {
                            $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            ->setTo($agentEmail) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            ->setSubject($emailSubject);
                            $smailer->send();

                            // if ($model->insurerName == 10 || $model->insurerName == "ROYAL SUNDARAM GENERAL INSURANCE CO. LTD.")
                            // {
                            //     $smailer->setFrom(['axion.technicalservices@axionpcs.in' => 'No-reply@Axion'])
                            //     ->setTo(@$insuredUser->email) //manual.PI@godigit.com mythili.gopi@axionpcs.in
                            //     ->setSubject($emailSubject);
                            //     $smailer->send();
                            // }
                        }
                    }
                }

                //insert email data to email table for sending
                if($model->status == 12 || $model->status == 1 || $model->status == 8 || $model->status == 9) {
                    if($callerEmail != '')
                    {                                
                        $emailPosts = EmailHistory::find()
                        ->where('email = :val1 AND subject = :val2 AND message = :val3',['val1' =>$callerEmail,'val2' => $emailSubject,'val3' => $emailMessage])
                        ->count();

                        if($emailPosts==0) {
                            $emailHistory =  new EmailHistory();
                            $emailHistory->email = $callerEmail;
                            $emailHistory->subject = $emailSubject;
                            $emailHistory->message = $emailMessage;
                            $emailHistory->save();
                        }  
                    }
                }



                //sending followup sms
                if($lastStatus == 0 && $model->status == 0 && $model->followupReason != 0 && $model->followupRemainder != '' && $model->followupUpdatedBy !='')
                {
                    //checking for followup duplicate
                    if($lastFollowupReason != $model->followupReason || $lastFollowupRemainder != $model->followupRemainder || $lastFollowupUpdatedBy != $model->followupUpdatedBy)
                    {
                        //sending sms to customer
                        if($model->followupReason == 1 || $model->followupReason == 2 || $model->followupReason == 3 || $model->followupReason == 4)
                        {
                            //customer
                            $mobileno = $model->contactPersonMobileNo;
                            if($mobileno != '')
                            {
                                $message = 'Vehicle No:'.$model->registrationNo.'We are not able to contact you for your vehicle Inspection. Kindly Contact to us on Mobile No.8248998865';
                                $this->sendSms($mobileno, $message);
                            }

                            //insured mobile no
                            $insuredMobileno = $model->insuredMobile;
                            if($insuredMobileno != '')
                            {
                                $this->sendSms($insuredMobileno, $message);
                            }
                        }

                        //sending sms to caller
                        $mobileno = $model->callerMobileNo;
                        $message = 'Vehicle No:'.$model->registrationNo.' '.$model->followupValue[$model->followupReason].' '.$additionalSmsMessage;
                        $this->sendSms($mobileno, $message);

                        //sending email when followup is updated
                        if($callerEmail != '')
                        {
                            $emailSubject = 'VEHICLE NO: '.$model->registrationNo.'/'.$model->referenceNo.' - STATUS';
                            $emailMessage = '<strong>Dear Sir/Madam,<br>Please find the current STATUS as on '.date( 'd/m/Y h:i A', strtotime( $currentDateTime )).'</strong>';
                            $emailMessage .= '<div style="font-weight:bold;margin-top:10px;"><table style="border:1px solid #000;border-collapse: collapse;"><tr><td style="padding:15px;border:1px solid #000;">CURRENT STATUS </td><td style="padding:15px;border:1px solid #000;">'.$model->followupValue[$model->followupReason].'</td></tr>';
                            $emailMessage .= $this->hisMessage($model->id);
                                    // $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Extra KM </td><td style="padding:15px;border:1px solid #000;">'.$model->extraKM.'</td></tr>';
                            $emailMessage .= '<tr><td style="padding:15px;border:1px solid #000;">Assigned Field Executive Name </td><td style="padding:15px;border:1px solid #000;">'.$surveyor_name.'</td></tr></table></div>';

                            $emailPosts = EmailHistory::find()
                            ->where('email = :val1 AND subject = :val2 AND message = :val3',['val1' =>$callerEmail,'val2' => $emailSubject,'val3' => $emailMessage])
                            ->count();

                            if($emailPosts==0){
                                $emailHistory =  new EmailHistory();
                                $emailHistory->email = $callerEmail;
                                $emailHistory->subject = $emailSubject;
                                $emailHistory->message = $emailMessage;
                                $emailHistory->save();
                            }

                        }
                    }    
                }

                $obj = $this->findModel($model->id);
                $hismodel = new AxionPreinspectionHistory();
                $hismodel->attributes = $obj->attributes;
                $hismodel->preinspection_id = $obj->id;
                $hismodel->id = 0;

                if (!empty($smsStatus))
                {
                    $smsStatusObj = json_decode($smsStatus);
                    $smsSendStatusresult = $smsSendStatusresultobj = $messageId = $smsText = $smsSendStatus = '';
                    $messageIds = [];
                    if (!empty($smsStatusObj->Data))
                    {
                        foreach ($smsStatusObj->Data as $smsStatusObjValue)
                        {
                            $messageId = @$smsStatusObjValue->MessageId;
                            $checkSmsSendStatus = SMSHelper::checkSmsSendStatus($messageId);

                            $smsSendStatusresult = @$checkSmsSendStatus['data'];
                            
                            if (!empty($smsSendStatusresult))
                            {
                                $smsSendStatusresultobj = json_decode($smsSendStatusresult);
                                $smsText .= @$smsSendStatusresultobj->Data->Message;
                                $messageIds[] = @$smsSendStatusresultobj->Data->MessageId;
                                $smsSendStatus = @$smsSendStatusresultobj->Data->Status;
                            }
                        }
                    }
                    $hismodel->messageId = json_encode(@$messageIds);
                    $hismodel->smsType = @$smsType;
                    $hismodel->smsText = @$smsText;//$smsSendStatusresult;//@$smsSendStatusresultobj->Data->Message;
                    $hismodel->smsSendStatus = strtoupper(@$smsSendStatus);//strtoupper(@$smsSendStatusresultobj->Data->Status);
                }

                $hismodel->created_on = $currentDateTime;
                if (!$hismodel->save()) {
                    $this->log($model->contactPersonMobileNo, json_encode($hismodel->getErrors()));
                }

                if(!isset($output) || $output == '')
                {
                    return "Updated Successfully";
                }
            }
            else
            {
                return "DB Updated Error";
            }

        } 
        else {
            if($model->status == 0 || $model->status == 12 || $model->status == 1 ) {
                $model->status = '';
            }
            $model->rescheduleDateTime1 = '';
            $model->rescheduleReason1 = '';
            $ro = $model->ro; 
            $followupCheck = $this->getFollowupData('update', $id, $ro);
            $followupCheck = explode('|', $followupCheck);
            $block = $followupCheck[0];
            $sameId = $followupCheck[1];

            //Master Caller Data 
            $callerData = PreinspectionClientCaller::findOne(['callerMobileNo' => $model->callerMobileNo]);
            if($callerData)
            {
                $callerModel = $callerData;
            }
            else {
                $callerModel = false;
            }
            return $this->renderAjax('update', [
                'model' => $model,
                'valuator' => $valuator,
                'lastStatus' => $lastStatus,
                'block' => $block,
                'sameId' => $sameId,
                'city' => $city,
                'town' => $town,
                'state' => $state,                
                'callerModel' => $callerModel,
                'company' => $company,
                'division' => $division,
                'branch' => $branch,
                'caller' => $caller,
                'umodel' => $umodel,
                'role' => $role,
                'surveyor_list' => $surveyor_list,
            ]);
        }
    }


    protected function sendSms($mobileno,$message) {

        $sendSmsUpdate = \Yii::$app->params['sendSmsUpdate'];
        $username = \Yii::$app->params['sendSmsUser'];
        $password = \Yii::$app->params['sendSmsPwd'];
        $sendername = \Yii::$app->params['sendSmsSender'];

        $mobileno = '91'.$mobileno;
        $message = urlencode($message);

        if($sendSmsUpdate == 'Y')
        {
            //$url = "http://bulksms.mysmsmantra.com/WebSMS/SMSAPI.jsp?username=$username&password=$password&sendername=$sendername&mobileno=$mobileno&message=$message";
            // $url = "http://bulksms.mysmsmantra.com:8080/WebSMS/SMSAPI.jsp?username=$username&password=$password&sendername=$sendername&mobileno=$mobileno&message=$message";

            $url="https://api.mylogin.co.in/api/v2/SendSMS?ApiKey=$username&ClientId=$password&SenderId=$sendername&Message=$message&MobileNumbers=$mobileno&Is_Unicode=false&Is_Flash=false";

            $useragent = 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.3 Safari/533.2';

            $ch = curl_init($url);
            //curl_setopt($ch, CURLOPT_COOKIEJAR, 'C:\wamp\www\processcontrol\tmp\cookies.txt');
            //curl_setopt($ch, CURLOPT_COOKIEFILE, 'C:\wamp\www\processcontrol\tmp\cookies.txt');
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_HEADER, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // required as godaddy fails
            curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // required as godaddy fails
            curl_setopt($ch, CURLOPT_USERAGENT, $useragent);

            $html = curl_exec($ch);
            
            //print $html;
            
            if(!$html){
                echo "cURL error number:" .curl_errno($ch);
                echo "cURL error:" . curl_error($ch);
            }
            
            curl_close($ch);

            return $html;
        }  
    }

    /**
     * Deletes an existing Preinspection model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     */
    public function actionDelete($id)
    {
        /*
        $this->findModel($id)->delete();

        return $this->redirect(['index']);
        */
        $id = Yii::$app->request->post('id'); // Array or selected records primary keys

        // Preventing extra unnecessary query
        if (!$id) {
            return;
        }

        AxionPreinspection::findOne($id)->delete();

        return;
    }

    public function actionDeleteMultiple()
    {
        $id = Yii::$app->request->post('id'); // Array or selected records primary keys

        // Preventing extra unnecessary query
        if (!$id) {
            return;
        }
        
        foreach ($id as $key => $value) 
        {
          AxionPreinspection::findOne($value)->delete();
        }
        return;
    }

    public function actionRemovePhoto()
    {
        $id = Yii::$app->request->post('id'); // Array or selected records primary keys

        // Preventing extra unnecessary query
        if (!$id) {
            return;
        }

        $qcLoc = \Yii::$app->params['qcLoc'];

        $model = AxionPreinspectionPhotos::findOne($id);
        $filename = getcwd().'/'.$qcLoc.$model->image;
        S3Helper::delete($qcLoc.$model->image);
        if(unlink($filename))
        {
            $model->image = '';
            $model->iLat = '';
            $model->iLong = '';
            $model->bLat = '';
            $model->bLong = '';
            $model->iTime = '';
            $model->sTime = '';
            $model->iLocation = '';
            $model->bLocation = '';
            $model->locStatus = '';
            $model->timeStatus = '';
            $model->save();

            clearstatcache();

            return $model->type;
        }
        else
        {
            return 0;
        }
        

    }

    public function actionRemovePhotobrowse()
    {
        $id = Yii::$app->request->post('key'); // Array or selected records primary keys

        // Preventing extra unnecessary query
        if (!$id) {
            return;
        }

        $qcLoc = \Yii::$app->params['qcLoc'];

        $model = AxionPreinspectionPhotos::findOne($id);
        $filename = getcwd().'/'.$qcLoc.$model->image;
        S3Helper::delete($qcLoc.$model->image);
        if(unlink($filename))
        {
            $model->image = '';
            $model->iLat = '';
            $model->iLong = '';
            $model->bLat = '';
            $model->bLong = '';
            $model->iTime = '';
            $model->sTime = '';
            $model->iLocation = '';
            $model->bLocation = '';
            $model->locStatus = '';
            $model->timeStatus = '';
            $model->save();
            return 1;
        }
        else
        {
            return 0;
        }
        

    }
    
    public function actionAssignLocation()
    {
        $lat = Yii::$app->request->post('lat'); // Array or selected records primary keys
        $long = Yii::$app->request->post('long');

        // Preventing extra unnecessary query
        if (!$lat || !$long) {
            return;
        } 
        Yii::$app->session->set('user.lat',$lat);
        Yii::$app->session->set('user.long',$long);
        return 0;
    }
    
    
    public function actionDownloadphotos($id)
    {
        $model = AxionPreinspection::findOne($id);
        $referenceNo = $model->referenceNo;
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        $qcLoc = \Yii::$app->params['qcLoc'];
        
        $zip = new \ZipArchive();

        $tmp_file = getcwd().'/uploadp/'.$referenceNo.'-images.zip';

        if(file_exists($tmp_file)){
            $zip->open($tmp_file, \ZipArchive::OVERWRITE);
        }
        else {
            $zip->open($tmp_file, \ZipArchive::CREATE);
        }

        if(count($phmodel) > 0)
        {
            foreach($phmodel as $obj)
            {
                if($obj->image != '')
                {
                    $file = 'https://'.\Yii::$app->params['s3Bucket'].'.s3.'.\Yii::$app->params['s3Region'].'.amazonaws.com/'.$qcLoc.$obj->image;
                    
                    $s3FileExists =  S3Helper::fileExists($file);

                    if ($s3FileExists['status'])
                    {
                        $file = $s3FileExists['data']['url'];
                    }
                    else
                    {
                        $file = Yii::$app->urlManager->createAbsoluteUrl($qcLoc.$obj->image);
                    }
                    
                    $download_file = file_get_contents($file);
                    $zip->addFromString(basename($file), $download_file);
                }
            }
            $zip->close();

            $path = getcwd().'/uploadp/'.$referenceNo.'-images.zip';
            if(file_exists($path)){
                \Yii::$app->response->sendFile($path)->send();
                unlink($path);
            }
            else
            {
                return $this->redirect(Yii::$app->request->referrer);
            }
        }
        else
        {
            return $this->redirect(Yii::$app->request->referrer);
        }
    }


    protected function savePhotosPdf($id, $conveyanceApprovalImg)
    {
        $model = AxionPreinspection::findOne($id);
        $referenceNo = $model->referenceNo;
        $phmodel = AxionPreinspectionPhotos::findAll(['preinspection_id' => $id]);
        $qcLoc = \Yii::$app->params['qcLoc'];

        try 
        {
            $zip = new \ZipArchive();

            $s3FileLocation = 'api-uploads/'.$id.'-images-pdf.zip';
            $tmp_file = getcwd().'/api-uploads/'.$id.'-images-pdf.zip';

            if(file_exists($tmp_file)){
                $zip->open($tmp_file, \ZipArchive::OVERWRITE);
            }
            else{
                $zip->open($tmp_file, \ZipArchive::CREATE);
            }

            $path = json_encode($zip);
            $p1 = json_decode($path);
            $name = $p1->filename;

            if(count($phmodel) > 0)
            {
                foreach($phmodel as $obj)
                {
                    if($obj->image != '')
                    {
                        $file = 'https://'.\Yii::$app->params['s3Bucket'].'.s3.'.\Yii::$app->params['s3Region'].'.amazonaws.com/'.$qcLoc.$obj->image;
                        $s3FileExists =  S3Helper::fileExists($file);

                        if ($s3FileExists['status'])
                        {
                            $file = $s3FileExists['data']['url'];
                        }
                        else
                        {
                            $file = getcwd().'/'.$qcLoc.$obj->image;
                        }
                        $download_file = file_get_contents($file);
                        $zip->addFromString(basename($file), $download_file);
                    }
                }
                
                $pdfFile = 'https://'.\Yii::$app->params['s3Bucket'].'.s3.'.\Yii::$app->params['s3Region'].'.amazonaws.com/'.'api-uploads/pdf/'.$id.'.pdf';
                $s3PdfFileExists =  S3Helper::fileExists($pdfFile);

                if ($s3PdfFileExists['status'])
                {
                    $pdfFile = $s3PdfFileExists['data']['url'];
                }
                else
                {
                    $pdfFile = getcwd().'/api-uploads/pdf/'.$id.'.pdf';
                }
                $download_file = file_get_contents($pdfFile);
                $zip->addFromString(basename($pdfFile), $download_file);
                $zip->close();
                
                $result = S3Helper::upload($tmp_file, $s3FileLocation);

                if ($result['status'])
                {
                    //unlink($tmp_file);
                }
            }

            if($model->load(Yii::$app->request->post()) ){
                $model->uploadPath = $name;
                $model->conveyanceApprovalImg = $conveyanceApprovalImg;
                $model->save();
                // if($model->insurerName == 5 && ($model->status ==  101 || $model->status == 102))
                if($model->status ==  101 || $model->status == 102)
                {
                    // $testResponse[0] = 'IF - '.$model->createMethod.' ~~ '.$model->status.' ~~ '.$model->insurerName;
                    if($model->status ==  101)
                    {
                        $status = "Approved";
                    }
                    else
                    {
                        $status = "Rejected";
                    }


                    $zipFile = getcwd().'/api-uploads/'.$id.'-images-pdf.zip';

                    // Make copy of existing zip file
                    copy($zipFile, getcwd().'/api-uploads/'.$id.'-tata-images-pdf.zip');

                    $zipFileCopy = getcwd().'/api-uploads/'.$id.'-tata-images-pdf.zip';

                    // Open zipfile copy and delete the video file
                    $zip = new \ZipArchive;
                    if ($zip->open($zipFileCopy) === TRUE) {

                        for( $i = 0; $i < $zip->numFiles; $i++ ){
                            $filename = $zip->getNameIndex($i);
                            if (preg_match("/vehicleVideo/i", $filename)) {
                                $zip->deleteName($filename);
                            }
                        }
                        $zip->close();

                    } 
                    else {
                        Yii::$app->session->setFlash('Failure','Not Uploaded..!');
                    }

                    // if (function_exists('curl_file_create')) {
                    //     $zipFile = curl_file_create($zipFile);
                    // } else {  
                    //   $zipFile = curl_file_create(realpath($zipFile));
                    // }     

                    // Change the filename to copied zipfile
                    $uploadPath = preg_replace("/\/(\d+)\-/i", "/$1-tata-", $model->uploadPath);
                    $sendpath = curl_file_create(realpath($uploadPath));

                    if($model->fristRoid != NULL){
                        $getstateid = User::find()->where(['id'=>$model->fristRoid])->one();
                        $stateId = $getstateid->stateId;
                    }elseif($model->stateId != NULL){
                        $stateId = $model->stateId;
                    }else{
                        $getstateid = User::find()->where(['id'=>$model->userId])->one();
                        $stateId = $getstateid->stateId;
                    }
                    // return $model->createMethod;
                    if($model->createMethod == 'Api'){
                        // $testResponse[1] = 'IF API - '.$model->createMethod.' ~~ '.$model->status.' ~~ '.$model->insurerName;
                        // return $stateId;
                        switch ($stateId) {
                            case 1:
                                $curlUserid = 'axionkar';
                                break;
                            case 2:
                                $curlUserid = 'axion';
                                break;
                            case 3:
                                $curlUserid = 'axionker';
                                break;
                            case 5:
                                $curlUserid = 'axionap';
                            break;
                            case 6:
                                $curlUserid = 'axion1';
                            break;
                            case 10:
                                $curlUserid = 'axionbr';
                            break;
                            case 14:
                                $curlUserid = 'axiondel';
                            break;
                            case 11:
                                $curlUserid = 'axionker';
                            break;
                            default:
                                $curlUserid = 'axion';
                        }
        
                        // return $curlUserid;
        
                        $postFields =  array(
                            "leadID" => $model->contactPersonMobileNo,
                            "vehicleRegistrationNo" => $model->registrationNo,
                            "qcStatus" => $status,
                            "zipArray" => $sendpath,
                            "pdfArray1" => [],
                            "pdfArray2" => [],
                            "userID" => $curlUserid,
                            "remark" => $model->remarks
                        );
        
                        //   if($model->taigStatusRequest == '')
                        //   {      
                        $curl = curl_init();
        
                        curl_setopt_array($curl, array(
                            CURLOPT_URL => "https://tataaig.vahancheck.com/VCWebAPI/api/ExternalAgencyReport/Post", // Test URL - http://tataaiguat.vahancheck.com/VCWebAPI/api/ExternalAgencyReport/Post
                            CURLOPT_RETURNTRANSFER => true,
                            CURLOPT_ENCODING => "",
                            CURLOPT_MAXREDIRS => 10,
                            CURLOPT_TIMEOUT => 1000,
                            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                            CURLOPT_CUSTOMREQUEST => "POST",
                            CURLOPT_POSTFIELDS => $postFields,
                            CURLOPT_HTTPHEADER => array(
                                "authorization: Basic PuwoFFOP+Zr2wtaTjv9KnQ==",
                                "cache-control: no-cache",
                                "content-type: multipart/form-data"
                            ),
                        ));
        
                        $response = curl_exec($curl);
                        $err = curl_error($curl);
        
                        curl_close($curl);
        
                        $result = json_decode($response);
                                        //   print_r($result->StatusCode); 
                        $model->ErrorDesc = $result->ErrorDesc;
                        $model->save();
        
                        if($result->RequestStatus == 'success' && $result->StatusCode == '111105')
                        {
                            if($model->load(Yii::$app->request->post()) )
                            { 
                                $model->taigRequestStatus = 'Y';
                                $model->taigStatusCode = $result->StatusCode;
                                $model->ErrorDesc = $result->ErrorDesc;
                                $model->save();
        
                                // Yii::$app->session->setFlash('Success','Upload successfully..!');
                                $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                                // Remove zipfile copy
                                unlink($zipFileCopy);
                            }
                        }
                        else{
                            $model->taigStatusCode = $result->StatusCode;
                            $model->ErrorDesc = $result->ErrorDesc;
                            $model->save();
                            $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                            Yii::$app->session->setFlash('Failure','Not Uploaded - Error Code:'.$result->StatusCode.' Error Message:'.$result->ErrorDesc);
                            // Yii::$app->session->setFlash('Failure','Not Uploaded - Error Code:'.$result->StatusCode.' Error Message:'.$result->ErrorDesc.' curlUserid:'.$curlUserid.' stateId - '.json_encode($stateId));
                        }
                    }elseif($model->createMethod == 'New TataAgi Api' || $model->createMethod == ''){
                        // $testResponse[2] = 'Else IF New TataAgi Api - '.$model->createMethod.' ~~ '.$model->status.' ~~ '.$model->insurerName;

                        switch ($stateId) {
                            case 1:
                                $curlUserid = '8105741060';
                                $auth = '8e9e003b-5ef4-4abf-acf2-fca7168b54eb';
                                break;
                            case 2:
                                $curlUserid = '8668095935';
                                $auth = '872f4d85-4083-4bb7-8be5-1cb82743d841';
                                break;
                            case 3:
                                $curlUserid = '9072872233';
                                $auth = '479ec179-b5c8-44bc-8a50-bbb779e923c1';
                                break;
                            case 5:
                                $curlUserid = '7330714466';
                                $auth = '0de3a3c2-9d98-441c-9fa8-43da27013a8e';
                            break;
                            default:
                                $curlUserid = '8105741060';
                                $auth = '8e9e003b-5ef4-4abf-acf2-fca7168b54eb';
                        }

                        $postFields =  array(
                            "leadID" => $model->contactPersonMobileNo,
                            "vehicleRegistrationNo" => $model->registrationNo,
                            "qcStatus" => $status,
                            "zipArray" => new \CurlFile($uploadPath, mime_content_type($uploadPath), basename($uploadPath)),
                            "pdfArray1" => new \CurlFile($uploadPath, mime_content_type($uploadPath), basename($uploadPath)),
                            "pdfArray2" => new \CurlFile($uploadPath, mime_content_type($uploadPath), basename($uploadPath)),
                            "userID" => $curlUserid
                        );
        
                        //   if($model->taigStatusRequest == '')
                        //   {      
                        $curl = curl_init();
        
                        curl_setopt_array($curl, array(
                            CURLOPT_URL => "https://byomkeshmotorapi.tataaig.com/api/lob-specific/motor-claims/external-agency-report", // https://uatbyomkeshmotorapi.tataaig.com/api/lob-specific/motor-claims/external-agency-report // Test URL
                            CURLOPT_RETURNTRANSFER => true,
                            CURLOPT_ENCODING => "",
                            CURLOPT_MAXREDIRS => 10,
                            CURLOPT_TIMEOUT => 1000,
                            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                            CURLOPT_CUSTOMREQUEST => "POST",
                            CURLOPT_POSTFIELDS => $postFields,
                            CURLOPT_HTTPHEADER => array(
                                "x-api-key:".$auth
                            ),
                        ));
        
                        $response = curl_exec($curl);
                        $err = curl_error($curl);

                        if($err){
                            Yii::$app->session->setFlash('Try Again','API - Error Message:'.json_encode($err));
                            $this->log($model->contactPersonMobileNo,json_encode($err),json_encode($postFields));
                        }
        
                        curl_close($curl);
        
                        $result = json_decode($response);

                        // return json_encode($result);

                        if(!$err && $result != null && $result->error == false){
                            if($model->load(Yii::$app->request->post()) )
                            { 
                                $model->taigRequestStatus = 'Y';
                                $model->taigStatusCode = 0;
                                $model->ErrorDesc = $result->message;
                                $model->save();    
                                // $testResponse[6] = $result;
                                if (!Yii::$app->session->hasFlash('Success') || !Yii::$app->session->hasFlash('Failure')) {
                                    Yii::$app->session->setFlash('Success','Upload successfully..!');
                                }
                                $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                                // Remove zipfile copy
                                unlink($zipFileCopy);
                            }
                        }else{
                            $model->taigStatusCode = $result->message;
                            $model->ErrorDesc = $result->message;
                            $model->save();
                            // $testResponse[5] = $result;
                            if (!Yii::$app->session->hasFlash('Success') || !Yii::$app->session->hasFlash('Failure')) {
                                if($result->message == 'Cannot change state to the existing state.'){
                                    Yii::$app->session->setFlash('Success','Upload successfully..! - Message: Files Already Uploaded');
                                }else{
                                    Yii::$app->session->setFlash('Failure','Not Uploaded - Error Message:'.json_encode($result));
                                }
                            }
                            $this->log($model->contactPersonMobileNo,json_encode($result),json_encode($postFields));
                        }
                    }
                }
            }
        }
        catch(ErrorException $e) {
            $this->log(@$model->contactPersonMobileNo, @$e->getMessage(), 'ZIP create error');
        }
        //\Yii::$app->response->sendFile($path)->send();
    }


    /**
     * Finds the Preinspection model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Preinspection the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = AxionPreinspection::findOne($id)) !== null) {
            return $model;
        } else {
            throw new NotFoundHttpException('The requested page does not exist.');
        }
    }

    public function actionVehicleCheck($regno, $companyId, $id)
    {
        $today = date("Y-m-d");
        $prefirstday = date('Y-m-01');

        // $counts = AxionPreinspection::find()
        // ->where(['registrationNo' => $regno, 'insurerName' => $companyId])
        // ->andWhere(['!=', 'id', $id])
        // ->andwhere(['between', 'DATE(intimationDate)', $prefirstday, $today])
        // ->count();

        $fristcase = AxionPreinspection::find()
        ->where(['id' => $id])
        ->andWhere(['=', 'paymentMode', 1])
        ->andwhere(['between', 'DATE(intimationDate)', $prefirstday, $today])
        ->count();

        // return 'fristcase'.$fristcase;

        $counts = AxionPreinspection::find()
        ->where(['registrationNo' => $regno, 'insurerName' => $companyId])
        ->andWhere(['!=', 'status', 9])
        ->andWhere(['!=', 'id', $id])
        ->andwhere(['between', 'DATE(intimationDate)', $prefirstday, $today])
        ->count();

        if($fristcase<1 && $counts>0){
           //echo $countsDependStatus->createCommand()->getRawSql();
           echo json_encode(['counts' => $counts]); // , 'countsDependStatus' => $countsDependStatus
        }
        else{
           echo json_encode(['counts' => 0]);;
        }
    }

    /*
    * To list out the fresh cases
    */
    public function actionFresh()
    {
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();

               // your default model and dataProvider generated by gii
        $searchModel = new AxionPreinspectionSearch();
        $searchModel->status = [0, 100]; 
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams,'fresh');

        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
        }
        else
        {
            $company = PreinspectionClientCompany::find()
            ->all();
        }

        $branch = '';

        $params = Yii::$app->request->getQueryParams();

        if(isset($params['AxionPreinspectionSearch']['insurerBranch']))
        {

            $branch = PreinspectionClientBranch::find()
            ->where(['companyId' => $params['AxionPreinspectionSearch']['insurerName']])
            ->all();  

        }

               // non-ajax - render the grid by default
        return $this->render('fresh', [
           'dataProvider' => $dataProvider,
           'searchModel' => $searchModel,
           'valuator'=>$valuator,
           'role' => $role,
           'company' => $company,
           'branch' => $branch,
       ]);
    }

    /*
    * To list out the scheduled cases
    */
    public function actionScheduled()
    {
        $role = array_keys(Yii::$app->authManager->getRolesByUser(Yii::$app->user->getId()))[0] ;
        $valuator = User::find()
        ->join('LEFT JOIN','auth_assignment','auth_assignment.user_id = id')
        ->andFilterWhere(['auth_assignment.item_name' => 'Surveyor'])
        ->orderBy('firstName ASC')
        ->all();

               // your default model and dataProvider generated by gii
        $searchModel = new AxionPreinspectionSearch();
        $searchModel->status = [12,1]; 
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams,'scheduled');

        if($role == 'Branch Head' || $role == 'Branch Executive')
        {
            $company = PreinspectionClientCompany::find()
            ->where(['id' => Yii::$app->user->identity->companyId])
            ->all();
        }
        else
        {
            $company = PreinspectionClientCompany::find()
            ->all();
        }

        $branch = '';

        $params = Yii::$app->request->getQueryParams();

        if(isset($params['AxionPreinspectionSearch']['insurerBranch']))
        {

            $branch = PreinspectionClientBranch::find()
            ->where(['companyId' => $params['AxionPreinspectionSearch']['insurerName']])
            ->all();  

        }

               // non-ajax - render the grid by default
        return $this->render('scheduled', [
           'dataProvider' => $dataProvider,
           'searchModel' => $searchModel,
           'valuator'=>$valuator,
           'role' => $role,
           'company' => $company,
           'branch' => $branch,
       ]);
    }

    public function actionImageRotate() {
        $id = $_POST['id'];
        $type = $_POST['type'];
        $qcLoc = \Yii::$app->params['qcLoc'];

        if ($_POST['imgUrl']) {

            //$hostName = \Yii::$app->request->hostInfo;

            // Remove hostname from url
            //$inputFile = str_replace($hostName.'/', '', $_POST['imgUrl']);
            $inputFile = $_POST['imgUrl'];

            $exetension = pathinfo($inputFile, PATHINFO_EXTENSION); 
            $path = pathinfo($inputFile, PATHINFO_DIRNAME); 
            $filename = pathinfo($inputFile, PATHINFO_BASENAME); 

            $newName = $id . '-'.$type.'-'. Yii::$app->security->generateRandomString() . '.' . $exetension;
            
            $s3ImgFile = file_get_contents($inputFile);
            file_put_contents($qcLoc.$filename, $s3ImgFile);

            Image::getImagine()->open($qcLoc.$filename)->rotate(90)->save($qcLoc.$filename);

            $photomodel = AxionPreinspectionPhotos::findOne(['preinspection_id' => $id,'type' => $type]);
            $photomodel->image = $newName;
            $photomodel->save();

            $newUrl = $path.'/'.$newName;

            rename(getcwd().'/'.$qcLoc.$filename, getcwd().'/'.$qcLoc.$newName);
            $s3Upload = S3Helper::upload($qcLoc.$newName, $qcLoc.$newName);

            if ($s3Upload['status'])
            {
                S3Helper::delete($qcLoc.$filename);
            }
            
            return $newUrl;
        }
        
    }

    public function actionVideoUpload() {
        $id = $_POST['id'];
        $type = $_POST['type'];
        $qcLoc = \Yii::$app->params['qcLoc'];
        
        date_default_timezone_set('Asia/Kolkata');

        $photomodel = AxionPreinspectionPhotos::findOne(['preinspection_id' => $id,'type' => $type]);
        $video = \yii\web\UploadedFile::getInstanceByName('video'); //UploadedFile::getInstance($photomodel, 'video');

        // Set video name and upload path
        $videoName = $id . '-'.$type.'-'. Yii::$app->security->generateRandomString() . '.mp4';
        $inputFile = $qcLoc . $videoName;

        // If video successfully uploaded
        if ($video->saveAs($inputFile)) {

            //Get ffmpeg file path
            $ffmpeg = Yii::$app->ffmpeg->path;

            $locationCmd = $ffmpeg .' -i '. $inputFile .' -f ffmetadata '. $qcLoc.$id.'.txt';
            exec($locationCmd, $results);

            // Get lat and long from video
            $fh = fopen($qcLoc.$id.'.txt', 'r');
            while(!feof($fh)) {
                $line = fgets($fh);
                if ( preg_match("/location\=/i", $line) ) {
                    $line = str_replace("location=", "", $line);
                    $coOrdinates = explode('+', $line);
                    $vLat = str_replace('/', '', $coOrdinates[1]);
                    $vLong = str_replace('/', '', $coOrdinates[2]);
                }
            }
            fclose($fh);

            // Delete location data file
            unlink($qcLoc.$id.'.txt');

            // Get lat and long from browser
            $bLat = Yii::$app->session->get('user.lat');
            $bLong = Yii::$app->session->get('user.long');
            $timestamp = date('d-m-Y h\\\\:i\\\\:s A');


            if($vLat != '' && $vLong != '')
            {
                $iLocation = $this->getLocation($vLat, $vLong);
            }

            if($bLat != '' && $bLong != '')
            {
                $bLocation = $this->getLocation($bLat, $bLong);
            }
            
            //$timestamp = '%{localtime\: %d-%m-%Y %T}';
            //$displayText = '%Y-%m-%d\ %H\\\\:%M\\\\:%S Test';
            
            if($locStatus == 0)
            {
                $location = $iLocation;
                if($location == '')
                {
                    $location = $bLocation;
                }
                if($location == '' && $vLat != '')
                {
                    $location = 'Lat\\\\:'.$vLat.' Long\\\\:'.$vLong;
                }
                else if($location == '')
                {
                    if ($bLat != '')
                        $location = 'Lat\\\\:'.$bLat.' Long\\\\:'.$bLong;
                }
            } 

            // Renaming a video 
            $videoName = $id . '-'.$type.'-'. Yii::$app->security->generateRandomString() . '.mp4';
            $target_file = $qcLoc . $videoName;

                // Append text on video  // expansion=strftime: *formatted time* -codec:a copy
            $timestampText = "text='$timestamp': fontfile=fonts/Chocolate Cookies.ttf: fontcolor=white: fontsize=20: x=w-tw-10:y=h-th-40";
            $locationText = "text='$location': fontfile=fonts/Chocolate Cookies.ttf: fontcolor=white: fontsize=20: x=w-tw-10:y=h-th-10";

            $cmd = $ffmpeg .' -i '. $inputFile .' -vf "[in]drawtext='.$timestampText.', drawtext='.$locationText.'[out]" -r 30 '. $target_file;
            exec($cmd,$results);

            $photomodel->image = $videoName;
            if ($photomodel->save()) {
                unlink($inputFile);
                clearstatcache();
                $result = S3Helper::upload($target_file, $target_file);

                return \Yii::$app->request->hostInfo.'/'.$target_file;
            }
        }
        else {
            return 'Failed';
        }
    }

    public function saveVideoFfmpeg($id, $type, $inputFile) {
        $qcLoc = \Yii::$app->params['qcLoc'];
        date_default_timezone_set('Asia/Kolkata');

            //Get ffmpeg file path
        $ffmpeg = Yii::$app->ffmpeg->path;

        $locationCmd = $ffmpeg .' -i '. $inputFile .' -f ffmetadata '. $qcLoc.$id.'.txt';
        exec($locationCmd, $results);

            // Get lat and long from video
        $fh = fopen($qcLoc.$id.'.txt', 'r');
        while(!feof($fh)) {
            $line = fgets($fh);
            if ( preg_match("/location\=/i", $line) ) {
                $line = str_replace("location=", "", $line);
                $coOrdinates = explode('+', $line);
                $vLat = str_replace('/', '', $coOrdinates[1]);
                $vLong = str_replace('/', '', $coOrdinates[2]);
            }
        }
        fclose($fh);

            // Delete location data file
        unlink($qcLoc.$id.'.txt');

            // Get lat and long from browser
        $bLat = Yii::$app->session->get('user.lat');
        $bLong = Yii::$app->session->get('user.long');
        $timestamp = date('d-m-Y h\\\\:i\\\\:s A');


        if($vLat != '' && $vLong != '')
        {
            $iLocation = $this->getLocation($vLat, $vLong);
        }

        if($bLat != '' && $bLong != '')
        {
            $bLocation = $this->getLocation($bLat, $bLong);
        }

            //$timestamp = '%{localtime\: %d-%m-%Y %T}';
            //$displayText = '%Y-%m-%d\ %H\\\\:%M\\\\:%S Test';

        if($locStatus == 0)
        {
            $location = $iLocation;
            if($location == '')
            {
            $location = $bLocation;
            }
            if($location == '' && $vLat != '')
            {
            $location = 'Lat\\\\:'.$vLat.' Long\\\\:'.$vLong;
            }
            else if($location == '')
            {
                if ($bLat != '')
                    $location = 'Lat\\\\:'.$bLat.' Long\\\\:'.$bLong;
            }
        } 

        // Renaming a video 
        $videoName = $id . '-'.$type.'-'. Yii::$app->security->generateRandomString() . '.mp4';
        $target_file = $qcLoc . $videoName;

                // Append text on video  // expansion=strftime: *formatted time* -codec:a copy
        $timestampText = "text='$timestamp': fontfile=fonts/Chocolate Cookies.ttf: fontcolor=white: fontsize=20: x=w-tw-10:y=h-th-40";
        $locationText = "text='$location': fontfile=fonts/Chocolate Cookies.ttf: fontcolor=white: fontsize=20: x=w-tw-10:y=h-th-10";

        //$cmd = $ffmpeg .' -i '. $inputFile .' -vf "[in]drawtext='.$timestampText.', drawtext='.$locationText.'[out]" -r 30 -c:v libx264 -b:v 700k '. $target_file;
        $cmd = $ffmpeg .' -i '. $inputFile .' -r 30 -c:v libx264 -b:v 700k '. $target_file;
        exec($cmd,$results);

        unlink($inputFile);
        clearstatcache();

        $result = S3Helper::upload($target_file, $target_file);

        return $videoName;  
    }

    public function curlRequest($url, $actionUrl=false, $str){
        $actionUrl = $actionUrl ? $actionUrl : $url;
        $headers = array(
            "Content-type: application/xml;charset=\"utf-8\"",
            "Accept: text/xml",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            'SOAPAction:"'.$actionUrl.'"',
            "Content-length: ".strlen($str),
        );
        $ch = curl_init();
    
        curl_setopt($ch, CURLOPT_URL, $url); //Load from datasource
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        //curl_setopt($ch, CURLINFO_HEADER_OUT, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $str);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);


        // converting
        $response = curl_exec($ch);
        return $response;
        //echo json_encode(curl_error($ch));
        curl_close($ch);    
    }

    public function rsCurlRequest($url, $data){
        $headers = array(
            "Content-type: application/json",
            "Accept: application/json",
            "Cache-Control: no-cache",
            "Pragma: no-cache",
            "Accept-Encoding: gzip, deflate" // Add this header to indicate support for compression
        );
        $ch = curl_init();
    
        curl_setopt($ch, CURLOPT_URL, $url); // Load from datasource
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
        curl_setopt($ch, CURLOPT_TIMEOUT, 30);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
    
        // Execute the cURL request
        $response = curl_exec($ch);
        
        // Check for cURL errors
        if ($response === false) {
            $error = curl_error($ch);
            // Log or handle the error
            curl_close($ch);
            return "cURL Error: $error";
        }
        
        // Close the cURL handle
        curl_close($ch); 
    
        // Decompress the response if it's compressed
        $decompressedResponse = gzdecode($response);
        if ($decompressedResponse === false) {
            // If decompression fails, return error
            return "Decompression Error: Failed to decompress response";
        }
    
        // Attempt to decode JSON
        $decodedResponse = json_decode($decompressedResponse, true);
        
        // Check for JSON decoding errors
        if ($decodedResponse === null && json_last_error() !== JSON_ERROR_NONE) {
            // Log or handle the JSON decoding error
            return "JSON Decoding Error: " . json_last_error_msg();
        }
    
        return $decodedResponse;
    }
    

    // Test function
    public function actionFfmpeg() {
        $qcLoc = \Yii::$app->params['qcLoc'];
        $ffmpeg = Yii::$app->ffmpeg->path;
        
        $text="Test";
        $command = "text='$text': fontfile=fonts/Chocolate Cookies.ttf: fontcolor=white: fontsize=20: x=w-tw-10:y=h-th-10:";
        $input_file = $qcLoc.'video_20210802_181838.mp4';
        $target_file = $qcLoc.'video_20210802_181838_new.mp4';
        try{
            $locComments = $ffmpeg .' -i '. $input_file .' -f ffmetadata qcphotos/in.txt';
            exec($locComments,$results);

            $fh = fopen('qcphotos/in.txt', 'r');
            while(!feof($fh)) {
                $line = fgets($fh);
                if ( preg_match("/location\=/i", $line) ) {
                    $line = str_replace("location=", "", $line);
                    $coOrdinates = explode('+', $line);
                    $lat = str_replace('/', '', $coOrdinates[1]);
                    $long = str_replace('/', '', $coOrdinates[2]);
                }
            }
            fclose($fh);
            unlink('qcphotos/in.txt');

            $cmd = $ffmpeg .' -i '. $input_file .' -vf "drawtext='.$command.'" -codec:a copy '. $target_file;

            print_r($cmd);
            exec($cmd,$results);
            echo '<br>'.$lat.' -- '. $long;
            die('done');
        }
        catch(ErrorException $e){
            echo $e->getMessage();die;
        }
    }

    public function actionImageList($id)
    {
        $imageList = AxionPreinspectionPhotos::find()->andFilterWhere(['preinspection_id' => $id])->all();
        $premodel = AxionPreinspection::findOne($id);

        return $this->render('image-list', [
            'imageList' => $imageList,
            'premodel' => $premodel,
            'imgLoc' => \Yii::$app->params['qcLoc']
        ]);
    }


    public function log($num=false,$message=false,$request=false){
        date_default_timezone_set('Asia/Kolkata'); //India time (GMT+5:30)
        $model = new Logs();
        $model->createdOn = date('Y-m-d H:i:s');
        $model->leadNumber = ($num) ? $num : "";
        $model->message = ($message) ? $message : "";
        $model->request = ($request) ? $request : "";
        $model->save();
        return true;
    }

    public function actionTestSendSms() {
        $mobileno = 9944338819;
        $message = "Hi this test msg from Axion";
        $sendSmsUpdate = \Yii::$app->params['sendSmsUpdate'];
        $username = \Yii::$app->params['sendSmsUser'];
        $password = \Yii::$app->params['sendSmsPwd'];
        $sendername = \Yii::$app->params['sendSmsSender'];
        
        $mobileno = '91'.$mobileno;
        $message = urlencode($message);
          
        if($sendSmsUpdate == 'Y')
        {
          //$url = "http://bulksms.mysmsmantra.com/WebSMS/SMSAPI.jsp?username=$username&password=$password&sendername=$sendername&mobileno=$mobileno&message=$message";
          // $url = "http://bulksms.mysmsmantra.com:8080/WebSMS/SMSAPI.jsp?username=$username&password=$password&sendername=$sendername&mobileno=$mobileno&message=$message";

          $url="https://api.mylogin.co.in/api/v2/SendSMS?ApiKey=$username&ClientId=$password&SenderId=$sendername&Message=$message&MobileNumbers=$mobileno&Is_Unicode=false&Is_Flash=false";
          
          return $url;
          $useragent = 'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.3 Safari/533.2';

          $ch = curl_init($url);
          //curl_setopt($ch, CURLOPT_COOKIEJAR, 'C:\wamp\www\processcontrol\tmp\cookies.txt');
          //curl_setopt($ch, CURLOPT_COOKIEFILE, 'C:\wamp\www\processcontrol\tmp\cookies.txt');
          curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
          curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
          curl_setopt($ch, CURLOPT_HEADER, 0);
          curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); // required as godaddy fails
          curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); // required as godaddy fails
          curl_setopt($ch, CURLOPT_USERAGENT, $useragent);

          $html = curl_exec($ch);
          
          // return print $html;
          
          if(!$html){
              echo "cURL error number:" .curl_errno($ch);
              echo "cURL error:" . curl_error($ch);
          }else {
            print $html;
          }
          
          curl_close($ch);
        }  
    }

    public function actionCompressedQc(){
        $qcuploadFile = getcwd().'/qcphotos/164942-vehicleVideo-ijhB738vLaJVJ872HPvYfJ_g32knL_rN.mp4';
        $compressedFile = getcwd().'/compressed_qcphotos/164942-vehicleVideo-ijhB738vLaJVJ872HPvYfJ_g32knL_rN.mp4';  
        //exec("ffmpeg -i $qcuploadFile -vf scale=1280:-2 -c:v libx264 -crf 23 -c:a aac -b:a 128k $compressedFile"); 
        return "ffmpeg -i $qcuploadFile -vf scale=1280:-2 -c:v libx264 -crf 23 -c:a aac -b:a 128k $compressedFile";
    }

}